/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _AIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 64;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 48;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const _ALIASES_H: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _AR_H: u32 = 1;
pub const ARMAG: &[u8; 9] = b"!<arch>\n\0";
pub const SARMAG: u32 = 8;
pub const ARFMAG: &[u8; 3] = b"`\n\0";
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 1;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _CTYPE_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _GETOPT_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _GETOPT_EXT_H: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 131072;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const CHAR_MIN: u32 = 0;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const OPTION_ARG_OPTIONAL: u32 = 1;
pub const OPTION_HIDDEN: u32 = 2;
pub const OPTION_ALIAS: u32 = 4;
pub const OPTION_DOC: u32 = 8;
pub const OPTION_NO_USAGE: u32 = 16;
pub const ARGP_ERR_UNKNOWN: u32 = 7;
pub const ARGP_KEY_ARG: u32 = 0;
pub const ARGP_KEY_ARGS: u32 = 16777222;
pub const ARGP_KEY_END: u32 = 16777217;
pub const ARGP_KEY_NO_ARGS: u32 = 16777218;
pub const ARGP_KEY_INIT: u32 = 16777219;
pub const ARGP_KEY_FINI: u32 = 16777223;
pub const ARGP_KEY_SUCCESS: u32 = 16777220;
pub const ARGP_KEY_ERROR: u32 = 16777221;
pub const ARGP_KEY_HELP_PRE_DOC: u32 = 33554433;
pub const ARGP_KEY_HELP_POST_DOC: u32 = 33554434;
pub const ARGP_KEY_HELP_HEADER: u32 = 33554435;
pub const ARGP_KEY_HELP_EXTRA: u32 = 33554436;
pub const ARGP_KEY_HELP_DUP_ARGS_NOTE: u32 = 33554437;
pub const ARGP_KEY_HELP_ARGS_DOC: u32 = 33554438;
pub const ARGP_PARSE_ARGV0: u32 = 1;
pub const ARGP_NO_ERRS: u32 = 2;
pub const ARGP_NO_ARGS: u32 = 4;
pub const ARGP_IN_ORDER: u32 = 8;
pub const ARGP_NO_HELP: u32 = 16;
pub const ARGP_NO_EXIT: u32 = 32;
pub const ARGP_LONG_ONLY: u32 = 64;
pub const ARGP_SILENT: u32 = 50;
pub const ARGP_HELP_USAGE: u32 = 1;
pub const ARGP_HELP_SHORT_USAGE: u32 = 2;
pub const ARGP_HELP_SEE: u32 = 4;
pub const ARGP_HELP_LONG: u32 = 8;
pub const ARGP_HELP_PRE_DOC: u32 = 16;
pub const ARGP_HELP_POST_DOC: u32 = 32;
pub const ARGP_HELP_DOC: u32 = 48;
pub const ARGP_HELP_BUG_ADDR: u32 = 64;
pub const ARGP_HELP_LONG_ONLY: u32 = 128;
pub const ARGP_HELP_EXIT_ERR: u32 = 256;
pub const ARGP_HELP_EXIT_OK: u32 = 512;
pub const ARGP_HELP_STD_ERR: u32 = 260;
pub const ARGP_HELP_STD_USAGE: u32 = 262;
pub const ARGP_HELP_STD_HELP: u32 = 634;
pub const _ARGZ_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _BYTESWAP_H: u32 = 1;
pub const _COMPLEX_H: u32 = 1;
pub const _CPIO_H: u32 = 1;
pub const MAGIC: &[u8; 7] = b"070707\0";
pub const C_IRUSR: u32 = 256;
pub const C_IWUSR: u32 = 128;
pub const C_IXUSR: u32 = 64;
pub const C_IRGRP: u32 = 32;
pub const C_IWGRP: u32 = 16;
pub const C_IXGRP: u32 = 8;
pub const C_IROTH: u32 = 4;
pub const C_IWOTH: u32 = 2;
pub const C_IXOTH: u32 = 1;
pub const C_ISUID: u32 = 2048;
pub const C_ISGID: u32 = 1024;
pub const C_ISVTX: u32 = 512;
pub const C_ISBLK: u32 = 24576;
pub const C_ISCHR: u32 = 8192;
pub const C_ISDIR: u32 = 16384;
pub const C_ISFIFO: u32 = 4096;
pub const C_ISSOCK: u32 = 49152;
pub const C_ISLNK: u32 = 40960;
pub const C_ISCTG: u32 = 36864;
pub const C_ISREG: u32 = 32768;
pub const _CRYPT_H: u32 = 1;
pub const CRYPT_OUTPUT_SIZE: u32 = 384;
pub const CRYPT_MAX_PASSPHRASE_SIZE: u32 = 512;
pub const CRYPT_GENSALT_OUTPUT_SIZE: u32 = 192;
pub const CRYPT_DATA_RESERVED_SIZE: u32 = 767;
pub const CRYPT_DATA_INTERNAL_SIZE: u32 = 30720;
pub const CRYPT_SALT_OK: u32 = 0;
pub const CRYPT_SALT_INVALID: u32 = 1;
pub const CRYPT_SALT_METHOD_DISABLED: u32 = 2;
pub const CRYPT_SALT_METHOD_LEGACY: u32 = 3;
pub const CRYPT_SALT_TOO_CHEAP: u32 = 4;
pub const CRYPT_GENSALT_IMPLEMENTS_DEFAULT_PREFIX: u32 = 1;
pub const CRYPT_GENSALT_IMPLEMENTS_AUTO_ENTROPY: u32 = 1;
pub const CRYPT_CHECKSALT_AVAILABLE: u32 = 1;
pub const CRYPT_PREFERRED_METHOD_AVAILABLE: u32 = 1;
pub const XCRYPT_VERSION_MAJOR: u32 = 4;
pub const XCRYPT_VERSION_MINOR: u32 = 4;
pub const XCRYPT_VERSION_NUM: u32 = 262148;
pub const XCRYPT_VERSION_STR: &[u8; 7] = b"4.4.36\0";
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const MAXNAMLEN: u32 = 255;
pub const _DLFCN_H: u32 = 1;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_BINDING_MASK: u32 = 3;
pub const RTLD_NOLOAD: u32 = 4;
pub const RTLD_DEEPBIND: u32 = 8;
pub const RTLD_GLOBAL: u32 = 256;
pub const RTLD_LOCAL: u32 = 0;
pub const RTLD_NODELETE: u32 = 4096;
pub const _ELF_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const EI_NIDENT: u32 = 16;
pub const EI_MAG0: u32 = 0;
pub const ELFMAG0: u32 = 127;
pub const EI_MAG1: u32 = 1;
pub const ELFMAG1: u8 = 69u8;
pub const EI_MAG2: u32 = 2;
pub const ELFMAG2: u8 = 76u8;
pub const EI_MAG3: u32 = 3;
pub const ELFMAG3: u8 = 70u8;
pub const ELFMAG: &[u8; 5] = b"\x7FELF\0";
pub const SELFMAG: u32 = 4;
pub const EI_CLASS: u32 = 4;
pub const ELFCLASSNONE: u32 = 0;
pub const ELFCLASS32: u32 = 1;
pub const ELFCLASS64: u32 = 2;
pub const ELFCLASSNUM: u32 = 3;
pub const EI_DATA: u32 = 5;
pub const ELFDATANONE: u32 = 0;
pub const ELFDATA2LSB: u32 = 1;
pub const ELFDATA2MSB: u32 = 2;
pub const ELFDATANUM: u32 = 3;
pub const EI_VERSION: u32 = 6;
pub const EI_OSABI: u32 = 7;
pub const ELFOSABI_NONE: u32 = 0;
pub const ELFOSABI_SYSV: u32 = 0;
pub const ELFOSABI_HPUX: u32 = 1;
pub const ELFOSABI_NETBSD: u32 = 2;
pub const ELFOSABI_GNU: u32 = 3;
pub const ELFOSABI_LINUX: u32 = 3;
pub const ELFOSABI_SOLARIS: u32 = 6;
pub const ELFOSABI_AIX: u32 = 7;
pub const ELFOSABI_IRIX: u32 = 8;
pub const ELFOSABI_FREEBSD: u32 = 9;
pub const ELFOSABI_TRU64: u32 = 10;
pub const ELFOSABI_MODESTO: u32 = 11;
pub const ELFOSABI_OPENBSD: u32 = 12;
pub const ELFOSABI_ARM_AEABI: u32 = 64;
pub const ELFOSABI_ARM: u32 = 97;
pub const ELFOSABI_STANDALONE: u32 = 255;
pub const EI_ABIVERSION: u32 = 8;
pub const EI_PAD: u32 = 9;
pub const ET_NONE: u32 = 0;
pub const ET_REL: u32 = 1;
pub const ET_EXEC: u32 = 2;
pub const ET_DYN: u32 = 3;
pub const ET_CORE: u32 = 4;
pub const ET_NUM: u32 = 5;
pub const ET_LOOS: u32 = 65024;
pub const ET_HIOS: u32 = 65279;
pub const ET_LOPROC: u32 = 65280;
pub const ET_HIPROC: u32 = 65535;
pub const EM_NONE: u32 = 0;
pub const EM_M32: u32 = 1;
pub const EM_SPARC: u32 = 2;
pub const EM_386: u32 = 3;
pub const EM_68K: u32 = 4;
pub const EM_88K: u32 = 5;
pub const EM_IAMCU: u32 = 6;
pub const EM_860: u32 = 7;
pub const EM_MIPS: u32 = 8;
pub const EM_S370: u32 = 9;
pub const EM_MIPS_RS3_LE: u32 = 10;
pub const EM_PARISC: u32 = 15;
pub const EM_VPP500: u32 = 17;
pub const EM_SPARC32PLUS: u32 = 18;
pub const EM_960: u32 = 19;
pub const EM_PPC: u32 = 20;
pub const EM_PPC64: u32 = 21;
pub const EM_S390: u32 = 22;
pub const EM_SPU: u32 = 23;
pub const EM_V800: u32 = 36;
pub const EM_FR20: u32 = 37;
pub const EM_RH32: u32 = 38;
pub const EM_RCE: u32 = 39;
pub const EM_ARM: u32 = 40;
pub const EM_FAKE_ALPHA: u32 = 41;
pub const EM_SH: u32 = 42;
pub const EM_SPARCV9: u32 = 43;
pub const EM_TRICORE: u32 = 44;
pub const EM_ARC: u32 = 45;
pub const EM_H8_300: u32 = 46;
pub const EM_H8_300H: u32 = 47;
pub const EM_H8S: u32 = 48;
pub const EM_H8_500: u32 = 49;
pub const EM_IA_64: u32 = 50;
pub const EM_MIPS_X: u32 = 51;
pub const EM_COLDFIRE: u32 = 52;
pub const EM_68HC12: u32 = 53;
pub const EM_MMA: u32 = 54;
pub const EM_PCP: u32 = 55;
pub const EM_NCPU: u32 = 56;
pub const EM_NDR1: u32 = 57;
pub const EM_STARCORE: u32 = 58;
pub const EM_ME16: u32 = 59;
pub const EM_ST100: u32 = 60;
pub const EM_TINYJ: u32 = 61;
pub const EM_X86_64: u32 = 62;
pub const EM_PDSP: u32 = 63;
pub const EM_PDP10: u32 = 64;
pub const EM_PDP11: u32 = 65;
pub const EM_FX66: u32 = 66;
pub const EM_ST9PLUS: u32 = 67;
pub const EM_ST7: u32 = 68;
pub const EM_68HC16: u32 = 69;
pub const EM_68HC11: u32 = 70;
pub const EM_68HC08: u32 = 71;
pub const EM_68HC05: u32 = 72;
pub const EM_SVX: u32 = 73;
pub const EM_ST19: u32 = 74;
pub const EM_VAX: u32 = 75;
pub const EM_CRIS: u32 = 76;
pub const EM_JAVELIN: u32 = 77;
pub const EM_FIREPATH: u32 = 78;
pub const EM_ZSP: u32 = 79;
pub const EM_MMIX: u32 = 80;
pub const EM_HUANY: u32 = 81;
pub const EM_PRISM: u32 = 82;
pub const EM_AVR: u32 = 83;
pub const EM_FR30: u32 = 84;
pub const EM_D10V: u32 = 85;
pub const EM_D30V: u32 = 86;
pub const EM_V850: u32 = 87;
pub const EM_M32R: u32 = 88;
pub const EM_MN10300: u32 = 89;
pub const EM_MN10200: u32 = 90;
pub const EM_PJ: u32 = 91;
pub const EM_OPENRISC: u32 = 92;
pub const EM_ARC_COMPACT: u32 = 93;
pub const EM_XTENSA: u32 = 94;
pub const EM_VIDEOCORE: u32 = 95;
pub const EM_TMM_GPP: u32 = 96;
pub const EM_NS32K: u32 = 97;
pub const EM_TPC: u32 = 98;
pub const EM_SNP1K: u32 = 99;
pub const EM_ST200: u32 = 100;
pub const EM_IP2K: u32 = 101;
pub const EM_MAX: u32 = 102;
pub const EM_CR: u32 = 103;
pub const EM_F2MC16: u32 = 104;
pub const EM_MSP430: u32 = 105;
pub const EM_BLACKFIN: u32 = 106;
pub const EM_SE_C33: u32 = 107;
pub const EM_SEP: u32 = 108;
pub const EM_ARCA: u32 = 109;
pub const EM_UNICORE: u32 = 110;
pub const EM_EXCESS: u32 = 111;
pub const EM_DXP: u32 = 112;
pub const EM_ALTERA_NIOS2: u32 = 113;
pub const EM_CRX: u32 = 114;
pub const EM_XGATE: u32 = 115;
pub const EM_C166: u32 = 116;
pub const EM_M16C: u32 = 117;
pub const EM_DSPIC30F: u32 = 118;
pub const EM_CE: u32 = 119;
pub const EM_M32C: u32 = 120;
pub const EM_TSK3000: u32 = 131;
pub const EM_RS08: u32 = 132;
pub const EM_SHARC: u32 = 133;
pub const EM_ECOG2: u32 = 134;
pub const EM_SCORE7: u32 = 135;
pub const EM_DSP24: u32 = 136;
pub const EM_VIDEOCORE3: u32 = 137;
pub const EM_LATTICEMICO32: u32 = 138;
pub const EM_SE_C17: u32 = 139;
pub const EM_TI_C6000: u32 = 140;
pub const EM_TI_C2000: u32 = 141;
pub const EM_TI_C5500: u32 = 142;
pub const EM_TI_ARP32: u32 = 143;
pub const EM_TI_PRU: u32 = 144;
pub const EM_MMDSP_PLUS: u32 = 160;
pub const EM_CYPRESS_M8C: u32 = 161;
pub const EM_R32C: u32 = 162;
pub const EM_TRIMEDIA: u32 = 163;
pub const EM_QDSP6: u32 = 164;
pub const EM_8051: u32 = 165;
pub const EM_STXP7X: u32 = 166;
pub const EM_NDS32: u32 = 167;
pub const EM_ECOG1X: u32 = 168;
pub const EM_MAXQ30: u32 = 169;
pub const EM_XIMO16: u32 = 170;
pub const EM_MANIK: u32 = 171;
pub const EM_CRAYNV2: u32 = 172;
pub const EM_RX: u32 = 173;
pub const EM_METAG: u32 = 174;
pub const EM_MCST_ELBRUS: u32 = 175;
pub const EM_ECOG16: u32 = 176;
pub const EM_CR16: u32 = 177;
pub const EM_ETPU: u32 = 178;
pub const EM_SLE9X: u32 = 179;
pub const EM_L10M: u32 = 180;
pub const EM_K10M: u32 = 181;
pub const EM_AARCH64: u32 = 183;
pub const EM_AVR32: u32 = 185;
pub const EM_STM8: u32 = 186;
pub const EM_TILE64: u32 = 187;
pub const EM_TILEPRO: u32 = 188;
pub const EM_MICROBLAZE: u32 = 189;
pub const EM_CUDA: u32 = 190;
pub const EM_TILEGX: u32 = 191;
pub const EM_CLOUDSHIELD: u32 = 192;
pub const EM_COREA_1ST: u32 = 193;
pub const EM_COREA_2ND: u32 = 194;
pub const EM_ARCV2: u32 = 195;
pub const EM_OPEN8: u32 = 196;
pub const EM_RL78: u32 = 197;
pub const EM_VIDEOCORE5: u32 = 198;
pub const EM_78KOR: u32 = 199;
pub const EM_56800EX: u32 = 200;
pub const EM_BA1: u32 = 201;
pub const EM_BA2: u32 = 202;
pub const EM_XCORE: u32 = 203;
pub const EM_MCHP_PIC: u32 = 204;
pub const EM_INTELGT: u32 = 205;
pub const EM_KM32: u32 = 210;
pub const EM_KMX32: u32 = 211;
pub const EM_EMX16: u32 = 212;
pub const EM_EMX8: u32 = 213;
pub const EM_KVARC: u32 = 214;
pub const EM_CDP: u32 = 215;
pub const EM_COGE: u32 = 216;
pub const EM_COOL: u32 = 217;
pub const EM_NORC: u32 = 218;
pub const EM_CSR_KALIMBA: u32 = 219;
pub const EM_Z80: u32 = 220;
pub const EM_VISIUM: u32 = 221;
pub const EM_FT32: u32 = 222;
pub const EM_MOXIE: u32 = 223;
pub const EM_AMDGPU: u32 = 224;
pub const EM_RISCV: u32 = 243;
pub const EM_BPF: u32 = 247;
pub const EM_CSKY: u32 = 252;
pub const EM_LOONGARCH: u32 = 258;
pub const EM_NUM: u32 = 259;
pub const EM_ARC_A5: u32 = 93;
pub const EM_ALPHA: u32 = 36902;
pub const EV_NONE: u32 = 0;
pub const EV_CURRENT: u32 = 1;
pub const EV_NUM: u32 = 2;
pub const SHN_UNDEF: u32 = 0;
pub const SHN_LORESERVE: u32 = 65280;
pub const SHN_LOPROC: u32 = 65280;
pub const SHN_BEFORE: u32 = 65280;
pub const SHN_AFTER: u32 = 65281;
pub const SHN_HIPROC: u32 = 65311;
pub const SHN_LOOS: u32 = 65312;
pub const SHN_HIOS: u32 = 65343;
pub const SHN_ABS: u32 = 65521;
pub const SHN_COMMON: u32 = 65522;
pub const SHN_XINDEX: u32 = 65535;
pub const SHN_HIRESERVE: u32 = 65535;
pub const SHT_NULL: u32 = 0;
pub const SHT_PROGBITS: u32 = 1;
pub const SHT_SYMTAB: u32 = 2;
pub const SHT_STRTAB: u32 = 3;
pub const SHT_RELA: u32 = 4;
pub const SHT_HASH: u32 = 5;
pub const SHT_DYNAMIC: u32 = 6;
pub const SHT_NOTE: u32 = 7;
pub const SHT_NOBITS: u32 = 8;
pub const SHT_REL: u32 = 9;
pub const SHT_SHLIB: u32 = 10;
pub const SHT_DYNSYM: u32 = 11;
pub const SHT_INIT_ARRAY: u32 = 14;
pub const SHT_FINI_ARRAY: u32 = 15;
pub const SHT_PREINIT_ARRAY: u32 = 16;
pub const SHT_GROUP: u32 = 17;
pub const SHT_SYMTAB_SHNDX: u32 = 18;
pub const SHT_RELR: u32 = 19;
pub const SHT_NUM: u32 = 20;
pub const SHT_LOOS: u32 = 1610612736;
pub const SHT_GNU_ATTRIBUTES: u32 = 1879048181;
pub const SHT_GNU_HASH: u32 = 1879048182;
pub const SHT_GNU_LIBLIST: u32 = 1879048183;
pub const SHT_CHECKSUM: u32 = 1879048184;
pub const SHT_LOSUNW: u32 = 1879048186;
pub const SHT_SUNW_move: u32 = 1879048186;
pub const SHT_SUNW_COMDAT: u32 = 1879048187;
pub const SHT_SUNW_syminfo: u32 = 1879048188;
pub const SHT_GNU_verdef: u32 = 1879048189;
pub const SHT_GNU_verneed: u32 = 1879048190;
pub const SHT_GNU_versym: u32 = 1879048191;
pub const SHT_HISUNW: u32 = 1879048191;
pub const SHT_HIOS: u32 = 1879048191;
pub const SHT_LOPROC: u32 = 1879048192;
pub const SHT_HIPROC: u32 = 2147483647;
pub const SHT_LOUSER: u32 = 2147483648;
pub const SHT_HIUSER: u32 = 2415919103;
pub const SHF_WRITE: u32 = 1;
pub const SHF_ALLOC: u32 = 2;
pub const SHF_EXECINSTR: u32 = 4;
pub const SHF_MERGE: u32 = 16;
pub const SHF_STRINGS: u32 = 32;
pub const SHF_INFO_LINK: u32 = 64;
pub const SHF_LINK_ORDER: u32 = 128;
pub const SHF_OS_NONCONFORMING: u32 = 256;
pub const SHF_GROUP: u32 = 512;
pub const SHF_TLS: u32 = 1024;
pub const SHF_COMPRESSED: u32 = 2048;
pub const SHF_MASKOS: u32 = 267386880;
pub const SHF_MASKPROC: u32 = 4026531840;
pub const SHF_GNU_RETAIN: u32 = 2097152;
pub const SHF_ORDERED: u32 = 1073741824;
pub const SHF_EXCLUDE: u32 = 2147483648;
pub const ELFCOMPRESS_ZLIB: u32 = 1;
pub const ELFCOMPRESS_ZSTD: u32 = 2;
pub const ELFCOMPRESS_LOOS: u32 = 1610612736;
pub const ELFCOMPRESS_HIOS: u32 = 1879048191;
pub const ELFCOMPRESS_LOPROC: u32 = 1879048192;
pub const ELFCOMPRESS_HIPROC: u32 = 2147483647;
pub const GRP_COMDAT: u32 = 1;
pub const SYMINFO_BT_SELF: u32 = 65535;
pub const SYMINFO_BT_PARENT: u32 = 65534;
pub const SYMINFO_BT_LOWRESERVE: u32 = 65280;
pub const SYMINFO_FLG_DIRECT: u32 = 1;
pub const SYMINFO_FLG_PASSTHRU: u32 = 2;
pub const SYMINFO_FLG_COPY: u32 = 4;
pub const SYMINFO_FLG_LAZYLOAD: u32 = 8;
pub const SYMINFO_NONE: u32 = 0;
pub const SYMINFO_CURRENT: u32 = 1;
pub const SYMINFO_NUM: u32 = 2;
pub const STB_LOCAL: u32 = 0;
pub const STB_GLOBAL: u32 = 1;
pub const STB_WEAK: u32 = 2;
pub const STB_NUM: u32 = 3;
pub const STB_LOOS: u32 = 10;
pub const STB_GNU_UNIQUE: u32 = 10;
pub const STB_HIOS: u32 = 12;
pub const STB_LOPROC: u32 = 13;
pub const STB_HIPROC: u32 = 15;
pub const STT_NOTYPE: u32 = 0;
pub const STT_OBJECT: u32 = 1;
pub const STT_FUNC: u32 = 2;
pub const STT_SECTION: u32 = 3;
pub const STT_FILE: u32 = 4;
pub const STT_COMMON: u32 = 5;
pub const STT_TLS: u32 = 6;
pub const STT_NUM: u32 = 7;
pub const STT_LOOS: u32 = 10;
pub const STT_GNU_IFUNC: u32 = 10;
pub const STT_HIOS: u32 = 12;
pub const STT_LOPROC: u32 = 13;
pub const STT_HIPROC: u32 = 15;
pub const STN_UNDEF: u32 = 0;
pub const STV_DEFAULT: u32 = 0;
pub const STV_INTERNAL: u32 = 1;
pub const STV_HIDDEN: u32 = 2;
pub const STV_PROTECTED: u32 = 3;
pub const PN_XNUM: u32 = 65535;
pub const PT_NULL: u32 = 0;
pub const PT_LOAD: u32 = 1;
pub const PT_DYNAMIC: u32 = 2;
pub const PT_INTERP: u32 = 3;
pub const PT_NOTE: u32 = 4;
pub const PT_SHLIB: u32 = 5;
pub const PT_PHDR: u32 = 6;
pub const PT_TLS: u32 = 7;
pub const PT_NUM: u32 = 8;
pub const PT_LOOS: u32 = 1610612736;
pub const PT_GNU_EH_FRAME: u32 = 1685382480;
pub const PT_GNU_STACK: u32 = 1685382481;
pub const PT_GNU_RELRO: u32 = 1685382482;
pub const PT_GNU_PROPERTY: u32 = 1685382483;
pub const PT_GNU_SFRAME: u32 = 1685382484;
pub const PT_LOSUNW: u32 = 1879048186;
pub const PT_SUNWBSS: u32 = 1879048186;
pub const PT_SUNWSTACK: u32 = 1879048187;
pub const PT_HISUNW: u32 = 1879048191;
pub const PT_HIOS: u32 = 1879048191;
pub const PT_LOPROC: u32 = 1879048192;
pub const PT_HIPROC: u32 = 2147483647;
pub const PF_X: u32 = 1;
pub const PF_W: u32 = 2;
pub const PF_R: u32 = 4;
pub const PF_MASKOS: u32 = 267386880;
pub const PF_MASKPROC: u32 = 4026531840;
pub const NT_PRSTATUS: u32 = 1;
pub const NT_PRFPREG: u32 = 2;
pub const NT_FPREGSET: u32 = 2;
pub const NT_PRPSINFO: u32 = 3;
pub const NT_PRXREG: u32 = 4;
pub const NT_TASKSTRUCT: u32 = 4;
pub const NT_PLATFORM: u32 = 5;
pub const NT_AUXV: u32 = 6;
pub const NT_GWINDOWS: u32 = 7;
pub const NT_ASRS: u32 = 8;
pub const NT_PSTATUS: u32 = 10;
pub const NT_PSINFO: u32 = 13;
pub const NT_PRCRED: u32 = 14;
pub const NT_UTSNAME: u32 = 15;
pub const NT_LWPSTATUS: u32 = 16;
pub const NT_LWPSINFO: u32 = 17;
pub const NT_PRFPXREG: u32 = 20;
pub const NT_SIGINFO: u32 = 1397311305;
pub const NT_FILE: u32 = 1179208773;
pub const NT_PRXFPREG: u32 = 1189489535;
pub const NT_PPC_VMX: u32 = 256;
pub const NT_PPC_SPE: u32 = 257;
pub const NT_PPC_VSX: u32 = 258;
pub const NT_PPC_TAR: u32 = 259;
pub const NT_PPC_PPR: u32 = 260;
pub const NT_PPC_DSCR: u32 = 261;
pub const NT_PPC_EBB: u32 = 262;
pub const NT_PPC_PMU: u32 = 263;
pub const NT_PPC_TM_CGPR: u32 = 264;
pub const NT_PPC_TM_CFPR: u32 = 265;
pub const NT_PPC_TM_CVMX: u32 = 266;
pub const NT_PPC_TM_CVSX: u32 = 267;
pub const NT_PPC_TM_SPR: u32 = 268;
pub const NT_PPC_TM_CTAR: u32 = 269;
pub const NT_PPC_TM_CPPR: u32 = 270;
pub const NT_PPC_TM_CDSCR: u32 = 271;
pub const NT_PPC_PKEY: u32 = 272;
pub const NT_386_TLS: u32 = 512;
pub const NT_386_IOPERM: u32 = 513;
pub const NT_X86_XSTATE: u32 = 514;
pub const NT_S390_HIGH_GPRS: u32 = 768;
pub const NT_S390_TIMER: u32 = 769;
pub const NT_S390_TODCMP: u32 = 770;
pub const NT_S390_TODPREG: u32 = 771;
pub const NT_S390_CTRS: u32 = 772;
pub const NT_S390_PREFIX: u32 = 773;
pub const NT_S390_LAST_BREAK: u32 = 774;
pub const NT_S390_SYSTEM_CALL: u32 = 775;
pub const NT_S390_TDB: u32 = 776;
pub const NT_S390_VXRS_LOW: u32 = 777;
pub const NT_S390_VXRS_HIGH: u32 = 778;
pub const NT_S390_GS_CB: u32 = 779;
pub const NT_S390_GS_BC: u32 = 780;
pub const NT_S390_RI_CB: u32 = 781;
pub const NT_S390_PV_CPU_DATA: u32 = 782;
pub const NT_ARM_VFP: u32 = 1024;
pub const NT_ARM_TLS: u32 = 1025;
pub const NT_ARM_HW_BREAK: u32 = 1026;
pub const NT_ARM_HW_WATCH: u32 = 1027;
pub const NT_ARM_SYSTEM_CALL: u32 = 1028;
pub const NT_ARM_SVE: u32 = 1029;
pub const NT_ARM_PAC_MASK: u32 = 1030;
pub const NT_ARM_PACA_KEYS: u32 = 1031;
pub const NT_ARM_PACG_KEYS: u32 = 1032;
pub const NT_ARM_TAGGED_ADDR_CTRL: u32 = 1033;
pub const NT_ARM_PAC_ENABLED_KEYS: u32 = 1034;
pub const NT_VMCOREDD: u32 = 1792;
pub const NT_MIPS_DSP: u32 = 2048;
pub const NT_MIPS_FP_MODE: u32 = 2049;
pub const NT_MIPS_MSA: u32 = 2050;
pub const NT_LOONGARCH_CPUCFG: u32 = 2560;
pub const NT_LOONGARCH_CSR: u32 = 2561;
pub const NT_LOONGARCH_LSX: u32 = 2562;
pub const NT_LOONGARCH_LASX: u32 = 2563;
pub const NT_LOONGARCH_LBT: u32 = 2564;
pub const NT_VERSION: u32 = 1;
pub const DT_NULL: u32 = 0;
pub const DT_NEEDED: u32 = 1;
pub const DT_PLTRELSZ: u32 = 2;
pub const DT_PLTGOT: u32 = 3;
pub const DT_HASH: u32 = 4;
pub const DT_STRTAB: u32 = 5;
pub const DT_SYMTAB: u32 = 6;
pub const DT_RELA: u32 = 7;
pub const DT_RELASZ: u32 = 8;
pub const DT_RELAENT: u32 = 9;
pub const DT_STRSZ: u32 = 10;
pub const DT_SYMENT: u32 = 11;
pub const DT_INIT: u32 = 12;
pub const DT_FINI: u32 = 13;
pub const DT_SONAME: u32 = 14;
pub const DT_RPATH: u32 = 15;
pub const DT_SYMBOLIC: u32 = 16;
pub const DT_REL: u32 = 17;
pub const DT_RELSZ: u32 = 18;
pub const DT_RELENT: u32 = 19;
pub const DT_PLTREL: u32 = 20;
pub const DT_DEBUG: u32 = 21;
pub const DT_TEXTREL: u32 = 22;
pub const DT_JMPREL: u32 = 23;
pub const DT_BIND_NOW: u32 = 24;
pub const DT_INIT_ARRAY: u32 = 25;
pub const DT_FINI_ARRAY: u32 = 26;
pub const DT_INIT_ARRAYSZ: u32 = 27;
pub const DT_FINI_ARRAYSZ: u32 = 28;
pub const DT_RUNPATH: u32 = 29;
pub const DT_FLAGS: u32 = 30;
pub const DT_ENCODING: u32 = 32;
pub const DT_PREINIT_ARRAY: u32 = 32;
pub const DT_PREINIT_ARRAYSZ: u32 = 33;
pub const DT_SYMTAB_SHNDX: u32 = 34;
pub const DT_RELRSZ: u32 = 35;
pub const DT_RELR: u32 = 36;
pub const DT_RELRENT: u32 = 37;
pub const DT_NUM: u32 = 38;
pub const DT_LOOS: u32 = 1610612749;
pub const DT_HIOS: u32 = 1879044096;
pub const DT_LOPROC: u32 = 1879048192;
pub const DT_HIPROC: u32 = 2147483647;
pub const DT_VALRNGLO: u32 = 1879047424;
pub const DT_GNU_PRELINKED: u32 = 1879047669;
pub const DT_GNU_CONFLICTSZ: u32 = 1879047670;
pub const DT_GNU_LIBLISTSZ: u32 = 1879047671;
pub const DT_CHECKSUM: u32 = 1879047672;
pub const DT_PLTPADSZ: u32 = 1879047673;
pub const DT_MOVEENT: u32 = 1879047674;
pub const DT_MOVESZ: u32 = 1879047675;
pub const DT_FEATURE_1: u32 = 1879047676;
pub const DT_POSFLAG_1: u32 = 1879047677;
pub const DT_SYMINSZ: u32 = 1879047678;
pub const DT_SYMINENT: u32 = 1879047679;
pub const DT_VALRNGHI: u32 = 1879047679;
pub const DT_VALNUM: u32 = 12;
pub const DT_ADDRRNGLO: u32 = 1879047680;
pub const DT_GNU_HASH: u32 = 1879047925;
pub const DT_TLSDESC_PLT: u32 = 1879047926;
pub const DT_TLSDESC_GOT: u32 = 1879047927;
pub const DT_GNU_CONFLICT: u32 = 1879047928;
pub const DT_GNU_LIBLIST: u32 = 1879047929;
pub const DT_CONFIG: u32 = 1879047930;
pub const DT_DEPAUDIT: u32 = 1879047931;
pub const DT_AUDIT: u32 = 1879047932;
pub const DT_PLTPAD: u32 = 1879047933;
pub const DT_MOVETAB: u32 = 1879047934;
pub const DT_SYMINFO: u32 = 1879047935;
pub const DT_ADDRRNGHI: u32 = 1879047935;
pub const DT_ADDRNUM: u32 = 11;
pub const DT_VERSYM: u32 = 1879048176;
pub const DT_RELACOUNT: u32 = 1879048185;
pub const DT_RELCOUNT: u32 = 1879048186;
pub const DT_FLAGS_1: u32 = 1879048187;
pub const DT_VERDEF: u32 = 1879048188;
pub const DT_VERDEFNUM: u32 = 1879048189;
pub const DT_VERNEED: u32 = 1879048190;
pub const DT_VERNEEDNUM: u32 = 1879048191;
pub const DT_VERSIONTAGNUM: u32 = 16;
pub const DT_AUXILIARY: u32 = 2147483645;
pub const DT_FILTER: u32 = 2147483647;
pub const DT_EXTRANUM: u32 = 3;
pub const DF_ORIGIN: u32 = 1;
pub const DF_SYMBOLIC: u32 = 2;
pub const DF_TEXTREL: u32 = 4;
pub const DF_BIND_NOW: u32 = 8;
pub const DF_STATIC_TLS: u32 = 16;
pub const DF_1_NOW: u32 = 1;
pub const DF_1_GLOBAL: u32 = 2;
pub const DF_1_GROUP: u32 = 4;
pub const DF_1_NODELETE: u32 = 8;
pub const DF_1_LOADFLTR: u32 = 16;
pub const DF_1_INITFIRST: u32 = 32;
pub const DF_1_NOOPEN: u32 = 64;
pub const DF_1_ORIGIN: u32 = 128;
pub const DF_1_DIRECT: u32 = 256;
pub const DF_1_TRANS: u32 = 512;
pub const DF_1_INTERPOSE: u32 = 1024;
pub const DF_1_NODEFLIB: u32 = 2048;
pub const DF_1_NODUMP: u32 = 4096;
pub const DF_1_CONFALT: u32 = 8192;
pub const DF_1_ENDFILTEE: u32 = 16384;
pub const DF_1_DISPRELDNE: u32 = 32768;
pub const DF_1_DISPRELPND: u32 = 65536;
pub const DF_1_NODIRECT: u32 = 131072;
pub const DF_1_IGNMULDEF: u32 = 262144;
pub const DF_1_NOKSYMS: u32 = 524288;
pub const DF_1_NOHDR: u32 = 1048576;
pub const DF_1_EDITED: u32 = 2097152;
pub const DF_1_NORELOC: u32 = 4194304;
pub const DF_1_SYMINTPOSE: u32 = 8388608;
pub const DF_1_GLOBAUDIT: u32 = 16777216;
pub const DF_1_SINGLETON: u32 = 33554432;
pub const DF_1_STUB: u32 = 67108864;
pub const DF_1_PIE: u32 = 134217728;
pub const DF_1_KMOD: u32 = 268435456;
pub const DF_1_WEAKFILTER: u32 = 536870912;
pub const DF_1_NOCOMMON: u32 = 1073741824;
pub const DTF_1_PARINIT: u32 = 1;
pub const DTF_1_CONFEXP: u32 = 2;
pub const DF_P1_LAZYLOAD: u32 = 1;
pub const DF_P1_GROUPPERM: u32 = 2;
pub const VER_DEF_NONE: u32 = 0;
pub const VER_DEF_CURRENT: u32 = 1;
pub const VER_DEF_NUM: u32 = 2;
pub const VER_FLG_BASE: u32 = 1;
pub const VER_FLG_WEAK: u32 = 2;
pub const VER_NDX_LOCAL: u32 = 0;
pub const VER_NDX_GLOBAL: u32 = 1;
pub const VER_NDX_LORESERVE: u32 = 65280;
pub const VER_NDX_ELIMINATE: u32 = 65281;
pub const VER_NEED_NONE: u32 = 0;
pub const VER_NEED_CURRENT: u32 = 1;
pub const VER_NEED_NUM: u32 = 2;
pub const AT_NULL: u32 = 0;
pub const AT_IGNORE: u32 = 1;
pub const AT_EXECFD: u32 = 2;
pub const AT_PHDR: u32 = 3;
pub const AT_PHENT: u32 = 4;
pub const AT_PHNUM: u32 = 5;
pub const AT_PAGESZ: u32 = 6;
pub const AT_BASE: u32 = 7;
pub const AT_FLAGS: u32 = 8;
pub const AT_ENTRY: u32 = 9;
pub const AT_NOTELF: u32 = 10;
pub const AT_UID: u32 = 11;
pub const AT_EUID: u32 = 12;
pub const AT_GID: u32 = 13;
pub const AT_EGID: u32 = 14;
pub const AT_CLKTCK: u32 = 17;
pub const AT_PLATFORM: u32 = 15;
pub const AT_HWCAP: u32 = 16;
pub const AT_FPUCW: u32 = 18;
pub const AT_DCACHEBSIZE: u32 = 19;
pub const AT_ICACHEBSIZE: u32 = 20;
pub const AT_UCACHEBSIZE: u32 = 21;
pub const AT_IGNOREPPC: u32 = 22;
pub const AT_SECURE: u32 = 23;
pub const AT_BASE_PLATFORM: u32 = 24;
pub const AT_RANDOM: u32 = 25;
pub const AT_HWCAP2: u32 = 26;
pub const AT_RSEQ_FEATURE_SIZE: u32 = 27;
pub const AT_RSEQ_ALIGN: u32 = 28;
pub const AT_EXECFN: u32 = 31;
pub const AT_SYSINFO: u32 = 32;
pub const AT_SYSINFO_EHDR: u32 = 33;
pub const AT_L1I_CACHESHAPE: u32 = 34;
pub const AT_L1D_CACHESHAPE: u32 = 35;
pub const AT_L2_CACHESHAPE: u32 = 36;
pub const AT_L3_CACHESHAPE: u32 = 37;
pub const AT_L1I_CACHESIZE: u32 = 40;
pub const AT_L1I_CACHEGEOMETRY: u32 = 41;
pub const AT_L1D_CACHESIZE: u32 = 42;
pub const AT_L1D_CACHEGEOMETRY: u32 = 43;
pub const AT_L2_CACHESIZE: u32 = 44;
pub const AT_L2_CACHEGEOMETRY: u32 = 45;
pub const AT_L3_CACHESIZE: u32 = 46;
pub const AT_L3_CACHEGEOMETRY: u32 = 47;
pub const AT_MINSIGSTKSZ: u32 = 51;
pub const ELF_NOTE_SOLARIS: &[u8; 13] = b"SUNW Solaris\0";
pub const ELF_NOTE_GNU: &[u8; 4] = b"GNU\0";
pub const ELF_NOTE_FDO: &[u8; 4] = b"FDO\0";
pub const ELF_NOTE_PAGESIZE_HINT: u32 = 1;
pub const NT_GNU_ABI_TAG: u32 = 1;
pub const ELF_NOTE_ABI: u32 = 1;
pub const ELF_NOTE_OS_LINUX: u32 = 0;
pub const ELF_NOTE_OS_GNU: u32 = 1;
pub const ELF_NOTE_OS_SOLARIS2: u32 = 2;
pub const ELF_NOTE_OS_FREEBSD: u32 = 3;
pub const NT_GNU_HWCAP: u32 = 2;
pub const NT_GNU_BUILD_ID: u32 = 3;
pub const NT_GNU_GOLD_VERSION: u32 = 4;
pub const NT_GNU_PROPERTY_TYPE_0: u32 = 5;
pub const NT_FDO_PACKAGING_METADATA: u32 = 3405650558;
pub const NOTE_GNU_PROPERTY_SECTION_NAME: &[u8; 19] = b".note.gnu.property\0";
pub const GNU_PROPERTY_STACK_SIZE: u32 = 1;
pub const GNU_PROPERTY_NO_COPY_ON_PROTECTED: u32 = 2;
pub const GNU_PROPERTY_UINT32_AND_LO: u32 = 2952790016;
pub const GNU_PROPERTY_UINT32_AND_HI: u32 = 2952822783;
pub const GNU_PROPERTY_UINT32_OR_LO: u32 = 2952822784;
pub const GNU_PROPERTY_UINT32_OR_HI: u32 = 2952855551;
pub const GNU_PROPERTY_1_NEEDED: u32 = 2952822784;
pub const GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS: u32 = 1;
pub const GNU_PROPERTY_LOPROC: u32 = 3221225472;
pub const GNU_PROPERTY_HIPROC: u32 = 3758096383;
pub const GNU_PROPERTY_LOUSER: u32 = 3758096384;
pub const GNU_PROPERTY_HIUSER: u32 = 4294967295;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_AND: u32 = 3221225472;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_BTI: u32 = 1;
pub const GNU_PROPERTY_AARCH64_FEATURE_1_PAC: u32 = 2;
pub const GNU_PROPERTY_X86_ISA_1_USED: u32 = 3221291010;
pub const GNU_PROPERTY_X86_ISA_1_NEEDED: u32 = 3221258242;
pub const GNU_PROPERTY_X86_FEATURE_1_AND: u32 = 3221225474;
pub const GNU_PROPERTY_X86_ISA_1_BASELINE: u32 = 1;
pub const GNU_PROPERTY_X86_ISA_1_V2: u32 = 2;
pub const GNU_PROPERTY_X86_ISA_1_V3: u32 = 4;
pub const GNU_PROPERTY_X86_ISA_1_V4: u32 = 8;
pub const GNU_PROPERTY_X86_FEATURE_1_IBT: u32 = 1;
pub const GNU_PROPERTY_X86_FEATURE_1_SHSTK: u32 = 2;
pub const EF_CPU32: u32 = 8454144;
pub const R_68K_NONE: u32 = 0;
pub const R_68K_32: u32 = 1;
pub const R_68K_16: u32 = 2;
pub const R_68K_8: u32 = 3;
pub const R_68K_PC32: u32 = 4;
pub const R_68K_PC16: u32 = 5;
pub const R_68K_PC8: u32 = 6;
pub const R_68K_GOT32: u32 = 7;
pub const R_68K_GOT16: u32 = 8;
pub const R_68K_GOT8: u32 = 9;
pub const R_68K_GOT32O: u32 = 10;
pub const R_68K_GOT16O: u32 = 11;
pub const R_68K_GOT8O: u32 = 12;
pub const R_68K_PLT32: u32 = 13;
pub const R_68K_PLT16: u32 = 14;
pub const R_68K_PLT8: u32 = 15;
pub const R_68K_PLT32O: u32 = 16;
pub const R_68K_PLT16O: u32 = 17;
pub const R_68K_PLT8O: u32 = 18;
pub const R_68K_COPY: u32 = 19;
pub const R_68K_GLOB_DAT: u32 = 20;
pub const R_68K_JMP_SLOT: u32 = 21;
pub const R_68K_RELATIVE: u32 = 22;
pub const R_68K_TLS_GD32: u32 = 25;
pub const R_68K_TLS_GD16: u32 = 26;
pub const R_68K_TLS_GD8: u32 = 27;
pub const R_68K_TLS_LDM32: u32 = 28;
pub const R_68K_TLS_LDM16: u32 = 29;
pub const R_68K_TLS_LDM8: u32 = 30;
pub const R_68K_TLS_LDO32: u32 = 31;
pub const R_68K_TLS_LDO16: u32 = 32;
pub const R_68K_TLS_LDO8: u32 = 33;
pub const R_68K_TLS_IE32: u32 = 34;
pub const R_68K_TLS_IE16: u32 = 35;
pub const R_68K_TLS_IE8: u32 = 36;
pub const R_68K_TLS_LE32: u32 = 37;
pub const R_68K_TLS_LE16: u32 = 38;
pub const R_68K_TLS_LE8: u32 = 39;
pub const R_68K_TLS_DTPMOD32: u32 = 40;
pub const R_68K_TLS_DTPREL32: u32 = 41;
pub const R_68K_TLS_TPREL32: u32 = 42;
pub const R_68K_NUM: u32 = 43;
pub const R_386_NONE: u32 = 0;
pub const R_386_32: u32 = 1;
pub const R_386_PC32: u32 = 2;
pub const R_386_GOT32: u32 = 3;
pub const R_386_PLT32: u32 = 4;
pub const R_386_COPY: u32 = 5;
pub const R_386_GLOB_DAT: u32 = 6;
pub const R_386_JMP_SLOT: u32 = 7;
pub const R_386_RELATIVE: u32 = 8;
pub const R_386_GOTOFF: u32 = 9;
pub const R_386_GOTPC: u32 = 10;
pub const R_386_32PLT: u32 = 11;
pub const R_386_TLS_TPOFF: u32 = 14;
pub const R_386_TLS_IE: u32 = 15;
pub const R_386_TLS_GOTIE: u32 = 16;
pub const R_386_TLS_LE: u32 = 17;
pub const R_386_TLS_GD: u32 = 18;
pub const R_386_TLS_LDM: u32 = 19;
pub const R_386_16: u32 = 20;
pub const R_386_PC16: u32 = 21;
pub const R_386_8: u32 = 22;
pub const R_386_PC8: u32 = 23;
pub const R_386_TLS_GD_32: u32 = 24;
pub const R_386_TLS_GD_PUSH: u32 = 25;
pub const R_386_TLS_GD_CALL: u32 = 26;
pub const R_386_TLS_GD_POP: u32 = 27;
pub const R_386_TLS_LDM_32: u32 = 28;
pub const R_386_TLS_LDM_PUSH: u32 = 29;
pub const R_386_TLS_LDM_CALL: u32 = 30;
pub const R_386_TLS_LDM_POP: u32 = 31;
pub const R_386_TLS_LDO_32: u32 = 32;
pub const R_386_TLS_IE_32: u32 = 33;
pub const R_386_TLS_LE_32: u32 = 34;
pub const R_386_TLS_DTPMOD32: u32 = 35;
pub const R_386_TLS_DTPOFF32: u32 = 36;
pub const R_386_TLS_TPOFF32: u32 = 37;
pub const R_386_SIZE32: u32 = 38;
pub const R_386_TLS_GOTDESC: u32 = 39;
pub const R_386_TLS_DESC_CALL: u32 = 40;
pub const R_386_TLS_DESC: u32 = 41;
pub const R_386_IRELATIVE: u32 = 42;
pub const R_386_GOT32X: u32 = 43;
pub const R_386_NUM: u32 = 44;
pub const STT_SPARC_REGISTER: u32 = 13;
pub const EF_SPARCV9_MM: u32 = 3;
pub const EF_SPARCV9_TSO: u32 = 0;
pub const EF_SPARCV9_PSO: u32 = 1;
pub const EF_SPARCV9_RMO: u32 = 2;
pub const EF_SPARC_LEDATA: u32 = 8388608;
pub const EF_SPARC_EXT_MASK: u32 = 16776960;
pub const EF_SPARC_32PLUS: u32 = 256;
pub const EF_SPARC_SUN_US1: u32 = 512;
pub const EF_SPARC_HAL_R1: u32 = 1024;
pub const EF_SPARC_SUN_US3: u32 = 2048;
pub const R_SPARC_NONE: u32 = 0;
pub const R_SPARC_8: u32 = 1;
pub const R_SPARC_16: u32 = 2;
pub const R_SPARC_32: u32 = 3;
pub const R_SPARC_DISP8: u32 = 4;
pub const R_SPARC_DISP16: u32 = 5;
pub const R_SPARC_DISP32: u32 = 6;
pub const R_SPARC_WDISP30: u32 = 7;
pub const R_SPARC_WDISP22: u32 = 8;
pub const R_SPARC_HI22: u32 = 9;
pub const R_SPARC_22: u32 = 10;
pub const R_SPARC_13: u32 = 11;
pub const R_SPARC_LO10: u32 = 12;
pub const R_SPARC_GOT10: u32 = 13;
pub const R_SPARC_GOT13: u32 = 14;
pub const R_SPARC_GOT22: u32 = 15;
pub const R_SPARC_PC10: u32 = 16;
pub const R_SPARC_PC22: u32 = 17;
pub const R_SPARC_WPLT30: u32 = 18;
pub const R_SPARC_COPY: u32 = 19;
pub const R_SPARC_GLOB_DAT: u32 = 20;
pub const R_SPARC_JMP_SLOT: u32 = 21;
pub const R_SPARC_RELATIVE: u32 = 22;
pub const R_SPARC_UA32: u32 = 23;
pub const R_SPARC_PLT32: u32 = 24;
pub const R_SPARC_HIPLT22: u32 = 25;
pub const R_SPARC_LOPLT10: u32 = 26;
pub const R_SPARC_PCPLT32: u32 = 27;
pub const R_SPARC_PCPLT22: u32 = 28;
pub const R_SPARC_PCPLT10: u32 = 29;
pub const R_SPARC_10: u32 = 30;
pub const R_SPARC_11: u32 = 31;
pub const R_SPARC_64: u32 = 32;
pub const R_SPARC_OLO10: u32 = 33;
pub const R_SPARC_HH22: u32 = 34;
pub const R_SPARC_HM10: u32 = 35;
pub const R_SPARC_LM22: u32 = 36;
pub const R_SPARC_PC_HH22: u32 = 37;
pub const R_SPARC_PC_HM10: u32 = 38;
pub const R_SPARC_PC_LM22: u32 = 39;
pub const R_SPARC_WDISP16: u32 = 40;
pub const R_SPARC_WDISP19: u32 = 41;
pub const R_SPARC_GLOB_JMP: u32 = 42;
pub const R_SPARC_7: u32 = 43;
pub const R_SPARC_5: u32 = 44;
pub const R_SPARC_6: u32 = 45;
pub const R_SPARC_DISP64: u32 = 46;
pub const R_SPARC_PLT64: u32 = 47;
pub const R_SPARC_HIX22: u32 = 48;
pub const R_SPARC_LOX10: u32 = 49;
pub const R_SPARC_H44: u32 = 50;
pub const R_SPARC_M44: u32 = 51;
pub const R_SPARC_L44: u32 = 52;
pub const R_SPARC_REGISTER: u32 = 53;
pub const R_SPARC_UA64: u32 = 54;
pub const R_SPARC_UA16: u32 = 55;
pub const R_SPARC_TLS_GD_HI22: u32 = 56;
pub const R_SPARC_TLS_GD_LO10: u32 = 57;
pub const R_SPARC_TLS_GD_ADD: u32 = 58;
pub const R_SPARC_TLS_GD_CALL: u32 = 59;
pub const R_SPARC_TLS_LDM_HI22: u32 = 60;
pub const R_SPARC_TLS_LDM_LO10: u32 = 61;
pub const R_SPARC_TLS_LDM_ADD: u32 = 62;
pub const R_SPARC_TLS_LDM_CALL: u32 = 63;
pub const R_SPARC_TLS_LDO_HIX22: u32 = 64;
pub const R_SPARC_TLS_LDO_LOX10: u32 = 65;
pub const R_SPARC_TLS_LDO_ADD: u32 = 66;
pub const R_SPARC_TLS_IE_HI22: u32 = 67;
pub const R_SPARC_TLS_IE_LO10: u32 = 68;
pub const R_SPARC_TLS_IE_LD: u32 = 69;
pub const R_SPARC_TLS_IE_LDX: u32 = 70;
pub const R_SPARC_TLS_IE_ADD: u32 = 71;
pub const R_SPARC_TLS_LE_HIX22: u32 = 72;
pub const R_SPARC_TLS_LE_LOX10: u32 = 73;
pub const R_SPARC_TLS_DTPMOD32: u32 = 74;
pub const R_SPARC_TLS_DTPMOD64: u32 = 75;
pub const R_SPARC_TLS_DTPOFF32: u32 = 76;
pub const R_SPARC_TLS_DTPOFF64: u32 = 77;
pub const R_SPARC_TLS_TPOFF32: u32 = 78;
pub const R_SPARC_TLS_TPOFF64: u32 = 79;
pub const R_SPARC_GOTDATA_HIX22: u32 = 80;
pub const R_SPARC_GOTDATA_LOX10: u32 = 81;
pub const R_SPARC_GOTDATA_OP_HIX22: u32 = 82;
pub const R_SPARC_GOTDATA_OP_LOX10: u32 = 83;
pub const R_SPARC_GOTDATA_OP: u32 = 84;
pub const R_SPARC_H34: u32 = 85;
pub const R_SPARC_SIZE32: u32 = 86;
pub const R_SPARC_SIZE64: u32 = 87;
pub const R_SPARC_WDISP10: u32 = 88;
pub const R_SPARC_JMP_IREL: u32 = 248;
pub const R_SPARC_IRELATIVE: u32 = 249;
pub const R_SPARC_GNU_VTINHERIT: u32 = 250;
pub const R_SPARC_GNU_VTENTRY: u32 = 251;
pub const R_SPARC_REV32: u32 = 252;
pub const R_SPARC_NUM: u32 = 253;
pub const DT_SPARC_REGISTER: u32 = 1879048193;
pub const DT_SPARC_NUM: u32 = 2;
pub const EF_MIPS_NOREORDER: u32 = 1;
pub const EF_MIPS_PIC: u32 = 2;
pub const EF_MIPS_CPIC: u32 = 4;
pub const EF_MIPS_XGOT: u32 = 8;
pub const EF_MIPS_64BIT_WHIRL: u32 = 16;
pub const EF_MIPS_ABI2: u32 = 32;
pub const EF_MIPS_ABI_ON32: u32 = 64;
pub const EF_MIPS_FP64: u32 = 512;
pub const EF_MIPS_NAN2008: u32 = 1024;
pub const EF_MIPS_ARCH: u32 = 4026531840;
pub const EF_MIPS_ARCH_1: u32 = 0;
pub const EF_MIPS_ARCH_2: u32 = 268435456;
pub const EF_MIPS_ARCH_3: u32 = 536870912;
pub const EF_MIPS_ARCH_4: u32 = 805306368;
pub const EF_MIPS_ARCH_5: u32 = 1073741824;
pub const EF_MIPS_ARCH_32: u32 = 1342177280;
pub const EF_MIPS_ARCH_64: u32 = 1610612736;
pub const EF_MIPS_ARCH_32R2: u32 = 1879048192;
pub const EF_MIPS_ARCH_64R2: u32 = 2147483648;
pub const E_MIPS_ARCH_1: u32 = 0;
pub const E_MIPS_ARCH_2: u32 = 268435456;
pub const E_MIPS_ARCH_3: u32 = 536870912;
pub const E_MIPS_ARCH_4: u32 = 805306368;
pub const E_MIPS_ARCH_5: u32 = 1073741824;
pub const E_MIPS_ARCH_32: u32 = 1342177280;
pub const E_MIPS_ARCH_64: u32 = 1610612736;
pub const SHN_MIPS_ACOMMON: u32 = 65280;
pub const SHN_MIPS_TEXT: u32 = 65281;
pub const SHN_MIPS_DATA: u32 = 65282;
pub const SHN_MIPS_SCOMMON: u32 = 65283;
pub const SHN_MIPS_SUNDEFINED: u32 = 65284;
pub const SHT_MIPS_LIBLIST: u32 = 1879048192;
pub const SHT_MIPS_MSYM: u32 = 1879048193;
pub const SHT_MIPS_CONFLICT: u32 = 1879048194;
pub const SHT_MIPS_GPTAB: u32 = 1879048195;
pub const SHT_MIPS_UCODE: u32 = 1879048196;
pub const SHT_MIPS_DEBUG: u32 = 1879048197;
pub const SHT_MIPS_REGINFO: u32 = 1879048198;
pub const SHT_MIPS_PACKAGE: u32 = 1879048199;
pub const SHT_MIPS_PACKSYM: u32 = 1879048200;
pub const SHT_MIPS_RELD: u32 = 1879048201;
pub const SHT_MIPS_IFACE: u32 = 1879048203;
pub const SHT_MIPS_CONTENT: u32 = 1879048204;
pub const SHT_MIPS_OPTIONS: u32 = 1879048205;
pub const SHT_MIPS_SHDR: u32 = 1879048208;
pub const SHT_MIPS_FDESC: u32 = 1879048209;
pub const SHT_MIPS_EXTSYM: u32 = 1879048210;
pub const SHT_MIPS_DENSE: u32 = 1879048211;
pub const SHT_MIPS_PDESC: u32 = 1879048212;
pub const SHT_MIPS_LOCSYM: u32 = 1879048213;
pub const SHT_MIPS_AUXSYM: u32 = 1879048214;
pub const SHT_MIPS_OPTSYM: u32 = 1879048215;
pub const SHT_MIPS_LOCSTR: u32 = 1879048216;
pub const SHT_MIPS_LINE: u32 = 1879048217;
pub const SHT_MIPS_RFDESC: u32 = 1879048218;
pub const SHT_MIPS_DELTASYM: u32 = 1879048219;
pub const SHT_MIPS_DELTAINST: u32 = 1879048220;
pub const SHT_MIPS_DELTACLASS: u32 = 1879048221;
pub const SHT_MIPS_DWARF: u32 = 1879048222;
pub const SHT_MIPS_DELTADECL: u32 = 1879048223;
pub const SHT_MIPS_SYMBOL_LIB: u32 = 1879048224;
pub const SHT_MIPS_EVENTS: u32 = 1879048225;
pub const SHT_MIPS_TRANSLATE: u32 = 1879048226;
pub const SHT_MIPS_PIXIE: u32 = 1879048227;
pub const SHT_MIPS_XLATE: u32 = 1879048228;
pub const SHT_MIPS_XLATE_DEBUG: u32 = 1879048229;
pub const SHT_MIPS_WHIRL: u32 = 1879048230;
pub const SHT_MIPS_EH_REGION: u32 = 1879048231;
pub const SHT_MIPS_XLATE_OLD: u32 = 1879048232;
pub const SHT_MIPS_PDR_EXCEPTION: u32 = 1879048233;
pub const SHT_MIPS_XHASH: u32 = 1879048235;
pub const SHF_MIPS_GPREL: u32 = 268435456;
pub const SHF_MIPS_MERGE: u32 = 536870912;
pub const SHF_MIPS_ADDR: u32 = 1073741824;
pub const SHF_MIPS_STRINGS: u32 = 2147483648;
pub const SHF_MIPS_NOSTRIP: u32 = 134217728;
pub const SHF_MIPS_LOCAL: u32 = 67108864;
pub const SHF_MIPS_NAMES: u32 = 33554432;
pub const SHF_MIPS_NODUPE: u32 = 16777216;
pub const STO_MIPS_DEFAULT: u32 = 0;
pub const STO_MIPS_INTERNAL: u32 = 1;
pub const STO_MIPS_HIDDEN: u32 = 2;
pub const STO_MIPS_PROTECTED: u32 = 3;
pub const STO_MIPS_PLT: u32 = 8;
pub const STO_MIPS_SC_ALIGN_UNUSED: u32 = 255;
pub const STB_MIPS_SPLIT_COMMON: u32 = 13;
pub const ODK_NULL: u32 = 0;
pub const ODK_REGINFO: u32 = 1;
pub const ODK_EXCEPTIONS: u32 = 2;
pub const ODK_PAD: u32 = 3;
pub const ODK_HWPATCH: u32 = 4;
pub const ODK_FILL: u32 = 5;
pub const ODK_TAGS: u32 = 6;
pub const ODK_HWAND: u32 = 7;
pub const ODK_HWOR: u32 = 8;
pub const OEX_FPU_MIN: u32 = 31;
pub const OEX_FPU_MAX: u32 = 7936;
pub const OEX_PAGE0: u32 = 65536;
pub const OEX_SMM: u32 = 131072;
pub const OEX_FPDBUG: u32 = 262144;
pub const OEX_PRECISEFP: u32 = 262144;
pub const OEX_DISMISS: u32 = 524288;
pub const OEX_FPU_INVAL: u32 = 16;
pub const OEX_FPU_DIV0: u32 = 8;
pub const OEX_FPU_OFLO: u32 = 4;
pub const OEX_FPU_UFLO: u32 = 2;
pub const OEX_FPU_INEX: u32 = 1;
pub const OHW_R4KEOP: u32 = 1;
pub const OHW_R8KPFETCH: u32 = 2;
pub const OHW_R5KEOP: u32 = 4;
pub const OHW_R5KCVTL: u32 = 8;
pub const OPAD_PREFIX: u32 = 1;
pub const OPAD_POSTFIX: u32 = 2;
pub const OPAD_SYMBOL: u32 = 4;
pub const OHWA0_R4KEOP_CHECKED: u32 = 1;
pub const OHWA1_R4KEOP_CLEAN: u32 = 2;
pub const R_MIPS_NONE: u32 = 0;
pub const R_MIPS_16: u32 = 1;
pub const R_MIPS_32: u32 = 2;
pub const R_MIPS_REL32: u32 = 3;
pub const R_MIPS_26: u32 = 4;
pub const R_MIPS_HI16: u32 = 5;
pub const R_MIPS_LO16: u32 = 6;
pub const R_MIPS_GPREL16: u32 = 7;
pub const R_MIPS_LITERAL: u32 = 8;
pub const R_MIPS_GOT16: u32 = 9;
pub const R_MIPS_PC16: u32 = 10;
pub const R_MIPS_CALL16: u32 = 11;
pub const R_MIPS_GPREL32: u32 = 12;
pub const R_MIPS_SHIFT5: u32 = 16;
pub const R_MIPS_SHIFT6: u32 = 17;
pub const R_MIPS_64: u32 = 18;
pub const R_MIPS_GOT_DISP: u32 = 19;
pub const R_MIPS_GOT_PAGE: u32 = 20;
pub const R_MIPS_GOT_OFST: u32 = 21;
pub const R_MIPS_GOT_HI16: u32 = 22;
pub const R_MIPS_GOT_LO16: u32 = 23;
pub const R_MIPS_SUB: u32 = 24;
pub const R_MIPS_INSERT_A: u32 = 25;
pub const R_MIPS_INSERT_B: u32 = 26;
pub const R_MIPS_DELETE: u32 = 27;
pub const R_MIPS_HIGHER: u32 = 28;
pub const R_MIPS_HIGHEST: u32 = 29;
pub const R_MIPS_CALL_HI16: u32 = 30;
pub const R_MIPS_CALL_LO16: u32 = 31;
pub const R_MIPS_SCN_DISP: u32 = 32;
pub const R_MIPS_REL16: u32 = 33;
pub const R_MIPS_ADD_IMMEDIATE: u32 = 34;
pub const R_MIPS_PJUMP: u32 = 35;
pub const R_MIPS_RELGOT: u32 = 36;
pub const R_MIPS_JALR: u32 = 37;
pub const R_MIPS_TLS_DTPMOD32: u32 = 38;
pub const R_MIPS_TLS_DTPREL32: u32 = 39;
pub const R_MIPS_TLS_DTPMOD64: u32 = 40;
pub const R_MIPS_TLS_DTPREL64: u32 = 41;
pub const R_MIPS_TLS_GD: u32 = 42;
pub const R_MIPS_TLS_LDM: u32 = 43;
pub const R_MIPS_TLS_DTPREL_HI16: u32 = 44;
pub const R_MIPS_TLS_DTPREL_LO16: u32 = 45;
pub const R_MIPS_TLS_GOTTPREL: u32 = 46;
pub const R_MIPS_TLS_TPREL32: u32 = 47;
pub const R_MIPS_TLS_TPREL64: u32 = 48;
pub const R_MIPS_TLS_TPREL_HI16: u32 = 49;
pub const R_MIPS_TLS_TPREL_LO16: u32 = 50;
pub const R_MIPS_GLOB_DAT: u32 = 51;
pub const R_MIPS_COPY: u32 = 126;
pub const R_MIPS_JUMP_SLOT: u32 = 127;
pub const R_MIPS_NUM: u32 = 128;
pub const PT_MIPS_REGINFO: u32 = 1879048192;
pub const PT_MIPS_RTPROC: u32 = 1879048193;
pub const PT_MIPS_OPTIONS: u32 = 1879048194;
pub const PT_MIPS_ABIFLAGS: u32 = 1879048195;
pub const PF_MIPS_LOCAL: u32 = 268435456;
pub const DT_MIPS_RLD_VERSION: u32 = 1879048193;
pub const DT_MIPS_TIME_STAMP: u32 = 1879048194;
pub const DT_MIPS_ICHECKSUM: u32 = 1879048195;
pub const DT_MIPS_IVERSION: u32 = 1879048196;
pub const DT_MIPS_FLAGS: u32 = 1879048197;
pub const DT_MIPS_BASE_ADDRESS: u32 = 1879048198;
pub const DT_MIPS_MSYM: u32 = 1879048199;
pub const DT_MIPS_CONFLICT: u32 = 1879048200;
pub const DT_MIPS_LIBLIST: u32 = 1879048201;
pub const DT_MIPS_LOCAL_GOTNO: u32 = 1879048202;
pub const DT_MIPS_CONFLICTNO: u32 = 1879048203;
pub const DT_MIPS_LIBLISTNO: u32 = 1879048208;
pub const DT_MIPS_SYMTABNO: u32 = 1879048209;
pub const DT_MIPS_UNREFEXTNO: u32 = 1879048210;
pub const DT_MIPS_GOTSYM: u32 = 1879048211;
pub const DT_MIPS_HIPAGENO: u32 = 1879048212;
pub const DT_MIPS_RLD_MAP: u32 = 1879048214;
pub const DT_MIPS_DELTA_CLASS: u32 = 1879048215;
pub const DT_MIPS_DELTA_CLASS_NO: u32 = 1879048216;
pub const DT_MIPS_DELTA_INSTANCE: u32 = 1879048217;
pub const DT_MIPS_DELTA_INSTANCE_NO: u32 = 1879048218;
pub const DT_MIPS_DELTA_RELOC: u32 = 1879048219;
pub const DT_MIPS_DELTA_RELOC_NO: u32 = 1879048220;
pub const DT_MIPS_DELTA_SYM: u32 = 1879048221;
pub const DT_MIPS_DELTA_SYM_NO: u32 = 1879048222;
pub const DT_MIPS_DELTA_CLASSSYM: u32 = 1879048224;
pub const DT_MIPS_DELTA_CLASSSYM_NO: u32 = 1879048225;
pub const DT_MIPS_CXX_FLAGS: u32 = 1879048226;
pub const DT_MIPS_PIXIE_INIT: u32 = 1879048227;
pub const DT_MIPS_SYMBOL_LIB: u32 = 1879048228;
pub const DT_MIPS_LOCALPAGE_GOTIDX: u32 = 1879048229;
pub const DT_MIPS_LOCAL_GOTIDX: u32 = 1879048230;
pub const DT_MIPS_HIDDEN_GOTIDX: u32 = 1879048231;
pub const DT_MIPS_PROTECTED_GOTIDX: u32 = 1879048232;
pub const DT_MIPS_OPTIONS: u32 = 1879048233;
pub const DT_MIPS_INTERFACE: u32 = 1879048234;
pub const DT_MIPS_DYNSTR_ALIGN: u32 = 1879048235;
pub const DT_MIPS_INTERFACE_SIZE: u32 = 1879048236;
pub const DT_MIPS_RLD_TEXT_RESOLVE_ADDR: u32 = 1879048237;
pub const DT_MIPS_PERF_SUFFIX: u32 = 1879048238;
pub const DT_MIPS_COMPACT_SIZE: u32 = 1879048239;
pub const DT_MIPS_GP_VALUE: u32 = 1879048240;
pub const DT_MIPS_AUX_DYNAMIC: u32 = 1879048241;
pub const DT_MIPS_PLTGOT: u32 = 1879048242;
pub const DT_MIPS_RWPLT: u32 = 1879048244;
pub const DT_MIPS_RLD_MAP_REL: u32 = 1879048245;
pub const DT_MIPS_XHASH: u32 = 1879048246;
pub const DT_MIPS_NUM: u32 = 55;
pub const RHF_NONE: u32 = 0;
pub const RHF_QUICKSTART: u32 = 1;
pub const RHF_NOTPOT: u32 = 2;
pub const RHF_NO_LIBRARY_REPLACEMENT: u32 = 4;
pub const RHF_NO_MOVE: u32 = 8;
pub const RHF_SGI_ONLY: u32 = 16;
pub const RHF_GUARANTEE_INIT: u32 = 32;
pub const RHF_DELTA_C_PLUS_PLUS: u32 = 64;
pub const RHF_GUARANTEE_START_INIT: u32 = 128;
pub const RHF_PIXIE: u32 = 256;
pub const RHF_DEFAULT_DELAY_LOAD: u32 = 512;
pub const RHF_REQUICKSTART: u32 = 1024;
pub const RHF_REQUICKSTARTED: u32 = 2048;
pub const RHF_CORD: u32 = 4096;
pub const RHF_NO_UNRES_UNDEF: u32 = 8192;
pub const RHF_RLD_ORDER_SAFE: u32 = 16384;
pub const LL_NONE: u32 = 0;
pub const LL_EXACT_MATCH: u32 = 1;
pub const LL_IGNORE_INT_VER: u32 = 2;
pub const LL_REQUIRE_MINOR: u32 = 4;
pub const LL_EXPORTS: u32 = 8;
pub const LL_DELAY_LOAD: u32 = 16;
pub const LL_DELTA: u32 = 32;
pub const MIPS_AFL_REG_NONE: u32 = 0;
pub const MIPS_AFL_REG_32: u32 = 1;
pub const MIPS_AFL_REG_64: u32 = 2;
pub const MIPS_AFL_REG_128: u32 = 3;
pub const MIPS_AFL_ASE_DSP: u32 = 1;
pub const MIPS_AFL_ASE_DSPR2: u32 = 2;
pub const MIPS_AFL_ASE_EVA: u32 = 4;
pub const MIPS_AFL_ASE_MCU: u32 = 8;
pub const MIPS_AFL_ASE_MDMX: u32 = 16;
pub const MIPS_AFL_ASE_MIPS3D: u32 = 32;
pub const MIPS_AFL_ASE_MT: u32 = 64;
pub const MIPS_AFL_ASE_SMARTMIPS: u32 = 128;
pub const MIPS_AFL_ASE_VIRT: u32 = 256;
pub const MIPS_AFL_ASE_MSA: u32 = 512;
pub const MIPS_AFL_ASE_MIPS16: u32 = 1024;
pub const MIPS_AFL_ASE_MICROMIPS: u32 = 2048;
pub const MIPS_AFL_ASE_XPA: u32 = 4096;
pub const MIPS_AFL_ASE_MASK: u32 = 8191;
pub const MIPS_AFL_EXT_XLR: u32 = 1;
pub const MIPS_AFL_EXT_OCTEON2: u32 = 2;
pub const MIPS_AFL_EXT_OCTEONP: u32 = 3;
pub const MIPS_AFL_EXT_LOONGSON_3A: u32 = 4;
pub const MIPS_AFL_EXT_OCTEON: u32 = 5;
pub const MIPS_AFL_EXT_5900: u32 = 6;
pub const MIPS_AFL_EXT_4650: u32 = 7;
pub const MIPS_AFL_EXT_4010: u32 = 8;
pub const MIPS_AFL_EXT_4100: u32 = 9;
pub const MIPS_AFL_EXT_3900: u32 = 10;
pub const MIPS_AFL_EXT_10000: u32 = 11;
pub const MIPS_AFL_EXT_SB1: u32 = 12;
pub const MIPS_AFL_EXT_4111: u32 = 13;
pub const MIPS_AFL_EXT_4120: u32 = 14;
pub const MIPS_AFL_EXT_5400: u32 = 15;
pub const MIPS_AFL_EXT_5500: u32 = 16;
pub const MIPS_AFL_EXT_LOONGSON_2E: u32 = 17;
pub const MIPS_AFL_EXT_LOONGSON_2F: u32 = 18;
pub const MIPS_AFL_FLAGS1_ODDSPREG: u32 = 1;
pub const EF_PARISC_TRAPNIL: u32 = 65536;
pub const EF_PARISC_EXT: u32 = 131072;
pub const EF_PARISC_LSB: u32 = 262144;
pub const EF_PARISC_WIDE: u32 = 524288;
pub const EF_PARISC_NO_KABP: u32 = 1048576;
pub const EF_PARISC_LAZYSWAP: u32 = 4194304;
pub const EF_PARISC_ARCH: u32 = 65535;
pub const EFA_PARISC_1_0: u32 = 523;
pub const EFA_PARISC_1_1: u32 = 528;
pub const EFA_PARISC_2_0: u32 = 532;
pub const SHN_PARISC_ANSI_COMMON: u32 = 65280;
pub const SHN_PARISC_HUGE_COMMON: u32 = 65281;
pub const SHT_PARISC_EXT: u32 = 1879048192;
pub const SHT_PARISC_UNWIND: u32 = 1879048193;
pub const SHT_PARISC_DOC: u32 = 1879048194;
pub const SHF_PARISC_SHORT: u32 = 536870912;
pub const SHF_PARISC_HUGE: u32 = 1073741824;
pub const SHF_PARISC_SBP: u32 = 2147483648;
pub const STT_PARISC_MILLICODE: u32 = 13;
pub const STT_HP_OPAQUE: u32 = 11;
pub const STT_HP_STUB: u32 = 12;
pub const R_PARISC_NONE: u32 = 0;
pub const R_PARISC_DIR32: u32 = 1;
pub const R_PARISC_DIR21L: u32 = 2;
pub const R_PARISC_DIR17R: u32 = 3;
pub const R_PARISC_DIR17F: u32 = 4;
pub const R_PARISC_DIR14R: u32 = 6;
pub const R_PARISC_PCREL32: u32 = 9;
pub const R_PARISC_PCREL21L: u32 = 10;
pub const R_PARISC_PCREL17R: u32 = 11;
pub const R_PARISC_PCREL17F: u32 = 12;
pub const R_PARISC_PCREL14R: u32 = 14;
pub const R_PARISC_DPREL21L: u32 = 18;
pub const R_PARISC_DPREL14R: u32 = 22;
pub const R_PARISC_GPREL21L: u32 = 26;
pub const R_PARISC_GPREL14R: u32 = 30;
pub const R_PARISC_LTOFF21L: u32 = 34;
pub const R_PARISC_LTOFF14R: u32 = 38;
pub const R_PARISC_SECREL32: u32 = 41;
pub const R_PARISC_SEGBASE: u32 = 48;
pub const R_PARISC_SEGREL32: u32 = 49;
pub const R_PARISC_PLTOFF21L: u32 = 50;
pub const R_PARISC_PLTOFF14R: u32 = 54;
pub const R_PARISC_LTOFF_FPTR32: u32 = 57;
pub const R_PARISC_LTOFF_FPTR21L: u32 = 58;
pub const R_PARISC_LTOFF_FPTR14R: u32 = 62;
pub const R_PARISC_FPTR64: u32 = 64;
pub const R_PARISC_PLABEL32: u32 = 65;
pub const R_PARISC_PLABEL21L: u32 = 66;
pub const R_PARISC_PLABEL14R: u32 = 70;
pub const R_PARISC_PCREL64: u32 = 72;
pub const R_PARISC_PCREL22F: u32 = 74;
pub const R_PARISC_PCREL14WR: u32 = 75;
pub const R_PARISC_PCREL14DR: u32 = 76;
pub const R_PARISC_PCREL16F: u32 = 77;
pub const R_PARISC_PCREL16WF: u32 = 78;
pub const R_PARISC_PCREL16DF: u32 = 79;
pub const R_PARISC_DIR64: u32 = 80;
pub const R_PARISC_DIR14WR: u32 = 83;
pub const R_PARISC_DIR14DR: u32 = 84;
pub const R_PARISC_DIR16F: u32 = 85;
pub const R_PARISC_DIR16WF: u32 = 86;
pub const R_PARISC_DIR16DF: u32 = 87;
pub const R_PARISC_GPREL64: u32 = 88;
pub const R_PARISC_GPREL14WR: u32 = 91;
pub const R_PARISC_GPREL14DR: u32 = 92;
pub const R_PARISC_GPREL16F: u32 = 93;
pub const R_PARISC_GPREL16WF: u32 = 94;
pub const R_PARISC_GPREL16DF: u32 = 95;
pub const R_PARISC_LTOFF64: u32 = 96;
pub const R_PARISC_LTOFF14WR: u32 = 99;
pub const R_PARISC_LTOFF14DR: u32 = 100;
pub const R_PARISC_LTOFF16F: u32 = 101;
pub const R_PARISC_LTOFF16WF: u32 = 102;
pub const R_PARISC_LTOFF16DF: u32 = 103;
pub const R_PARISC_SECREL64: u32 = 104;
pub const R_PARISC_SEGREL64: u32 = 112;
pub const R_PARISC_PLTOFF14WR: u32 = 115;
pub const R_PARISC_PLTOFF14DR: u32 = 116;
pub const R_PARISC_PLTOFF16F: u32 = 117;
pub const R_PARISC_PLTOFF16WF: u32 = 118;
pub const R_PARISC_PLTOFF16DF: u32 = 119;
pub const R_PARISC_LTOFF_FPTR64: u32 = 120;
pub const R_PARISC_LTOFF_FPTR14WR: u32 = 123;
pub const R_PARISC_LTOFF_FPTR14DR: u32 = 124;
pub const R_PARISC_LTOFF_FPTR16F: u32 = 125;
pub const R_PARISC_LTOFF_FPTR16WF: u32 = 126;
pub const R_PARISC_LTOFF_FPTR16DF: u32 = 127;
pub const R_PARISC_LORESERVE: u32 = 128;
pub const R_PARISC_COPY: u32 = 128;
pub const R_PARISC_IPLT: u32 = 129;
pub const R_PARISC_EPLT: u32 = 130;
pub const R_PARISC_TPREL32: u32 = 153;
pub const R_PARISC_TPREL21L: u32 = 154;
pub const R_PARISC_TPREL14R: u32 = 158;
pub const R_PARISC_LTOFF_TP21L: u32 = 162;
pub const R_PARISC_LTOFF_TP14R: u32 = 166;
pub const R_PARISC_LTOFF_TP14F: u32 = 167;
pub const R_PARISC_TPREL64: u32 = 216;
pub const R_PARISC_TPREL14WR: u32 = 219;
pub const R_PARISC_TPREL14DR: u32 = 220;
pub const R_PARISC_TPREL16F: u32 = 221;
pub const R_PARISC_TPREL16WF: u32 = 222;
pub const R_PARISC_TPREL16DF: u32 = 223;
pub const R_PARISC_LTOFF_TP64: u32 = 224;
pub const R_PARISC_LTOFF_TP14WR: u32 = 227;
pub const R_PARISC_LTOFF_TP14DR: u32 = 228;
pub const R_PARISC_LTOFF_TP16F: u32 = 229;
pub const R_PARISC_LTOFF_TP16WF: u32 = 230;
pub const R_PARISC_LTOFF_TP16DF: u32 = 231;
pub const R_PARISC_GNU_VTENTRY: u32 = 232;
pub const R_PARISC_GNU_VTINHERIT: u32 = 233;
pub const R_PARISC_TLS_GD21L: u32 = 234;
pub const R_PARISC_TLS_GD14R: u32 = 235;
pub const R_PARISC_TLS_GDCALL: u32 = 236;
pub const R_PARISC_TLS_LDM21L: u32 = 237;
pub const R_PARISC_TLS_LDM14R: u32 = 238;
pub const R_PARISC_TLS_LDMCALL: u32 = 239;
pub const R_PARISC_TLS_LDO21L: u32 = 240;
pub const R_PARISC_TLS_LDO14R: u32 = 241;
pub const R_PARISC_TLS_DTPMOD32: u32 = 242;
pub const R_PARISC_TLS_DTPMOD64: u32 = 243;
pub const R_PARISC_TLS_DTPOFF32: u32 = 244;
pub const R_PARISC_TLS_DTPOFF64: u32 = 245;
pub const R_PARISC_TLS_LE21L: u32 = 154;
pub const R_PARISC_TLS_LE14R: u32 = 158;
pub const R_PARISC_TLS_IE21L: u32 = 162;
pub const R_PARISC_TLS_IE14R: u32 = 166;
pub const R_PARISC_TLS_TPREL32: u32 = 153;
pub const R_PARISC_TLS_TPREL64: u32 = 216;
pub const R_PARISC_HIRESERVE: u32 = 255;
pub const PT_HP_TLS: u32 = 1610612736;
pub const PT_HP_CORE_NONE: u32 = 1610612737;
pub const PT_HP_CORE_VERSION: u32 = 1610612738;
pub const PT_HP_CORE_KERNEL: u32 = 1610612739;
pub const PT_HP_CORE_COMM: u32 = 1610612740;
pub const PT_HP_CORE_PROC: u32 = 1610612741;
pub const PT_HP_CORE_LOADABLE: u32 = 1610612742;
pub const PT_HP_CORE_STACK: u32 = 1610612743;
pub const PT_HP_CORE_SHM: u32 = 1610612744;
pub const PT_HP_CORE_MMF: u32 = 1610612745;
pub const PT_HP_PARALLEL: u32 = 1610612752;
pub const PT_HP_FASTBIND: u32 = 1610612753;
pub const PT_HP_OPT_ANNOT: u32 = 1610612754;
pub const PT_HP_HSL_ANNOT: u32 = 1610612755;
pub const PT_HP_STACK: u32 = 1610612756;
pub const PT_PARISC_ARCHEXT: u32 = 1879048192;
pub const PT_PARISC_UNWIND: u32 = 1879048193;
pub const PF_PARISC_SBP: u32 = 134217728;
pub const PF_HP_PAGE_SIZE: u32 = 1048576;
pub const PF_HP_FAR_SHARED: u32 = 2097152;
pub const PF_HP_NEAR_SHARED: u32 = 4194304;
pub const PF_HP_CODE: u32 = 16777216;
pub const PF_HP_MODIFY: u32 = 33554432;
pub const PF_HP_LAZYSWAP: u32 = 67108864;
pub const PF_HP_SBP: u32 = 134217728;
pub const EF_ALPHA_32BIT: u32 = 1;
pub const EF_ALPHA_CANRELAX: u32 = 2;
pub const SHT_ALPHA_DEBUG: u32 = 1879048193;
pub const SHT_ALPHA_REGINFO: u32 = 1879048194;
pub const SHF_ALPHA_GPREL: u32 = 268435456;
pub const STO_ALPHA_NOPV: u32 = 128;
pub const STO_ALPHA_STD_GPLOAD: u32 = 136;
pub const R_ALPHA_NONE: u32 = 0;
pub const R_ALPHA_REFLONG: u32 = 1;
pub const R_ALPHA_REFQUAD: u32 = 2;
pub const R_ALPHA_GPREL32: u32 = 3;
pub const R_ALPHA_LITERAL: u32 = 4;
pub const R_ALPHA_LITUSE: u32 = 5;
pub const R_ALPHA_GPDISP: u32 = 6;
pub const R_ALPHA_BRADDR: u32 = 7;
pub const R_ALPHA_HINT: u32 = 8;
pub const R_ALPHA_SREL16: u32 = 9;
pub const R_ALPHA_SREL32: u32 = 10;
pub const R_ALPHA_SREL64: u32 = 11;
pub const R_ALPHA_GPRELHIGH: u32 = 17;
pub const R_ALPHA_GPRELLOW: u32 = 18;
pub const R_ALPHA_GPREL16: u32 = 19;
pub const R_ALPHA_COPY: u32 = 24;
pub const R_ALPHA_GLOB_DAT: u32 = 25;
pub const R_ALPHA_JMP_SLOT: u32 = 26;
pub const R_ALPHA_RELATIVE: u32 = 27;
pub const R_ALPHA_TLS_GD_HI: u32 = 28;
pub const R_ALPHA_TLSGD: u32 = 29;
pub const R_ALPHA_TLS_LDM: u32 = 30;
pub const R_ALPHA_DTPMOD64: u32 = 31;
pub const R_ALPHA_GOTDTPREL: u32 = 32;
pub const R_ALPHA_DTPREL64: u32 = 33;
pub const R_ALPHA_DTPRELHI: u32 = 34;
pub const R_ALPHA_DTPRELLO: u32 = 35;
pub const R_ALPHA_DTPREL16: u32 = 36;
pub const R_ALPHA_GOTTPREL: u32 = 37;
pub const R_ALPHA_TPREL64: u32 = 38;
pub const R_ALPHA_TPRELHI: u32 = 39;
pub const R_ALPHA_TPRELLO: u32 = 40;
pub const R_ALPHA_TPREL16: u32 = 41;
pub const R_ALPHA_NUM: u32 = 46;
pub const LITUSE_ALPHA_ADDR: u32 = 0;
pub const LITUSE_ALPHA_BASE: u32 = 1;
pub const LITUSE_ALPHA_BYTOFF: u32 = 2;
pub const LITUSE_ALPHA_JSR: u32 = 3;
pub const LITUSE_ALPHA_TLS_GD: u32 = 4;
pub const LITUSE_ALPHA_TLS_LDM: u32 = 5;
pub const DT_ALPHA_PLTRO: u32 = 1879048192;
pub const DT_ALPHA_NUM: u32 = 1;
pub const EF_PPC_EMB: u32 = 2147483648;
pub const EF_PPC_RELOCATABLE: u32 = 65536;
pub const EF_PPC_RELOCATABLE_LIB: u32 = 32768;
pub const R_PPC_NONE: u32 = 0;
pub const R_PPC_ADDR32: u32 = 1;
pub const R_PPC_ADDR24: u32 = 2;
pub const R_PPC_ADDR16: u32 = 3;
pub const R_PPC_ADDR16_LO: u32 = 4;
pub const R_PPC_ADDR16_HI: u32 = 5;
pub const R_PPC_ADDR16_HA: u32 = 6;
pub const R_PPC_ADDR14: u32 = 7;
pub const R_PPC_ADDR14_BRTAKEN: u32 = 8;
pub const R_PPC_ADDR14_BRNTAKEN: u32 = 9;
pub const R_PPC_REL24: u32 = 10;
pub const R_PPC_REL14: u32 = 11;
pub const R_PPC_REL14_BRTAKEN: u32 = 12;
pub const R_PPC_REL14_BRNTAKEN: u32 = 13;
pub const R_PPC_GOT16: u32 = 14;
pub const R_PPC_GOT16_LO: u32 = 15;
pub const R_PPC_GOT16_HI: u32 = 16;
pub const R_PPC_GOT16_HA: u32 = 17;
pub const R_PPC_PLTREL24: u32 = 18;
pub const R_PPC_COPY: u32 = 19;
pub const R_PPC_GLOB_DAT: u32 = 20;
pub const R_PPC_JMP_SLOT: u32 = 21;
pub const R_PPC_RELATIVE: u32 = 22;
pub const R_PPC_LOCAL24PC: u32 = 23;
pub const R_PPC_UADDR32: u32 = 24;
pub const R_PPC_UADDR16: u32 = 25;
pub const R_PPC_REL32: u32 = 26;
pub const R_PPC_PLT32: u32 = 27;
pub const R_PPC_PLTREL32: u32 = 28;
pub const R_PPC_PLT16_LO: u32 = 29;
pub const R_PPC_PLT16_HI: u32 = 30;
pub const R_PPC_PLT16_HA: u32 = 31;
pub const R_PPC_SDAREL16: u32 = 32;
pub const R_PPC_SECTOFF: u32 = 33;
pub const R_PPC_SECTOFF_LO: u32 = 34;
pub const R_PPC_SECTOFF_HI: u32 = 35;
pub const R_PPC_SECTOFF_HA: u32 = 36;
pub const R_PPC_TLS: u32 = 67;
pub const R_PPC_DTPMOD32: u32 = 68;
pub const R_PPC_TPREL16: u32 = 69;
pub const R_PPC_TPREL16_LO: u32 = 70;
pub const R_PPC_TPREL16_HI: u32 = 71;
pub const R_PPC_TPREL16_HA: u32 = 72;
pub const R_PPC_TPREL32: u32 = 73;
pub const R_PPC_DTPREL16: u32 = 74;
pub const R_PPC_DTPREL16_LO: u32 = 75;
pub const R_PPC_DTPREL16_HI: u32 = 76;
pub const R_PPC_DTPREL16_HA: u32 = 77;
pub const R_PPC_DTPREL32: u32 = 78;
pub const R_PPC_GOT_TLSGD16: u32 = 79;
pub const R_PPC_GOT_TLSGD16_LO: u32 = 80;
pub const R_PPC_GOT_TLSGD16_HI: u32 = 81;
pub const R_PPC_GOT_TLSGD16_HA: u32 = 82;
pub const R_PPC_GOT_TLSLD16: u32 = 83;
pub const R_PPC_GOT_TLSLD16_LO: u32 = 84;
pub const R_PPC_GOT_TLSLD16_HI: u32 = 85;
pub const R_PPC_GOT_TLSLD16_HA: u32 = 86;
pub const R_PPC_GOT_TPREL16: u32 = 87;
pub const R_PPC_GOT_TPREL16_LO: u32 = 88;
pub const R_PPC_GOT_TPREL16_HI: u32 = 89;
pub const R_PPC_GOT_TPREL16_HA: u32 = 90;
pub const R_PPC_GOT_DTPREL16: u32 = 91;
pub const R_PPC_GOT_DTPREL16_LO: u32 = 92;
pub const R_PPC_GOT_DTPREL16_HI: u32 = 93;
pub const R_PPC_GOT_DTPREL16_HA: u32 = 94;
pub const R_PPC_TLSGD: u32 = 95;
pub const R_PPC_TLSLD: u32 = 96;
pub const R_PPC_EMB_NADDR32: u32 = 101;
pub const R_PPC_EMB_NADDR16: u32 = 102;
pub const R_PPC_EMB_NADDR16_LO: u32 = 103;
pub const R_PPC_EMB_NADDR16_HI: u32 = 104;
pub const R_PPC_EMB_NADDR16_HA: u32 = 105;
pub const R_PPC_EMB_SDAI16: u32 = 106;
pub const R_PPC_EMB_SDA2I16: u32 = 107;
pub const R_PPC_EMB_SDA2REL: u32 = 108;
pub const R_PPC_EMB_SDA21: u32 = 109;
pub const R_PPC_EMB_MRKREF: u32 = 110;
pub const R_PPC_EMB_RELSEC16: u32 = 111;
pub const R_PPC_EMB_RELST_LO: u32 = 112;
pub const R_PPC_EMB_RELST_HI: u32 = 113;
pub const R_PPC_EMB_RELST_HA: u32 = 114;
pub const R_PPC_EMB_BIT_FLD: u32 = 115;
pub const R_PPC_EMB_RELSDA: u32 = 116;
pub const R_PPC_DIAB_SDA21_LO: u32 = 180;
pub const R_PPC_DIAB_SDA21_HI: u32 = 181;
pub const R_PPC_DIAB_SDA21_HA: u32 = 182;
pub const R_PPC_DIAB_RELSDA_LO: u32 = 183;
pub const R_PPC_DIAB_RELSDA_HI: u32 = 184;
pub const R_PPC_DIAB_RELSDA_HA: u32 = 185;
pub const R_PPC_IRELATIVE: u32 = 248;
pub const R_PPC_REL16: u32 = 249;
pub const R_PPC_REL16_LO: u32 = 250;
pub const R_PPC_REL16_HI: u32 = 251;
pub const R_PPC_REL16_HA: u32 = 252;
pub const R_PPC_TOC16: u32 = 255;
pub const DT_PPC_GOT: u32 = 1879048192;
pub const DT_PPC_OPT: u32 = 1879048193;
pub const DT_PPC_NUM: u32 = 2;
pub const PPC_OPT_TLS: u32 = 1;
pub const R_PPC64_NONE: u32 = 0;
pub const R_PPC64_ADDR32: u32 = 1;
pub const R_PPC64_ADDR24: u32 = 2;
pub const R_PPC64_ADDR16: u32 = 3;
pub const R_PPC64_ADDR16_LO: u32 = 4;
pub const R_PPC64_ADDR16_HI: u32 = 5;
pub const R_PPC64_ADDR16_HA: u32 = 6;
pub const R_PPC64_ADDR14: u32 = 7;
pub const R_PPC64_ADDR14_BRTAKEN: u32 = 8;
pub const R_PPC64_ADDR14_BRNTAKEN: u32 = 9;
pub const R_PPC64_REL24: u32 = 10;
pub const R_PPC64_REL14: u32 = 11;
pub const R_PPC64_REL14_BRTAKEN: u32 = 12;
pub const R_PPC64_REL14_BRNTAKEN: u32 = 13;
pub const R_PPC64_GOT16: u32 = 14;
pub const R_PPC64_GOT16_LO: u32 = 15;
pub const R_PPC64_GOT16_HI: u32 = 16;
pub const R_PPC64_GOT16_HA: u32 = 17;
pub const R_PPC64_COPY: u32 = 19;
pub const R_PPC64_GLOB_DAT: u32 = 20;
pub const R_PPC64_JMP_SLOT: u32 = 21;
pub const R_PPC64_RELATIVE: u32 = 22;
pub const R_PPC64_UADDR32: u32 = 24;
pub const R_PPC64_UADDR16: u32 = 25;
pub const R_PPC64_REL32: u32 = 26;
pub const R_PPC64_PLT32: u32 = 27;
pub const R_PPC64_PLTREL32: u32 = 28;
pub const R_PPC64_PLT16_LO: u32 = 29;
pub const R_PPC64_PLT16_HI: u32 = 30;
pub const R_PPC64_PLT16_HA: u32 = 31;
pub const R_PPC64_SECTOFF: u32 = 33;
pub const R_PPC64_SECTOFF_LO: u32 = 34;
pub const R_PPC64_SECTOFF_HI: u32 = 35;
pub const R_PPC64_SECTOFF_HA: u32 = 36;
pub const R_PPC64_ADDR30: u32 = 37;
pub const R_PPC64_ADDR64: u32 = 38;
pub const R_PPC64_ADDR16_HIGHER: u32 = 39;
pub const R_PPC64_ADDR16_HIGHERA: u32 = 40;
pub const R_PPC64_ADDR16_HIGHEST: u32 = 41;
pub const R_PPC64_ADDR16_HIGHESTA: u32 = 42;
pub const R_PPC64_UADDR64: u32 = 43;
pub const R_PPC64_REL64: u32 = 44;
pub const R_PPC64_PLT64: u32 = 45;
pub const R_PPC64_PLTREL64: u32 = 46;
pub const R_PPC64_TOC16: u32 = 47;
pub const R_PPC64_TOC16_LO: u32 = 48;
pub const R_PPC64_TOC16_HI: u32 = 49;
pub const R_PPC64_TOC16_HA: u32 = 50;
pub const R_PPC64_TOC: u32 = 51;
pub const R_PPC64_PLTGOT16: u32 = 52;
pub const R_PPC64_PLTGOT16_LO: u32 = 53;
pub const R_PPC64_PLTGOT16_HI: u32 = 54;
pub const R_PPC64_PLTGOT16_HA: u32 = 55;
pub const R_PPC64_ADDR16_DS: u32 = 56;
pub const R_PPC64_ADDR16_LO_DS: u32 = 57;
pub const R_PPC64_GOT16_DS: u32 = 58;
pub const R_PPC64_GOT16_LO_DS: u32 = 59;
pub const R_PPC64_PLT16_LO_DS: u32 = 60;
pub const R_PPC64_SECTOFF_DS: u32 = 61;
pub const R_PPC64_SECTOFF_LO_DS: u32 = 62;
pub const R_PPC64_TOC16_DS: u32 = 63;
pub const R_PPC64_TOC16_LO_DS: u32 = 64;
pub const R_PPC64_PLTGOT16_DS: u32 = 65;
pub const R_PPC64_PLTGOT16_LO_DS: u32 = 66;
pub const R_PPC64_TLS: u32 = 67;
pub const R_PPC64_DTPMOD64: u32 = 68;
pub const R_PPC64_TPREL16: u32 = 69;
pub const R_PPC64_TPREL16_LO: u32 = 70;
pub const R_PPC64_TPREL16_HI: u32 = 71;
pub const R_PPC64_TPREL16_HA: u32 = 72;
pub const R_PPC64_TPREL64: u32 = 73;
pub const R_PPC64_DTPREL16: u32 = 74;
pub const R_PPC64_DTPREL16_LO: u32 = 75;
pub const R_PPC64_DTPREL16_HI: u32 = 76;
pub const R_PPC64_DTPREL16_HA: u32 = 77;
pub const R_PPC64_DTPREL64: u32 = 78;
pub const R_PPC64_GOT_TLSGD16: u32 = 79;
pub const R_PPC64_GOT_TLSGD16_LO: u32 = 80;
pub const R_PPC64_GOT_TLSGD16_HI: u32 = 81;
pub const R_PPC64_GOT_TLSGD16_HA: u32 = 82;
pub const R_PPC64_GOT_TLSLD16: u32 = 83;
pub const R_PPC64_GOT_TLSLD16_LO: u32 = 84;
pub const R_PPC64_GOT_TLSLD16_HI: u32 = 85;
pub const R_PPC64_GOT_TLSLD16_HA: u32 = 86;
pub const R_PPC64_GOT_TPREL16_DS: u32 = 87;
pub const R_PPC64_GOT_TPREL16_LO_DS: u32 = 88;
pub const R_PPC64_GOT_TPREL16_HI: u32 = 89;
pub const R_PPC64_GOT_TPREL16_HA: u32 = 90;
pub const R_PPC64_GOT_DTPREL16_DS: u32 = 91;
pub const R_PPC64_GOT_DTPREL16_LO_DS: u32 = 92;
pub const R_PPC64_GOT_DTPREL16_HI: u32 = 93;
pub const R_PPC64_GOT_DTPREL16_HA: u32 = 94;
pub const R_PPC64_TPREL16_DS: u32 = 95;
pub const R_PPC64_TPREL16_LO_DS: u32 = 96;
pub const R_PPC64_TPREL16_HIGHER: u32 = 97;
pub const R_PPC64_TPREL16_HIGHERA: u32 = 98;
pub const R_PPC64_TPREL16_HIGHEST: u32 = 99;
pub const R_PPC64_TPREL16_HIGHESTA: u32 = 100;
pub const R_PPC64_DTPREL16_DS: u32 = 101;
pub const R_PPC64_DTPREL16_LO_DS: u32 = 102;
pub const R_PPC64_DTPREL16_HIGHER: u32 = 103;
pub const R_PPC64_DTPREL16_HIGHERA: u32 = 104;
pub const R_PPC64_DTPREL16_HIGHEST: u32 = 105;
pub const R_PPC64_DTPREL16_HIGHESTA: u32 = 106;
pub const R_PPC64_TLSGD: u32 = 107;
pub const R_PPC64_TLSLD: u32 = 108;
pub const R_PPC64_TOCSAVE: u32 = 109;
pub const R_PPC64_ADDR16_HIGH: u32 = 110;
pub const R_PPC64_ADDR16_HIGHA: u32 = 111;
pub const R_PPC64_TPREL16_HIGH: u32 = 112;
pub const R_PPC64_TPREL16_HIGHA: u32 = 113;
pub const R_PPC64_DTPREL16_HIGH: u32 = 114;
pub const R_PPC64_DTPREL16_HIGHA: u32 = 115;
pub const R_PPC64_JMP_IREL: u32 = 247;
pub const R_PPC64_IRELATIVE: u32 = 248;
pub const R_PPC64_REL16: u32 = 249;
pub const R_PPC64_REL16_LO: u32 = 250;
pub const R_PPC64_REL16_HI: u32 = 251;
pub const R_PPC64_REL16_HA: u32 = 252;
pub const EF_PPC64_ABI: u32 = 3;
pub const DT_PPC64_GLINK: u32 = 1879048192;
pub const DT_PPC64_OPD: u32 = 1879048193;
pub const DT_PPC64_OPDSZ: u32 = 1879048194;
pub const DT_PPC64_OPT: u32 = 1879048195;
pub const DT_PPC64_NUM: u32 = 4;
pub const PPC64_OPT_TLS: u32 = 1;
pub const PPC64_OPT_MULTI_TOC: u32 = 2;
pub const PPC64_OPT_LOCALENTRY: u32 = 4;
pub const STO_PPC64_LOCAL_BIT: u32 = 5;
pub const STO_PPC64_LOCAL_MASK: u32 = 224;
pub const EF_ARM_RELEXEC: u32 = 1;
pub const EF_ARM_HASENTRY: u32 = 2;
pub const EF_ARM_INTERWORK: u32 = 4;
pub const EF_ARM_APCS_26: u32 = 8;
pub const EF_ARM_APCS_FLOAT: u32 = 16;
pub const EF_ARM_PIC: u32 = 32;
pub const EF_ARM_ALIGN8: u32 = 64;
pub const EF_ARM_NEW_ABI: u32 = 128;
pub const EF_ARM_OLD_ABI: u32 = 256;
pub const EF_ARM_SOFT_FLOAT: u32 = 512;
pub const EF_ARM_VFP_FLOAT: u32 = 1024;
pub const EF_ARM_MAVERICK_FLOAT: u32 = 2048;
pub const EF_ARM_ABI_FLOAT_SOFT: u32 = 512;
pub const EF_ARM_ABI_FLOAT_HARD: u32 = 1024;
pub const EF_ARM_SYMSARESORTED: u32 = 4;
pub const EF_ARM_DYNSYMSUSESEGIDX: u32 = 8;
pub const EF_ARM_MAPSYMSFIRST: u32 = 16;
pub const EF_ARM_EABIMASK: u32 = 4278190080;
pub const EF_ARM_BE8: u32 = 8388608;
pub const EF_ARM_LE8: u32 = 4194304;
pub const EF_ARM_EABI_UNKNOWN: u32 = 0;
pub const EF_ARM_EABI_VER1: u32 = 16777216;
pub const EF_ARM_EABI_VER2: u32 = 33554432;
pub const EF_ARM_EABI_VER3: u32 = 50331648;
pub const EF_ARM_EABI_VER4: u32 = 67108864;
pub const EF_ARM_EABI_VER5: u32 = 83886080;
pub const STT_ARM_TFUNC: u32 = 13;
pub const STT_ARM_16BIT: u32 = 15;
pub const SHF_ARM_ENTRYSECT: u32 = 268435456;
pub const SHF_ARM_COMDEF: u32 = 2147483648;
pub const PF_ARM_SB: u32 = 268435456;
pub const PF_ARM_PI: u32 = 536870912;
pub const PF_ARM_ABS: u32 = 1073741824;
pub const PT_ARM_EXIDX: u32 = 1879048193;
pub const SHT_ARM_EXIDX: u32 = 1879048193;
pub const SHT_ARM_PREEMPTMAP: u32 = 1879048194;
pub const SHT_ARM_ATTRIBUTES: u32 = 1879048195;
pub const R_AARCH64_NONE: u32 = 0;
pub const R_AARCH64_P32_ABS32: u32 = 1;
pub const R_AARCH64_P32_COPY: u32 = 180;
pub const R_AARCH64_P32_GLOB_DAT: u32 = 181;
pub const R_AARCH64_P32_JUMP_SLOT: u32 = 182;
pub const R_AARCH64_P32_RELATIVE: u32 = 183;
pub const R_AARCH64_P32_TLS_DTPMOD: u32 = 184;
pub const R_AARCH64_P32_TLS_DTPREL: u32 = 185;
pub const R_AARCH64_P32_TLS_TPREL: u32 = 186;
pub const R_AARCH64_P32_TLSDESC: u32 = 187;
pub const R_AARCH64_P32_IRELATIVE: u32 = 188;
pub const R_AARCH64_ABS64: u32 = 257;
pub const R_AARCH64_ABS32: u32 = 258;
pub const R_AARCH64_ABS16: u32 = 259;
pub const R_AARCH64_PREL64: u32 = 260;
pub const R_AARCH64_PREL32: u32 = 261;
pub const R_AARCH64_PREL16: u32 = 262;
pub const R_AARCH64_MOVW_UABS_G0: u32 = 263;
pub const R_AARCH64_MOVW_UABS_G0_NC: u32 = 264;
pub const R_AARCH64_MOVW_UABS_G1: u32 = 265;
pub const R_AARCH64_MOVW_UABS_G1_NC: u32 = 266;
pub const R_AARCH64_MOVW_UABS_G2: u32 = 267;
pub const R_AARCH64_MOVW_UABS_G2_NC: u32 = 268;
pub const R_AARCH64_MOVW_UABS_G3: u32 = 269;
pub const R_AARCH64_MOVW_SABS_G0: u32 = 270;
pub const R_AARCH64_MOVW_SABS_G1: u32 = 271;
pub const R_AARCH64_MOVW_SABS_G2: u32 = 272;
pub const R_AARCH64_LD_PREL_LO19: u32 = 273;
pub const R_AARCH64_ADR_PREL_LO21: u32 = 274;
pub const R_AARCH64_ADR_PREL_PG_HI21: u32 = 275;
pub const R_AARCH64_ADR_PREL_PG_HI21_NC: u32 = 276;
pub const R_AARCH64_ADD_ABS_LO12_NC: u32 = 277;
pub const R_AARCH64_LDST8_ABS_LO12_NC: u32 = 278;
pub const R_AARCH64_TSTBR14: u32 = 279;
pub const R_AARCH64_CONDBR19: u32 = 280;
pub const R_AARCH64_JUMP26: u32 = 282;
pub const R_AARCH64_CALL26: u32 = 283;
pub const R_AARCH64_LDST16_ABS_LO12_NC: u32 = 284;
pub const R_AARCH64_LDST32_ABS_LO12_NC: u32 = 285;
pub const R_AARCH64_LDST64_ABS_LO12_NC: u32 = 286;
pub const R_AARCH64_MOVW_PREL_G0: u32 = 287;
pub const R_AARCH64_MOVW_PREL_G0_NC: u32 = 288;
pub const R_AARCH64_MOVW_PREL_G1: u32 = 289;
pub const R_AARCH64_MOVW_PREL_G1_NC: u32 = 290;
pub const R_AARCH64_MOVW_PREL_G2: u32 = 291;
pub const R_AARCH64_MOVW_PREL_G2_NC: u32 = 292;
pub const R_AARCH64_MOVW_PREL_G3: u32 = 293;
pub const R_AARCH64_LDST128_ABS_LO12_NC: u32 = 299;
pub const R_AARCH64_MOVW_GOTOFF_G0: u32 = 300;
pub const R_AARCH64_MOVW_GOTOFF_G0_NC: u32 = 301;
pub const R_AARCH64_MOVW_GOTOFF_G1: u32 = 302;
pub const R_AARCH64_MOVW_GOTOFF_G1_NC: u32 = 303;
pub const R_AARCH64_MOVW_GOTOFF_G2: u32 = 304;
pub const R_AARCH64_MOVW_GOTOFF_G2_NC: u32 = 305;
pub const R_AARCH64_MOVW_GOTOFF_G3: u32 = 306;
pub const R_AARCH64_GOTREL64: u32 = 307;
pub const R_AARCH64_GOTREL32: u32 = 308;
pub const R_AARCH64_GOT_LD_PREL19: u32 = 309;
pub const R_AARCH64_LD64_GOTOFF_LO15: u32 = 310;
pub const R_AARCH64_ADR_GOT_PAGE: u32 = 311;
pub const R_AARCH64_LD64_GOT_LO12_NC: u32 = 312;
pub const R_AARCH64_LD64_GOTPAGE_LO15: u32 = 313;
pub const R_AARCH64_TLSGD_ADR_PREL21: u32 = 512;
pub const R_AARCH64_TLSGD_ADR_PAGE21: u32 = 513;
pub const R_AARCH64_TLSGD_ADD_LO12_NC: u32 = 514;
pub const R_AARCH64_TLSGD_MOVW_G1: u32 = 515;
pub const R_AARCH64_TLSGD_MOVW_G0_NC: u32 = 516;
pub const R_AARCH64_TLSLD_ADR_PREL21: u32 = 517;
pub const R_AARCH64_TLSLD_ADR_PAGE21: u32 = 518;
pub const R_AARCH64_TLSLD_ADD_LO12_NC: u32 = 519;
pub const R_AARCH64_TLSLD_MOVW_G1: u32 = 520;
pub const R_AARCH64_TLSLD_MOVW_G0_NC: u32 = 521;
pub const R_AARCH64_TLSLD_LD_PREL19: u32 = 522;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G2: u32 = 523;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1: u32 = 524;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC: u32 = 525;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0: u32 = 526;
pub const R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC: u32 = 527;
pub const R_AARCH64_TLSLD_ADD_DTPREL_HI12: u32 = 528;
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12: u32 = 529;
pub const R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC: u32 = 530;
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12: u32 = 531;
pub const R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC: u32 = 532;
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12: u32 = 533;
pub const R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC: u32 = 534;
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12: u32 = 535;
pub const R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC: u32 = 536;
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12: u32 = 537;
pub const R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC: u32 = 538;
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G1: u32 = 539;
pub const R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC: u32 = 540;
pub const R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21: u32 = 541;
pub const R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC: u32 = 542;
pub const R_AARCH64_TLSIE_LD_GOTTPREL_PREL19: u32 = 543;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G2: u32 = 544;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1: u32 = 545;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G1_NC: u32 = 546;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0: u32 = 547;
pub const R_AARCH64_TLSLE_MOVW_TPREL_G0_NC: u32 = 548;
pub const R_AARCH64_TLSLE_ADD_TPREL_HI12: u32 = 549;
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12: u32 = 550;
pub const R_AARCH64_TLSLE_ADD_TPREL_LO12_NC: u32 = 551;
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12: u32 = 552;
pub const R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC: u32 = 553;
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12: u32 = 554;
pub const R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC: u32 = 555;
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12: u32 = 556;
pub const R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC: u32 = 557;
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12: u32 = 558;
pub const R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC: u32 = 559;
pub const R_AARCH64_TLSDESC_LD_PREL19: u32 = 560;
pub const R_AARCH64_TLSDESC_ADR_PREL21: u32 = 561;
pub const R_AARCH64_TLSDESC_ADR_PAGE21: u32 = 562;
pub const R_AARCH64_TLSDESC_LD64_LO12: u32 = 563;
pub const R_AARCH64_TLSDESC_ADD_LO12: u32 = 564;
pub const R_AARCH64_TLSDESC_OFF_G1: u32 = 565;
pub const R_AARCH64_TLSDESC_OFF_G0_NC: u32 = 566;
pub const R_AARCH64_TLSDESC_LDR: u32 = 567;
pub const R_AARCH64_TLSDESC_ADD: u32 = 568;
pub const R_AARCH64_TLSDESC_CALL: u32 = 569;
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12: u32 = 570;
pub const R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC: u32 = 571;
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12: u32 = 572;
pub const R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC: u32 = 573;
pub const R_AARCH64_COPY: u32 = 1024;
pub const R_AARCH64_GLOB_DAT: u32 = 1025;
pub const R_AARCH64_JUMP_SLOT: u32 = 1026;
pub const R_AARCH64_RELATIVE: u32 = 1027;
pub const R_AARCH64_TLS_DTPMOD: u32 = 1028;
pub const R_AARCH64_TLS_DTPREL: u32 = 1029;
pub const R_AARCH64_TLS_TPREL: u32 = 1030;
pub const R_AARCH64_TLSDESC: u32 = 1031;
pub const R_AARCH64_IRELATIVE: u32 = 1032;
pub const PT_AARCH64_MEMTAG_MTE: u32 = 1879048194;
pub const DT_AARCH64_BTI_PLT: u32 = 1879048193;
pub const DT_AARCH64_PAC_PLT: u32 = 1879048195;
pub const DT_AARCH64_VARIANT_PCS: u32 = 1879048197;
pub const DT_AARCH64_NUM: u32 = 6;
pub const STO_AARCH64_VARIANT_PCS: u32 = 128;
pub const R_ARM_NONE: u32 = 0;
pub const R_ARM_PC24: u32 = 1;
pub const R_ARM_ABS32: u32 = 2;
pub const R_ARM_REL32: u32 = 3;
pub const R_ARM_PC13: u32 = 4;
pub const R_ARM_ABS16: u32 = 5;
pub const R_ARM_ABS12: u32 = 6;
pub const R_ARM_THM_ABS5: u32 = 7;
pub const R_ARM_ABS8: u32 = 8;
pub const R_ARM_SBREL32: u32 = 9;
pub const R_ARM_THM_PC22: u32 = 10;
pub const R_ARM_THM_PC8: u32 = 11;
pub const R_ARM_AMP_VCALL9: u32 = 12;
pub const R_ARM_SWI24: u32 = 13;
pub const R_ARM_TLS_DESC: u32 = 13;
pub const R_ARM_THM_SWI8: u32 = 14;
pub const R_ARM_XPC25: u32 = 15;
pub const R_ARM_THM_XPC22: u32 = 16;
pub const R_ARM_TLS_DTPMOD32: u32 = 17;
pub const R_ARM_TLS_DTPOFF32: u32 = 18;
pub const R_ARM_TLS_TPOFF32: u32 = 19;
pub const R_ARM_COPY: u32 = 20;
pub const R_ARM_GLOB_DAT: u32 = 21;
pub const R_ARM_JUMP_SLOT: u32 = 22;
pub const R_ARM_RELATIVE: u32 = 23;
pub const R_ARM_GOTOFF: u32 = 24;
pub const R_ARM_GOTPC: u32 = 25;
pub const R_ARM_GOT32: u32 = 26;
pub const R_ARM_PLT32: u32 = 27;
pub const R_ARM_CALL: u32 = 28;
pub const R_ARM_JUMP24: u32 = 29;
pub const R_ARM_THM_JUMP24: u32 = 30;
pub const R_ARM_BASE_ABS: u32 = 31;
pub const R_ARM_ALU_PCREL_7_0: u32 = 32;
pub const R_ARM_ALU_PCREL_15_8: u32 = 33;
pub const R_ARM_ALU_PCREL_23_15: u32 = 34;
pub const R_ARM_LDR_SBREL_11_0: u32 = 35;
pub const R_ARM_ALU_SBREL_19_12: u32 = 36;
pub const R_ARM_ALU_SBREL_27_20: u32 = 37;
pub const R_ARM_TARGET1: u32 = 38;
pub const R_ARM_SBREL31: u32 = 39;
pub const R_ARM_V4BX: u32 = 40;
pub const R_ARM_TARGET2: u32 = 41;
pub const R_ARM_PREL31: u32 = 42;
pub const R_ARM_MOVW_ABS_NC: u32 = 43;
pub const R_ARM_MOVT_ABS: u32 = 44;
pub const R_ARM_MOVW_PREL_NC: u32 = 45;
pub const R_ARM_MOVT_PREL: u32 = 46;
pub const R_ARM_THM_MOVW_ABS_NC: u32 = 47;
pub const R_ARM_THM_MOVT_ABS: u32 = 48;
pub const R_ARM_THM_MOVW_PREL_NC: u32 = 49;
pub const R_ARM_THM_MOVT_PREL: u32 = 50;
pub const R_ARM_THM_JUMP19: u32 = 51;
pub const R_ARM_THM_JUMP6: u32 = 52;
pub const R_ARM_THM_ALU_PREL_11_0: u32 = 53;
pub const R_ARM_THM_PC12: u32 = 54;
pub const R_ARM_ABS32_NOI: u32 = 55;
pub const R_ARM_REL32_NOI: u32 = 56;
pub const R_ARM_ALU_PC_G0_NC: u32 = 57;
pub const R_ARM_ALU_PC_G0: u32 = 58;
pub const R_ARM_ALU_PC_G1_NC: u32 = 59;
pub const R_ARM_ALU_PC_G1: u32 = 60;
pub const R_ARM_ALU_PC_G2: u32 = 61;
pub const R_ARM_LDR_PC_G1: u32 = 62;
pub const R_ARM_LDR_PC_G2: u32 = 63;
pub const R_ARM_LDRS_PC_G0: u32 = 64;
pub const R_ARM_LDRS_PC_G1: u32 = 65;
pub const R_ARM_LDRS_PC_G2: u32 = 66;
pub const R_ARM_LDC_PC_G0: u32 = 67;
pub const R_ARM_LDC_PC_G1: u32 = 68;
pub const R_ARM_LDC_PC_G2: u32 = 69;
pub const R_ARM_ALU_SB_G0_NC: u32 = 70;
pub const R_ARM_ALU_SB_G0: u32 = 71;
pub const R_ARM_ALU_SB_G1_NC: u32 = 72;
pub const R_ARM_ALU_SB_G1: u32 = 73;
pub const R_ARM_ALU_SB_G2: u32 = 74;
pub const R_ARM_LDR_SB_G0: u32 = 75;
pub const R_ARM_LDR_SB_G1: u32 = 76;
pub const R_ARM_LDR_SB_G2: u32 = 77;
pub const R_ARM_LDRS_SB_G0: u32 = 78;
pub const R_ARM_LDRS_SB_G1: u32 = 79;
pub const R_ARM_LDRS_SB_G2: u32 = 80;
pub const R_ARM_LDC_SB_G0: u32 = 81;
pub const R_ARM_LDC_SB_G1: u32 = 82;
pub const R_ARM_LDC_SB_G2: u32 = 83;
pub const R_ARM_MOVW_BREL_NC: u32 = 84;
pub const R_ARM_MOVT_BREL: u32 = 85;
pub const R_ARM_MOVW_BREL: u32 = 86;
pub const R_ARM_THM_MOVW_BREL_NC: u32 = 87;
pub const R_ARM_THM_MOVT_BREL: u32 = 88;
pub const R_ARM_THM_MOVW_BREL: u32 = 89;
pub const R_ARM_TLS_GOTDESC: u32 = 90;
pub const R_ARM_TLS_CALL: u32 = 91;
pub const R_ARM_TLS_DESCSEQ: u32 = 92;
pub const R_ARM_THM_TLS_CALL: u32 = 93;
pub const R_ARM_PLT32_ABS: u32 = 94;
pub const R_ARM_GOT_ABS: u32 = 95;
pub const R_ARM_GOT_PREL: u32 = 96;
pub const R_ARM_GOT_BREL12: u32 = 97;
pub const R_ARM_GOTOFF12: u32 = 98;
pub const R_ARM_GOTRELAX: u32 = 99;
pub const R_ARM_GNU_VTENTRY: u32 = 100;
pub const R_ARM_GNU_VTINHERIT: u32 = 101;
pub const R_ARM_THM_PC11: u32 = 102;
pub const R_ARM_THM_PC9: u32 = 103;
pub const R_ARM_TLS_GD32: u32 = 104;
pub const R_ARM_TLS_LDM32: u32 = 105;
pub const R_ARM_TLS_LDO32: u32 = 106;
pub const R_ARM_TLS_IE32: u32 = 107;
pub const R_ARM_TLS_LE32: u32 = 108;
pub const R_ARM_TLS_LDO12: u32 = 109;
pub const R_ARM_TLS_LE12: u32 = 110;
pub const R_ARM_TLS_IE12GP: u32 = 111;
pub const R_ARM_ME_TOO: u32 = 128;
pub const R_ARM_THM_TLS_DESCSEQ: u32 = 129;
pub const R_ARM_THM_TLS_DESCSEQ16: u32 = 129;
pub const R_ARM_THM_TLS_DESCSEQ32: u32 = 130;
pub const R_ARM_THM_GOT_BREL12: u32 = 131;
pub const R_ARM_IRELATIVE: u32 = 160;
pub const R_ARM_RXPC25: u32 = 249;
pub const R_ARM_RSBREL32: u32 = 250;
pub const R_ARM_THM_RPC22: u32 = 251;
pub const R_ARM_RREL32: u32 = 252;
pub const R_ARM_RABS22: u32 = 253;
pub const R_ARM_RPC24: u32 = 254;
pub const R_ARM_RBASE: u32 = 255;
pub const R_ARM_NUM: u32 = 256;
pub const R_CKCORE_NONE: u32 = 0;
pub const R_CKCORE_ADDR32: u32 = 1;
pub const R_CKCORE_PCRELIMM8BY4: u32 = 2;
pub const R_CKCORE_PCRELIMM11BY2: u32 = 3;
pub const R_CKCORE_PCREL32: u32 = 5;
pub const R_CKCORE_PCRELJSR_IMM11BY2: u32 = 6;
pub const R_CKCORE_RELATIVE: u32 = 9;
pub const R_CKCORE_COPY: u32 = 10;
pub const R_CKCORE_GLOB_DAT: u32 = 11;
pub const R_CKCORE_JUMP_SLOT: u32 = 12;
pub const R_CKCORE_GOTOFF: u32 = 13;
pub const R_CKCORE_GOTPC: u32 = 14;
pub const R_CKCORE_GOT32: u32 = 15;
pub const R_CKCORE_PLT32: u32 = 16;
pub const R_CKCORE_ADDRGOT: u32 = 17;
pub const R_CKCORE_ADDRPLT: u32 = 18;
pub const R_CKCORE_PCREL_IMM26BY2: u32 = 19;
pub const R_CKCORE_PCREL_IMM16BY2: u32 = 20;
pub const R_CKCORE_PCREL_IMM16BY4: u32 = 21;
pub const R_CKCORE_PCREL_IMM10BY2: u32 = 22;
pub const R_CKCORE_PCREL_IMM10BY4: u32 = 23;
pub const R_CKCORE_ADDR_HI16: u32 = 24;
pub const R_CKCORE_ADDR_LO16: u32 = 25;
pub const R_CKCORE_GOTPC_HI16: u32 = 26;
pub const R_CKCORE_GOTPC_LO16: u32 = 27;
pub const R_CKCORE_GOTOFF_HI16: u32 = 28;
pub const R_CKCORE_GOTOFF_LO16: u32 = 29;
pub const R_CKCORE_GOT12: u32 = 30;
pub const R_CKCORE_GOT_HI16: u32 = 31;
pub const R_CKCORE_GOT_LO16: u32 = 32;
pub const R_CKCORE_PLT12: u32 = 33;
pub const R_CKCORE_PLT_HI16: u32 = 34;
pub const R_CKCORE_PLT_LO16: u32 = 35;
pub const R_CKCORE_ADDRGOT_HI16: u32 = 36;
pub const R_CKCORE_ADDRGOT_LO16: u32 = 37;
pub const R_CKCORE_ADDRPLT_HI16: u32 = 38;
pub const R_CKCORE_ADDRPLT_LO16: u32 = 39;
pub const R_CKCORE_PCREL_JSR_IMM26BY2: u32 = 40;
pub const R_CKCORE_TOFFSET_LO16: u32 = 41;
pub const R_CKCORE_DOFFSET_LO16: u32 = 42;
pub const R_CKCORE_PCREL_IMM18BY2: u32 = 43;
pub const R_CKCORE_DOFFSET_IMM18: u32 = 44;
pub const R_CKCORE_DOFFSET_IMM18BY2: u32 = 45;
pub const R_CKCORE_DOFFSET_IMM18BY4: u32 = 46;
pub const R_CKCORE_GOT_IMM18BY4: u32 = 48;
pub const R_CKCORE_PLT_IMM18BY4: u32 = 49;
pub const R_CKCORE_PCREL_IMM7BY4: u32 = 50;
pub const R_CKCORE_TLS_LE32: u32 = 51;
pub const R_CKCORE_TLS_IE32: u32 = 52;
pub const R_CKCORE_TLS_GD32: u32 = 53;
pub const R_CKCORE_TLS_LDM32: u32 = 54;
pub const R_CKCORE_TLS_LDO32: u32 = 55;
pub const R_CKCORE_TLS_DTPMOD32: u32 = 56;
pub const R_CKCORE_TLS_DTPOFF32: u32 = 57;
pub const R_CKCORE_TLS_TPOFF32: u32 = 58;
pub const EF_CSKY_ABIMASK: u32 = 4026531840;
pub const EF_CSKY_OTHER: u32 = 268369920;
pub const EF_CSKY_PROCESSOR: u32 = 65535;
pub const EF_CSKY_ABIV1: u32 = 268435456;
pub const EF_CSKY_ABIV2: u32 = 536870912;
pub const SHT_CSKY_ATTRIBUTES: u32 = 1879048193;
pub const EF_IA_64_MASKOS: u32 = 15;
pub const EF_IA_64_ABI64: u32 = 16;
pub const EF_IA_64_ARCH: u32 = 4278190080;
pub const PT_IA_64_ARCHEXT: u32 = 1879048192;
pub const PT_IA_64_UNWIND: u32 = 1879048193;
pub const PT_IA_64_HP_OPT_ANOT: u32 = 1610612754;
pub const PT_IA_64_HP_HSL_ANOT: u32 = 1610612755;
pub const PT_IA_64_HP_STACK: u32 = 1610612756;
pub const PF_IA_64_NORECOV: u32 = 2147483648;
pub const SHT_IA_64_EXT: u32 = 1879048192;
pub const SHT_IA_64_UNWIND: u32 = 1879048193;
pub const SHF_IA_64_SHORT: u32 = 268435456;
pub const SHF_IA_64_NORECOV: u32 = 536870912;
pub const DT_IA_64_PLT_RESERVE: u32 = 1879048192;
pub const DT_IA_64_NUM: u32 = 1;
pub const R_IA64_NONE: u32 = 0;
pub const R_IA64_IMM14: u32 = 33;
pub const R_IA64_IMM22: u32 = 34;
pub const R_IA64_IMM64: u32 = 35;
pub const R_IA64_DIR32MSB: u32 = 36;
pub const R_IA64_DIR32LSB: u32 = 37;
pub const R_IA64_DIR64MSB: u32 = 38;
pub const R_IA64_DIR64LSB: u32 = 39;
pub const R_IA64_GPREL22: u32 = 42;
pub const R_IA64_GPREL64I: u32 = 43;
pub const R_IA64_GPREL32MSB: u32 = 44;
pub const R_IA64_GPREL32LSB: u32 = 45;
pub const R_IA64_GPREL64MSB: u32 = 46;
pub const R_IA64_GPREL64LSB: u32 = 47;
pub const R_IA64_LTOFF22: u32 = 50;
pub const R_IA64_LTOFF64I: u32 = 51;
pub const R_IA64_PLTOFF22: u32 = 58;
pub const R_IA64_PLTOFF64I: u32 = 59;
pub const R_IA64_PLTOFF64MSB: u32 = 62;
pub const R_IA64_PLTOFF64LSB: u32 = 63;
pub const R_IA64_FPTR64I: u32 = 67;
pub const R_IA64_FPTR32MSB: u32 = 68;
pub const R_IA64_FPTR32LSB: u32 = 69;
pub const R_IA64_FPTR64MSB: u32 = 70;
pub const R_IA64_FPTR64LSB: u32 = 71;
pub const R_IA64_PCREL60B: u32 = 72;
pub const R_IA64_PCREL21B: u32 = 73;
pub const R_IA64_PCREL21M: u32 = 74;
pub const R_IA64_PCREL21F: u32 = 75;
pub const R_IA64_PCREL32MSB: u32 = 76;
pub const R_IA64_PCREL32LSB: u32 = 77;
pub const R_IA64_PCREL64MSB: u32 = 78;
pub const R_IA64_PCREL64LSB: u32 = 79;
pub const R_IA64_LTOFF_FPTR22: u32 = 82;
pub const R_IA64_LTOFF_FPTR64I: u32 = 83;
pub const R_IA64_LTOFF_FPTR32MSB: u32 = 84;
pub const R_IA64_LTOFF_FPTR32LSB: u32 = 85;
pub const R_IA64_LTOFF_FPTR64MSB: u32 = 86;
pub const R_IA64_LTOFF_FPTR64LSB: u32 = 87;
pub const R_IA64_SEGREL32MSB: u32 = 92;
pub const R_IA64_SEGREL32LSB: u32 = 93;
pub const R_IA64_SEGREL64MSB: u32 = 94;
pub const R_IA64_SEGREL64LSB: u32 = 95;
pub const R_IA64_SECREL32MSB: u32 = 100;
pub const R_IA64_SECREL32LSB: u32 = 101;
pub const R_IA64_SECREL64MSB: u32 = 102;
pub const R_IA64_SECREL64LSB: u32 = 103;
pub const R_IA64_REL32MSB: u32 = 108;
pub const R_IA64_REL32LSB: u32 = 109;
pub const R_IA64_REL64MSB: u32 = 110;
pub const R_IA64_REL64LSB: u32 = 111;
pub const R_IA64_LTV32MSB: u32 = 116;
pub const R_IA64_LTV32LSB: u32 = 117;
pub const R_IA64_LTV64MSB: u32 = 118;
pub const R_IA64_LTV64LSB: u32 = 119;
pub const R_IA64_PCREL21BI: u32 = 121;
pub const R_IA64_PCREL22: u32 = 122;
pub const R_IA64_PCREL64I: u32 = 123;
pub const R_IA64_IPLTMSB: u32 = 128;
pub const R_IA64_IPLTLSB: u32 = 129;
pub const R_IA64_COPY: u32 = 132;
pub const R_IA64_SUB: u32 = 133;
pub const R_IA64_LTOFF22X: u32 = 134;
pub const R_IA64_LDXMOV: u32 = 135;
pub const R_IA64_TPREL14: u32 = 145;
pub const R_IA64_TPREL22: u32 = 146;
pub const R_IA64_TPREL64I: u32 = 147;
pub const R_IA64_TPREL64MSB: u32 = 150;
pub const R_IA64_TPREL64LSB: u32 = 151;
pub const R_IA64_LTOFF_TPREL22: u32 = 154;
pub const R_IA64_DTPMOD64MSB: u32 = 166;
pub const R_IA64_DTPMOD64LSB: u32 = 167;
pub const R_IA64_LTOFF_DTPMOD22: u32 = 170;
pub const R_IA64_DTPREL14: u32 = 177;
pub const R_IA64_DTPREL22: u32 = 178;
pub const R_IA64_DTPREL64I: u32 = 179;
pub const R_IA64_DTPREL32MSB: u32 = 180;
pub const R_IA64_DTPREL32LSB: u32 = 181;
pub const R_IA64_DTPREL64MSB: u32 = 182;
pub const R_IA64_DTPREL64LSB: u32 = 183;
pub const R_IA64_LTOFF_DTPREL22: u32 = 186;
pub const EF_SH_MACH_MASK: u32 = 31;
pub const EF_SH_UNKNOWN: u32 = 0;
pub const EF_SH1: u32 = 1;
pub const EF_SH2: u32 = 2;
pub const EF_SH3: u32 = 3;
pub const EF_SH_DSP: u32 = 4;
pub const EF_SH3_DSP: u32 = 5;
pub const EF_SH4AL_DSP: u32 = 6;
pub const EF_SH3E: u32 = 8;
pub const EF_SH4: u32 = 9;
pub const EF_SH2E: u32 = 11;
pub const EF_SH4A: u32 = 12;
pub const EF_SH2A: u32 = 13;
pub const EF_SH4_NOFPU: u32 = 16;
pub const EF_SH4A_NOFPU: u32 = 17;
pub const EF_SH4_NOMMU_NOFPU: u32 = 18;
pub const EF_SH2A_NOFPU: u32 = 19;
pub const EF_SH3_NOMMU: u32 = 20;
pub const EF_SH2A_SH4_NOFPU: u32 = 21;
pub const EF_SH2A_SH3_NOFPU: u32 = 22;
pub const EF_SH2A_SH4: u32 = 23;
pub const EF_SH2A_SH3E: u32 = 24;
pub const R_SH_NONE: u32 = 0;
pub const R_SH_DIR32: u32 = 1;
pub const R_SH_REL32: u32 = 2;
pub const R_SH_DIR8WPN: u32 = 3;
pub const R_SH_IND12W: u32 = 4;
pub const R_SH_DIR8WPL: u32 = 5;
pub const R_SH_DIR8WPZ: u32 = 6;
pub const R_SH_DIR8BP: u32 = 7;
pub const R_SH_DIR8W: u32 = 8;
pub const R_SH_DIR8L: u32 = 9;
pub const R_SH_SWITCH16: u32 = 25;
pub const R_SH_SWITCH32: u32 = 26;
pub const R_SH_USES: u32 = 27;
pub const R_SH_COUNT: u32 = 28;
pub const R_SH_ALIGN: u32 = 29;
pub const R_SH_CODE: u32 = 30;
pub const R_SH_DATA: u32 = 31;
pub const R_SH_LABEL: u32 = 32;
pub const R_SH_SWITCH8: u32 = 33;
pub const R_SH_GNU_VTINHERIT: u32 = 34;
pub const R_SH_GNU_VTENTRY: u32 = 35;
pub const R_SH_TLS_GD_32: u32 = 144;
pub const R_SH_TLS_LD_32: u32 = 145;
pub const R_SH_TLS_LDO_32: u32 = 146;
pub const R_SH_TLS_IE_32: u32 = 147;
pub const R_SH_TLS_LE_32: u32 = 148;
pub const R_SH_TLS_DTPMOD32: u32 = 149;
pub const R_SH_TLS_DTPOFF32: u32 = 150;
pub const R_SH_TLS_TPOFF32: u32 = 151;
pub const R_SH_GOT32: u32 = 160;
pub const R_SH_PLT32: u32 = 161;
pub const R_SH_COPY: u32 = 162;
pub const R_SH_GLOB_DAT: u32 = 163;
pub const R_SH_JMP_SLOT: u32 = 164;
pub const R_SH_RELATIVE: u32 = 165;
pub const R_SH_GOTOFF: u32 = 166;
pub const R_SH_GOTPC: u32 = 167;
pub const R_SH_NUM: u32 = 256;
pub const EF_S390_HIGH_GPRS: u32 = 1;
pub const R_390_NONE: u32 = 0;
pub const R_390_8: u32 = 1;
pub const R_390_12: u32 = 2;
pub const R_390_16: u32 = 3;
pub const R_390_32: u32 = 4;
pub const R_390_PC32: u32 = 5;
pub const R_390_GOT12: u32 = 6;
pub const R_390_GOT32: u32 = 7;
pub const R_390_PLT32: u32 = 8;
pub const R_390_COPY: u32 = 9;
pub const R_390_GLOB_DAT: u32 = 10;
pub const R_390_JMP_SLOT: u32 = 11;
pub const R_390_RELATIVE: u32 = 12;
pub const R_390_GOTOFF32: u32 = 13;
pub const R_390_GOTPC: u32 = 14;
pub const R_390_GOT16: u32 = 15;
pub const R_390_PC16: u32 = 16;
pub const R_390_PC16DBL: u32 = 17;
pub const R_390_PLT16DBL: u32 = 18;
pub const R_390_PC32DBL: u32 = 19;
pub const R_390_PLT32DBL: u32 = 20;
pub const R_390_GOTPCDBL: u32 = 21;
pub const R_390_64: u32 = 22;
pub const R_390_PC64: u32 = 23;
pub const R_390_GOT64: u32 = 24;
pub const R_390_PLT64: u32 = 25;
pub const R_390_GOTENT: u32 = 26;
pub const R_390_GOTOFF16: u32 = 27;
pub const R_390_GOTOFF64: u32 = 28;
pub const R_390_GOTPLT12: u32 = 29;
pub const R_390_GOTPLT16: u32 = 30;
pub const R_390_GOTPLT32: u32 = 31;
pub const R_390_GOTPLT64: u32 = 32;
pub const R_390_GOTPLTENT: u32 = 33;
pub const R_390_PLTOFF16: u32 = 34;
pub const R_390_PLTOFF32: u32 = 35;
pub const R_390_PLTOFF64: u32 = 36;
pub const R_390_TLS_LOAD: u32 = 37;
pub const R_390_TLS_GDCALL: u32 = 38;
pub const R_390_TLS_LDCALL: u32 = 39;
pub const R_390_TLS_GD32: u32 = 40;
pub const R_390_TLS_GD64: u32 = 41;
pub const R_390_TLS_GOTIE12: u32 = 42;
pub const R_390_TLS_GOTIE32: u32 = 43;
pub const R_390_TLS_GOTIE64: u32 = 44;
pub const R_390_TLS_LDM32: u32 = 45;
pub const R_390_TLS_LDM64: u32 = 46;
pub const R_390_TLS_IE32: u32 = 47;
pub const R_390_TLS_IE64: u32 = 48;
pub const R_390_TLS_IEENT: u32 = 49;
pub const R_390_TLS_LE32: u32 = 50;
pub const R_390_TLS_LE64: u32 = 51;
pub const R_390_TLS_LDO32: u32 = 52;
pub const R_390_TLS_LDO64: u32 = 53;
pub const R_390_TLS_DTPMOD: u32 = 54;
pub const R_390_TLS_DTPOFF: u32 = 55;
pub const R_390_TLS_TPOFF: u32 = 56;
pub const R_390_20: u32 = 57;
pub const R_390_GOT20: u32 = 58;
pub const R_390_GOTPLT20: u32 = 59;
pub const R_390_TLS_GOTIE20: u32 = 60;
pub const R_390_IRELATIVE: u32 = 61;
pub const R_390_NUM: u32 = 62;
pub const R_CRIS_NONE: u32 = 0;
pub const R_CRIS_8: u32 = 1;
pub const R_CRIS_16: u32 = 2;
pub const R_CRIS_32: u32 = 3;
pub const R_CRIS_8_PCREL: u32 = 4;
pub const R_CRIS_16_PCREL: u32 = 5;
pub const R_CRIS_32_PCREL: u32 = 6;
pub const R_CRIS_GNU_VTINHERIT: u32 = 7;
pub const R_CRIS_GNU_VTENTRY: u32 = 8;
pub const R_CRIS_COPY: u32 = 9;
pub const R_CRIS_GLOB_DAT: u32 = 10;
pub const R_CRIS_JUMP_SLOT: u32 = 11;
pub const R_CRIS_RELATIVE: u32 = 12;
pub const R_CRIS_16_GOT: u32 = 13;
pub const R_CRIS_32_GOT: u32 = 14;
pub const R_CRIS_16_GOTPLT: u32 = 15;
pub const R_CRIS_32_GOTPLT: u32 = 16;
pub const R_CRIS_32_GOTREL: u32 = 17;
pub const R_CRIS_32_PLT_GOTREL: u32 = 18;
pub const R_CRIS_32_PLT_PCREL: u32 = 19;
pub const R_CRIS_NUM: u32 = 20;
pub const R_X86_64_NONE: u32 = 0;
pub const R_X86_64_64: u32 = 1;
pub const R_X86_64_PC32: u32 = 2;
pub const R_X86_64_GOT32: u32 = 3;
pub const R_X86_64_PLT32: u32 = 4;
pub const R_X86_64_COPY: u32 = 5;
pub const R_X86_64_GLOB_DAT: u32 = 6;
pub const R_X86_64_JUMP_SLOT: u32 = 7;
pub const R_X86_64_RELATIVE: u32 = 8;
pub const R_X86_64_GOTPCREL: u32 = 9;
pub const R_X86_64_32: u32 = 10;
pub const R_X86_64_32S: u32 = 11;
pub const R_X86_64_16: u32 = 12;
pub const R_X86_64_PC16: u32 = 13;
pub const R_X86_64_8: u32 = 14;
pub const R_X86_64_PC8: u32 = 15;
pub const R_X86_64_DTPMOD64: u32 = 16;
pub const R_X86_64_DTPOFF64: u32 = 17;
pub const R_X86_64_TPOFF64: u32 = 18;
pub const R_X86_64_TLSGD: u32 = 19;
pub const R_X86_64_TLSLD: u32 = 20;
pub const R_X86_64_DTPOFF32: u32 = 21;
pub const R_X86_64_GOTTPOFF: u32 = 22;
pub const R_X86_64_TPOFF32: u32 = 23;
pub const R_X86_64_PC64: u32 = 24;
pub const R_X86_64_GOTOFF64: u32 = 25;
pub const R_X86_64_GOTPC32: u32 = 26;
pub const R_X86_64_GOT64: u32 = 27;
pub const R_X86_64_GOTPCREL64: u32 = 28;
pub const R_X86_64_GOTPC64: u32 = 29;
pub const R_X86_64_GOTPLT64: u32 = 30;
pub const R_X86_64_PLTOFF64: u32 = 31;
pub const R_X86_64_SIZE32: u32 = 32;
pub const R_X86_64_SIZE64: u32 = 33;
pub const R_X86_64_GOTPC32_TLSDESC: u32 = 34;
pub const R_X86_64_TLSDESC_CALL: u32 = 35;
pub const R_X86_64_TLSDESC: u32 = 36;
pub const R_X86_64_IRELATIVE: u32 = 37;
pub const R_X86_64_RELATIVE64: u32 = 38;
pub const R_X86_64_GOTPCRELX: u32 = 41;
pub const R_X86_64_REX_GOTPCRELX: u32 = 42;
pub const R_X86_64_NUM: u32 = 43;
pub const SHT_X86_64_UNWIND: u32 = 1879048193;
pub const R_MN10300_NONE: u32 = 0;
pub const R_MN10300_32: u32 = 1;
pub const R_MN10300_16: u32 = 2;
pub const R_MN10300_8: u32 = 3;
pub const R_MN10300_PCREL32: u32 = 4;
pub const R_MN10300_PCREL16: u32 = 5;
pub const R_MN10300_PCREL8: u32 = 6;
pub const R_MN10300_GNU_VTINHERIT: u32 = 7;
pub const R_MN10300_GNU_VTENTRY: u32 = 8;
pub const R_MN10300_24: u32 = 9;
pub const R_MN10300_GOTPC32: u32 = 10;
pub const R_MN10300_GOTPC16: u32 = 11;
pub const R_MN10300_GOTOFF32: u32 = 12;
pub const R_MN10300_GOTOFF24: u32 = 13;
pub const R_MN10300_GOTOFF16: u32 = 14;
pub const R_MN10300_PLT32: u32 = 15;
pub const R_MN10300_PLT16: u32 = 16;
pub const R_MN10300_GOT32: u32 = 17;
pub const R_MN10300_GOT24: u32 = 18;
pub const R_MN10300_GOT16: u32 = 19;
pub const R_MN10300_COPY: u32 = 20;
pub const R_MN10300_GLOB_DAT: u32 = 21;
pub const R_MN10300_JMP_SLOT: u32 = 22;
pub const R_MN10300_RELATIVE: u32 = 23;
pub const R_MN10300_TLS_GD: u32 = 24;
pub const R_MN10300_TLS_LD: u32 = 25;
pub const R_MN10300_TLS_LDO: u32 = 26;
pub const R_MN10300_TLS_GOTIE: u32 = 27;
pub const R_MN10300_TLS_IE: u32 = 28;
pub const R_MN10300_TLS_LE: u32 = 29;
pub const R_MN10300_TLS_DTPMOD: u32 = 30;
pub const R_MN10300_TLS_DTPOFF: u32 = 31;
pub const R_MN10300_TLS_TPOFF: u32 = 32;
pub const R_MN10300_SYM_DIFF: u32 = 33;
pub const R_MN10300_ALIGN: u32 = 34;
pub const R_MN10300_NUM: u32 = 35;
pub const R_M32R_NONE: u32 = 0;
pub const R_M32R_16: u32 = 1;
pub const R_M32R_32: u32 = 2;
pub const R_M32R_24: u32 = 3;
pub const R_M32R_10_PCREL: u32 = 4;
pub const R_M32R_18_PCREL: u32 = 5;
pub const R_M32R_26_PCREL: u32 = 6;
pub const R_M32R_HI16_ULO: u32 = 7;
pub const R_M32R_HI16_SLO: u32 = 8;
pub const R_M32R_LO16: u32 = 9;
pub const R_M32R_SDA16: u32 = 10;
pub const R_M32R_GNU_VTINHERIT: u32 = 11;
pub const R_M32R_GNU_VTENTRY: u32 = 12;
pub const R_M32R_16_RELA: u32 = 33;
pub const R_M32R_32_RELA: u32 = 34;
pub const R_M32R_24_RELA: u32 = 35;
pub const R_M32R_10_PCREL_RELA: u32 = 36;
pub const R_M32R_18_PCREL_RELA: u32 = 37;
pub const R_M32R_26_PCREL_RELA: u32 = 38;
pub const R_M32R_HI16_ULO_RELA: u32 = 39;
pub const R_M32R_HI16_SLO_RELA: u32 = 40;
pub const R_M32R_LO16_RELA: u32 = 41;
pub const R_M32R_SDA16_RELA: u32 = 42;
pub const R_M32R_RELA_GNU_VTINHERIT: u32 = 43;
pub const R_M32R_RELA_GNU_VTENTRY: u32 = 44;
pub const R_M32R_REL32: u32 = 45;
pub const R_M32R_GOT24: u32 = 48;
pub const R_M32R_26_PLTREL: u32 = 49;
pub const R_M32R_COPY: u32 = 50;
pub const R_M32R_GLOB_DAT: u32 = 51;
pub const R_M32R_JMP_SLOT: u32 = 52;
pub const R_M32R_RELATIVE: u32 = 53;
pub const R_M32R_GOTOFF: u32 = 54;
pub const R_M32R_GOTPC24: u32 = 55;
pub const R_M32R_GOT16_HI_ULO: u32 = 56;
pub const R_M32R_GOT16_HI_SLO: u32 = 57;
pub const R_M32R_GOT16_LO: u32 = 58;
pub const R_M32R_GOTPC_HI_ULO: u32 = 59;
pub const R_M32R_GOTPC_HI_SLO: u32 = 60;
pub const R_M32R_GOTPC_LO: u32 = 61;
pub const R_M32R_GOTOFF_HI_ULO: u32 = 62;
pub const R_M32R_GOTOFF_HI_SLO: u32 = 63;
pub const R_M32R_GOTOFF_LO: u32 = 64;
pub const R_M32R_NUM: u32 = 256;
pub const R_MICROBLAZE_NONE: u32 = 0;
pub const R_MICROBLAZE_32: u32 = 1;
pub const R_MICROBLAZE_32_PCREL: u32 = 2;
pub const R_MICROBLAZE_64_PCREL: u32 = 3;
pub const R_MICROBLAZE_32_PCREL_LO: u32 = 4;
pub const R_MICROBLAZE_64: u32 = 5;
pub const R_MICROBLAZE_32_LO: u32 = 6;
pub const R_MICROBLAZE_SRO32: u32 = 7;
pub const R_MICROBLAZE_SRW32: u32 = 8;
pub const R_MICROBLAZE_64_NONE: u32 = 9;
pub const R_MICROBLAZE_32_SYM_OP_SYM: u32 = 10;
pub const R_MICROBLAZE_GNU_VTINHERIT: u32 = 11;
pub const R_MICROBLAZE_GNU_VTENTRY: u32 = 12;
pub const R_MICROBLAZE_GOTPC_64: u32 = 13;
pub const R_MICROBLAZE_GOT_64: u32 = 14;
pub const R_MICROBLAZE_PLT_64: u32 = 15;
pub const R_MICROBLAZE_REL: u32 = 16;
pub const R_MICROBLAZE_JUMP_SLOT: u32 = 17;
pub const R_MICROBLAZE_GLOB_DAT: u32 = 18;
pub const R_MICROBLAZE_GOTOFF_64: u32 = 19;
pub const R_MICROBLAZE_GOTOFF_32: u32 = 20;
pub const R_MICROBLAZE_COPY: u32 = 21;
pub const R_MICROBLAZE_TLS: u32 = 22;
pub const R_MICROBLAZE_TLSGD: u32 = 23;
pub const R_MICROBLAZE_TLSLD: u32 = 24;
pub const R_MICROBLAZE_TLSDTPMOD32: u32 = 25;
pub const R_MICROBLAZE_TLSDTPREL32: u32 = 26;
pub const R_MICROBLAZE_TLSDTPREL64: u32 = 27;
pub const R_MICROBLAZE_TLSGOTTPREL32: u32 = 28;
pub const R_MICROBLAZE_TLSTPREL32: u32 = 29;
pub const DT_NIOS2_GP: u32 = 1879048194;
pub const R_NIOS2_NONE: u32 = 0;
pub const R_NIOS2_S16: u32 = 1;
pub const R_NIOS2_U16: u32 = 2;
pub const R_NIOS2_PCREL16: u32 = 3;
pub const R_NIOS2_CALL26: u32 = 4;
pub const R_NIOS2_IMM5: u32 = 5;
pub const R_NIOS2_CACHE_OPX: u32 = 6;
pub const R_NIOS2_IMM6: u32 = 7;
pub const R_NIOS2_IMM8: u32 = 8;
pub const R_NIOS2_HI16: u32 = 9;
pub const R_NIOS2_LO16: u32 = 10;
pub const R_NIOS2_HIADJ16: u32 = 11;
pub const R_NIOS2_BFD_RELOC_32: u32 = 12;
pub const R_NIOS2_BFD_RELOC_16: u32 = 13;
pub const R_NIOS2_BFD_RELOC_8: u32 = 14;
pub const R_NIOS2_GPREL: u32 = 15;
pub const R_NIOS2_GNU_VTINHERIT: u32 = 16;
pub const R_NIOS2_GNU_VTENTRY: u32 = 17;
pub const R_NIOS2_UJMP: u32 = 18;
pub const R_NIOS2_CJMP: u32 = 19;
pub const R_NIOS2_CALLR: u32 = 20;
pub const R_NIOS2_ALIGN: u32 = 21;
pub const R_NIOS2_GOT16: u32 = 22;
pub const R_NIOS2_CALL16: u32 = 23;
pub const R_NIOS2_GOTOFF_LO: u32 = 24;
pub const R_NIOS2_GOTOFF_HA: u32 = 25;
pub const R_NIOS2_PCREL_LO: u32 = 26;
pub const R_NIOS2_PCREL_HA: u32 = 27;
pub const R_NIOS2_TLS_GD16: u32 = 28;
pub const R_NIOS2_TLS_LDM16: u32 = 29;
pub const R_NIOS2_TLS_LDO16: u32 = 30;
pub const R_NIOS2_TLS_IE16: u32 = 31;
pub const R_NIOS2_TLS_LE16: u32 = 32;
pub const R_NIOS2_TLS_DTPMOD: u32 = 33;
pub const R_NIOS2_TLS_DTPREL: u32 = 34;
pub const R_NIOS2_TLS_TPREL: u32 = 35;
pub const R_NIOS2_COPY: u32 = 36;
pub const R_NIOS2_GLOB_DAT: u32 = 37;
pub const R_NIOS2_JUMP_SLOT: u32 = 38;
pub const R_NIOS2_RELATIVE: u32 = 39;
pub const R_NIOS2_GOTOFF: u32 = 40;
pub const R_NIOS2_CALL26_NOAT: u32 = 41;
pub const R_NIOS2_GOT_LO: u32 = 42;
pub const R_NIOS2_GOT_HA: u32 = 43;
pub const R_NIOS2_CALL_LO: u32 = 44;
pub const R_NIOS2_CALL_HA: u32 = 45;
pub const R_TILEPRO_NONE: u32 = 0;
pub const R_TILEPRO_32: u32 = 1;
pub const R_TILEPRO_16: u32 = 2;
pub const R_TILEPRO_8: u32 = 3;
pub const R_TILEPRO_32_PCREL: u32 = 4;
pub const R_TILEPRO_16_PCREL: u32 = 5;
pub const R_TILEPRO_8_PCREL: u32 = 6;
pub const R_TILEPRO_LO16: u32 = 7;
pub const R_TILEPRO_HI16: u32 = 8;
pub const R_TILEPRO_HA16: u32 = 9;
pub const R_TILEPRO_COPY: u32 = 10;
pub const R_TILEPRO_GLOB_DAT: u32 = 11;
pub const R_TILEPRO_JMP_SLOT: u32 = 12;
pub const R_TILEPRO_RELATIVE: u32 = 13;
pub const R_TILEPRO_BROFF_X1: u32 = 14;
pub const R_TILEPRO_JOFFLONG_X1: u32 = 15;
pub const R_TILEPRO_JOFFLONG_X1_PLT: u32 = 16;
pub const R_TILEPRO_IMM8_X0: u32 = 17;
pub const R_TILEPRO_IMM8_Y0: u32 = 18;
pub const R_TILEPRO_IMM8_X1: u32 = 19;
pub const R_TILEPRO_IMM8_Y1: u32 = 20;
pub const R_TILEPRO_MT_IMM15_X1: u32 = 21;
pub const R_TILEPRO_MF_IMM15_X1: u32 = 22;
pub const R_TILEPRO_IMM16_X0: u32 = 23;
pub const R_TILEPRO_IMM16_X1: u32 = 24;
pub const R_TILEPRO_IMM16_X0_LO: u32 = 25;
pub const R_TILEPRO_IMM16_X1_LO: u32 = 26;
pub const R_TILEPRO_IMM16_X0_HI: u32 = 27;
pub const R_TILEPRO_IMM16_X1_HI: u32 = 28;
pub const R_TILEPRO_IMM16_X0_HA: u32 = 29;
pub const R_TILEPRO_IMM16_X1_HA: u32 = 30;
pub const R_TILEPRO_IMM16_X0_PCREL: u32 = 31;
pub const R_TILEPRO_IMM16_X1_PCREL: u32 = 32;
pub const R_TILEPRO_IMM16_X0_LO_PCREL: u32 = 33;
pub const R_TILEPRO_IMM16_X1_LO_PCREL: u32 = 34;
pub const R_TILEPRO_IMM16_X0_HI_PCREL: u32 = 35;
pub const R_TILEPRO_IMM16_X1_HI_PCREL: u32 = 36;
pub const R_TILEPRO_IMM16_X0_HA_PCREL: u32 = 37;
pub const R_TILEPRO_IMM16_X1_HA_PCREL: u32 = 38;
pub const R_TILEPRO_IMM16_X0_GOT: u32 = 39;
pub const R_TILEPRO_IMM16_X1_GOT: u32 = 40;
pub const R_TILEPRO_IMM16_X0_GOT_LO: u32 = 41;
pub const R_TILEPRO_IMM16_X1_GOT_LO: u32 = 42;
pub const R_TILEPRO_IMM16_X0_GOT_HI: u32 = 43;
pub const R_TILEPRO_IMM16_X1_GOT_HI: u32 = 44;
pub const R_TILEPRO_IMM16_X0_GOT_HA: u32 = 45;
pub const R_TILEPRO_IMM16_X1_GOT_HA: u32 = 46;
pub const R_TILEPRO_MMSTART_X0: u32 = 47;
pub const R_TILEPRO_MMEND_X0: u32 = 48;
pub const R_TILEPRO_MMSTART_X1: u32 = 49;
pub const R_TILEPRO_MMEND_X1: u32 = 50;
pub const R_TILEPRO_SHAMT_X0: u32 = 51;
pub const R_TILEPRO_SHAMT_X1: u32 = 52;
pub const R_TILEPRO_SHAMT_Y0: u32 = 53;
pub const R_TILEPRO_SHAMT_Y1: u32 = 54;
pub const R_TILEPRO_DEST_IMM8_X1: u32 = 55;
pub const R_TILEPRO_TLS_GD_CALL: u32 = 60;
pub const R_TILEPRO_IMM8_X0_TLS_GD_ADD: u32 = 61;
pub const R_TILEPRO_IMM8_X1_TLS_GD_ADD: u32 = 62;
pub const R_TILEPRO_IMM8_Y0_TLS_GD_ADD: u32 = 63;
pub const R_TILEPRO_IMM8_Y1_TLS_GD_ADD: u32 = 64;
pub const R_TILEPRO_TLS_IE_LOAD: u32 = 65;
pub const R_TILEPRO_IMM16_X0_TLS_GD: u32 = 66;
pub const R_TILEPRO_IMM16_X1_TLS_GD: u32 = 67;
pub const R_TILEPRO_IMM16_X0_TLS_GD_LO: u32 = 68;
pub const R_TILEPRO_IMM16_X1_TLS_GD_LO: u32 = 69;
pub const R_TILEPRO_IMM16_X0_TLS_GD_HI: u32 = 70;
pub const R_TILEPRO_IMM16_X1_TLS_GD_HI: u32 = 71;
pub const R_TILEPRO_IMM16_X0_TLS_GD_HA: u32 = 72;
pub const R_TILEPRO_IMM16_X1_TLS_GD_HA: u32 = 73;
pub const R_TILEPRO_IMM16_X0_TLS_IE: u32 = 74;
pub const R_TILEPRO_IMM16_X1_TLS_IE: u32 = 75;
pub const R_TILEPRO_IMM16_X0_TLS_IE_LO: u32 = 76;
pub const R_TILEPRO_IMM16_X1_TLS_IE_LO: u32 = 77;
pub const R_TILEPRO_IMM16_X0_TLS_IE_HI: u32 = 78;
pub const R_TILEPRO_IMM16_X1_TLS_IE_HI: u32 = 79;
pub const R_TILEPRO_IMM16_X0_TLS_IE_HA: u32 = 80;
pub const R_TILEPRO_IMM16_X1_TLS_IE_HA: u32 = 81;
pub const R_TILEPRO_TLS_DTPMOD32: u32 = 82;
pub const R_TILEPRO_TLS_DTPOFF32: u32 = 83;
pub const R_TILEPRO_TLS_TPOFF32: u32 = 84;
pub const R_TILEPRO_IMM16_X0_TLS_LE: u32 = 85;
pub const R_TILEPRO_IMM16_X1_TLS_LE: u32 = 86;
pub const R_TILEPRO_IMM16_X0_TLS_LE_LO: u32 = 87;
pub const R_TILEPRO_IMM16_X1_TLS_LE_LO: u32 = 88;
pub const R_TILEPRO_IMM16_X0_TLS_LE_HI: u32 = 89;
pub const R_TILEPRO_IMM16_X1_TLS_LE_HI: u32 = 90;
pub const R_TILEPRO_IMM16_X0_TLS_LE_HA: u32 = 91;
pub const R_TILEPRO_IMM16_X1_TLS_LE_HA: u32 = 92;
pub const R_TILEPRO_GNU_VTINHERIT: u32 = 128;
pub const R_TILEPRO_GNU_VTENTRY: u32 = 129;
pub const R_TILEPRO_NUM: u32 = 130;
pub const R_TILEGX_NONE: u32 = 0;
pub const R_TILEGX_64: u32 = 1;
pub const R_TILEGX_32: u32 = 2;
pub const R_TILEGX_16: u32 = 3;
pub const R_TILEGX_8: u32 = 4;
pub const R_TILEGX_64_PCREL: u32 = 5;
pub const R_TILEGX_32_PCREL: u32 = 6;
pub const R_TILEGX_16_PCREL: u32 = 7;
pub const R_TILEGX_8_PCREL: u32 = 8;
pub const R_TILEGX_HW0: u32 = 9;
pub const R_TILEGX_HW1: u32 = 10;
pub const R_TILEGX_HW2: u32 = 11;
pub const R_TILEGX_HW3: u32 = 12;
pub const R_TILEGX_HW0_LAST: u32 = 13;
pub const R_TILEGX_HW1_LAST: u32 = 14;
pub const R_TILEGX_HW2_LAST: u32 = 15;
pub const R_TILEGX_COPY: u32 = 16;
pub const R_TILEGX_GLOB_DAT: u32 = 17;
pub const R_TILEGX_JMP_SLOT: u32 = 18;
pub const R_TILEGX_RELATIVE: u32 = 19;
pub const R_TILEGX_BROFF_X1: u32 = 20;
pub const R_TILEGX_JUMPOFF_X1: u32 = 21;
pub const R_TILEGX_JUMPOFF_X1_PLT: u32 = 22;
pub const R_TILEGX_IMM8_X0: u32 = 23;
pub const R_TILEGX_IMM8_Y0: u32 = 24;
pub const R_TILEGX_IMM8_X1: u32 = 25;
pub const R_TILEGX_IMM8_Y1: u32 = 26;
pub const R_TILEGX_DEST_IMM8_X1: u32 = 27;
pub const R_TILEGX_MT_IMM14_X1: u32 = 28;
pub const R_TILEGX_MF_IMM14_X1: u32 = 29;
pub const R_TILEGX_MMSTART_X0: u32 = 30;
pub const R_TILEGX_MMEND_X0: u32 = 31;
pub const R_TILEGX_SHAMT_X0: u32 = 32;
pub const R_TILEGX_SHAMT_X1: u32 = 33;
pub const R_TILEGX_SHAMT_Y0: u32 = 34;
pub const R_TILEGX_SHAMT_Y1: u32 = 35;
pub const R_TILEGX_IMM16_X0_HW0: u32 = 36;
pub const R_TILEGX_IMM16_X1_HW0: u32 = 37;
pub const R_TILEGX_IMM16_X0_HW1: u32 = 38;
pub const R_TILEGX_IMM16_X1_HW1: u32 = 39;
pub const R_TILEGX_IMM16_X0_HW2: u32 = 40;
pub const R_TILEGX_IMM16_X1_HW2: u32 = 41;
pub const R_TILEGX_IMM16_X0_HW3: u32 = 42;
pub const R_TILEGX_IMM16_X1_HW3: u32 = 43;
pub const R_TILEGX_IMM16_X0_HW0_LAST: u32 = 44;
pub const R_TILEGX_IMM16_X1_HW0_LAST: u32 = 45;
pub const R_TILEGX_IMM16_X0_HW1_LAST: u32 = 46;
pub const R_TILEGX_IMM16_X1_HW1_LAST: u32 = 47;
pub const R_TILEGX_IMM16_X0_HW2_LAST: u32 = 48;
pub const R_TILEGX_IMM16_X1_HW2_LAST: u32 = 49;
pub const R_TILEGX_IMM16_X0_HW0_PCREL: u32 = 50;
pub const R_TILEGX_IMM16_X1_HW0_PCREL: u32 = 51;
pub const R_TILEGX_IMM16_X0_HW1_PCREL: u32 = 52;
pub const R_TILEGX_IMM16_X1_HW1_PCREL: u32 = 53;
pub const R_TILEGX_IMM16_X0_HW2_PCREL: u32 = 54;
pub const R_TILEGX_IMM16_X1_HW2_PCREL: u32 = 55;
pub const R_TILEGX_IMM16_X0_HW3_PCREL: u32 = 56;
pub const R_TILEGX_IMM16_X1_HW3_PCREL: u32 = 57;
pub const R_TILEGX_IMM16_X0_HW0_LAST_PCREL: u32 = 58;
pub const R_TILEGX_IMM16_X1_HW0_LAST_PCREL: u32 = 59;
pub const R_TILEGX_IMM16_X0_HW1_LAST_PCREL: u32 = 60;
pub const R_TILEGX_IMM16_X1_HW1_LAST_PCREL: u32 = 61;
pub const R_TILEGX_IMM16_X0_HW2_LAST_PCREL: u32 = 62;
pub const R_TILEGX_IMM16_X1_HW2_LAST_PCREL: u32 = 63;
pub const R_TILEGX_IMM16_X0_HW0_GOT: u32 = 64;
pub const R_TILEGX_IMM16_X1_HW0_GOT: u32 = 65;
pub const R_TILEGX_IMM16_X0_HW0_PLT_PCREL: u32 = 66;
pub const R_TILEGX_IMM16_X1_HW0_PLT_PCREL: u32 = 67;
pub const R_TILEGX_IMM16_X0_HW1_PLT_PCREL: u32 = 68;
pub const R_TILEGX_IMM16_X1_HW1_PLT_PCREL: u32 = 69;
pub const R_TILEGX_IMM16_X0_HW2_PLT_PCREL: u32 = 70;
pub const R_TILEGX_IMM16_X1_HW2_PLT_PCREL: u32 = 71;
pub const R_TILEGX_IMM16_X0_HW0_LAST_GOT: u32 = 72;
pub const R_TILEGX_IMM16_X1_HW0_LAST_GOT: u32 = 73;
pub const R_TILEGX_IMM16_X0_HW1_LAST_GOT: u32 = 74;
pub const R_TILEGX_IMM16_X1_HW1_LAST_GOT: u32 = 75;
pub const R_TILEGX_IMM16_X0_HW3_PLT_PCREL: u32 = 76;
pub const R_TILEGX_IMM16_X1_HW3_PLT_PCREL: u32 = 77;
pub const R_TILEGX_IMM16_X0_HW0_TLS_GD: u32 = 78;
pub const R_TILEGX_IMM16_X1_HW0_TLS_GD: u32 = 79;
pub const R_TILEGX_IMM16_X0_HW0_TLS_LE: u32 = 80;
pub const R_TILEGX_IMM16_X1_HW0_TLS_LE: u32 = 81;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE: u32 = 82;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE: u32 = 83;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE: u32 = 84;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE: u32 = 85;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD: u32 = 86;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD: u32 = 87;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD: u32 = 88;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD: u32 = 89;
pub const R_TILEGX_IMM16_X0_HW0_TLS_IE: u32 = 92;
pub const R_TILEGX_IMM16_X1_HW0_TLS_IE: u32 = 93;
pub const R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL: u32 = 94;
pub const R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL: u32 = 95;
pub const R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL: u32 = 96;
pub const R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL: u32 = 97;
pub const R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL: u32 = 98;
pub const R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL: u32 = 99;
pub const R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE: u32 = 100;
pub const R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE: u32 = 101;
pub const R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE: u32 = 102;
pub const R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE: u32 = 103;
pub const R_TILEGX_TLS_DTPMOD64: u32 = 106;
pub const R_TILEGX_TLS_DTPOFF64: u32 = 107;
pub const R_TILEGX_TLS_TPOFF64: u32 = 108;
pub const R_TILEGX_TLS_DTPMOD32: u32 = 109;
pub const R_TILEGX_TLS_DTPOFF32: u32 = 110;
pub const R_TILEGX_TLS_TPOFF32: u32 = 111;
pub const R_TILEGX_TLS_GD_CALL: u32 = 112;
pub const R_TILEGX_IMM8_X0_TLS_GD_ADD: u32 = 113;
pub const R_TILEGX_IMM8_X1_TLS_GD_ADD: u32 = 114;
pub const R_TILEGX_IMM8_Y0_TLS_GD_ADD: u32 = 115;
pub const R_TILEGX_IMM8_Y1_TLS_GD_ADD: u32 = 116;
pub const R_TILEGX_TLS_IE_LOAD: u32 = 117;
pub const R_TILEGX_IMM8_X0_TLS_ADD: u32 = 118;
pub const R_TILEGX_IMM8_X1_TLS_ADD: u32 = 119;
pub const R_TILEGX_IMM8_Y0_TLS_ADD: u32 = 120;
pub const R_TILEGX_IMM8_Y1_TLS_ADD: u32 = 121;
pub const R_TILEGX_GNU_VTINHERIT: u32 = 128;
pub const R_TILEGX_GNU_VTENTRY: u32 = 129;
pub const R_TILEGX_NUM: u32 = 130;
pub const EF_RISCV_RVC: u32 = 1;
pub const EF_RISCV_FLOAT_ABI: u32 = 6;
pub const EF_RISCV_FLOAT_ABI_SOFT: u32 = 0;
pub const EF_RISCV_FLOAT_ABI_SINGLE: u32 = 2;
pub const EF_RISCV_FLOAT_ABI_DOUBLE: u32 = 4;
pub const EF_RISCV_FLOAT_ABI_QUAD: u32 = 6;
pub const EF_RISCV_RVE: u32 = 8;
pub const EF_RISCV_TSO: u32 = 16;
pub const R_RISCV_NONE: u32 = 0;
pub const R_RISCV_32: u32 = 1;
pub const R_RISCV_64: u32 = 2;
pub const R_RISCV_RELATIVE: u32 = 3;
pub const R_RISCV_COPY: u32 = 4;
pub const R_RISCV_JUMP_SLOT: u32 = 5;
pub const R_RISCV_TLS_DTPMOD32: u32 = 6;
pub const R_RISCV_TLS_DTPMOD64: u32 = 7;
pub const R_RISCV_TLS_DTPREL32: u32 = 8;
pub const R_RISCV_TLS_DTPREL64: u32 = 9;
pub const R_RISCV_TLS_TPREL32: u32 = 10;
pub const R_RISCV_TLS_TPREL64: u32 = 11;
pub const R_RISCV_BRANCH: u32 = 16;
pub const R_RISCV_JAL: u32 = 17;
pub const R_RISCV_CALL: u32 = 18;
pub const R_RISCV_CALL_PLT: u32 = 19;
pub const R_RISCV_GOT_HI20: u32 = 20;
pub const R_RISCV_TLS_GOT_HI20: u32 = 21;
pub const R_RISCV_TLS_GD_HI20: u32 = 22;
pub const R_RISCV_PCREL_HI20: u32 = 23;
pub const R_RISCV_PCREL_LO12_I: u32 = 24;
pub const R_RISCV_PCREL_LO12_S: u32 = 25;
pub const R_RISCV_HI20: u32 = 26;
pub const R_RISCV_LO12_I: u32 = 27;
pub const R_RISCV_LO12_S: u32 = 28;
pub const R_RISCV_TPREL_HI20: u32 = 29;
pub const R_RISCV_TPREL_LO12_I: u32 = 30;
pub const R_RISCV_TPREL_LO12_S: u32 = 31;
pub const R_RISCV_TPREL_ADD: u32 = 32;
pub const R_RISCV_ADD8: u32 = 33;
pub const R_RISCV_ADD16: u32 = 34;
pub const R_RISCV_ADD32: u32 = 35;
pub const R_RISCV_ADD64: u32 = 36;
pub const R_RISCV_SUB8: u32 = 37;
pub const R_RISCV_SUB16: u32 = 38;
pub const R_RISCV_SUB32: u32 = 39;
pub const R_RISCV_SUB64: u32 = 40;
pub const R_RISCV_GNU_VTINHERIT: u32 = 41;
pub const R_RISCV_GNU_VTENTRY: u32 = 42;
pub const R_RISCV_ALIGN: u32 = 43;
pub const R_RISCV_RVC_BRANCH: u32 = 44;
pub const R_RISCV_RVC_JUMP: u32 = 45;
pub const R_RISCV_RVC_LUI: u32 = 46;
pub const R_RISCV_GPREL_I: u32 = 47;
pub const R_RISCV_GPREL_S: u32 = 48;
pub const R_RISCV_TPREL_I: u32 = 49;
pub const R_RISCV_TPREL_S: u32 = 50;
pub const R_RISCV_RELAX: u32 = 51;
pub const R_RISCV_SUB6: u32 = 52;
pub const R_RISCV_SET6: u32 = 53;
pub const R_RISCV_SET8: u32 = 54;
pub const R_RISCV_SET16: u32 = 55;
pub const R_RISCV_SET32: u32 = 56;
pub const R_RISCV_32_PCREL: u32 = 57;
pub const R_RISCV_IRELATIVE: u32 = 58;
pub const R_RISCV_PLT32: u32 = 59;
pub const R_RISCV_SET_ULEB128: u32 = 60;
pub const R_RISCV_SUB_ULEB128: u32 = 61;
pub const R_RISCV_NUM: u32 = 62;
pub const STO_RISCV_VARIANT_CC: u32 = 128;
pub const SHT_RISCV_ATTRIBUTES: u32 = 1879048195;
pub const PT_RISCV_ATTRIBUTES: u32 = 1879048195;
pub const DT_RISCV_VARIANT_CC: u32 = 1879048193;
pub const R_BPF_NONE: u32 = 0;
pub const R_BPF_64_64: u32 = 1;
pub const R_BPF_64_32: u32 = 10;
pub const R_METAG_HIADDR16: u32 = 0;
pub const R_METAG_LOADDR16: u32 = 1;
pub const R_METAG_ADDR32: u32 = 2;
pub const R_METAG_NONE: u32 = 3;
pub const R_METAG_RELBRANCH: u32 = 4;
pub const R_METAG_GETSETOFF: u32 = 5;
pub const R_METAG_REG32OP1: u32 = 6;
pub const R_METAG_REG32OP2: u32 = 7;
pub const R_METAG_REG32OP3: u32 = 8;
pub const R_METAG_REG16OP1: u32 = 9;
pub const R_METAG_REG16OP2: u32 = 10;
pub const R_METAG_REG16OP3: u32 = 11;
pub const R_METAG_REG32OP4: u32 = 12;
pub const R_METAG_HIOG: u32 = 13;
pub const R_METAG_LOOG: u32 = 14;
pub const R_METAG_REL8: u32 = 15;
pub const R_METAG_REL16: u32 = 16;
pub const R_METAG_GNU_VTINHERIT: u32 = 30;
pub const R_METAG_GNU_VTENTRY: u32 = 31;
pub const R_METAG_HI16_GOTOFF: u32 = 32;
pub const R_METAG_LO16_GOTOFF: u32 = 33;
pub const R_METAG_GETSET_GOTOFF: u32 = 34;
pub const R_METAG_GETSET_GOT: u32 = 35;
pub const R_METAG_HI16_GOTPC: u32 = 36;
pub const R_METAG_LO16_GOTPC: u32 = 37;
pub const R_METAG_HI16_PLT: u32 = 38;
pub const R_METAG_LO16_PLT: u32 = 39;
pub const R_METAG_RELBRANCH_PLT: u32 = 40;
pub const R_METAG_GOTOFF: u32 = 41;
pub const R_METAG_PLT: u32 = 42;
pub const R_METAG_COPY: u32 = 43;
pub const R_METAG_JMP_SLOT: u32 = 44;
pub const R_METAG_RELATIVE: u32 = 45;
pub const R_METAG_GLOB_DAT: u32 = 46;
pub const R_METAG_TLS_GD: u32 = 47;
pub const R_METAG_TLS_LDM: u32 = 48;
pub const R_METAG_TLS_LDO_HI16: u32 = 49;
pub const R_METAG_TLS_LDO_LO16: u32 = 50;
pub const R_METAG_TLS_LDO: u32 = 51;
pub const R_METAG_TLS_IE: u32 = 52;
pub const R_METAG_TLS_IENONPIC: u32 = 53;
pub const R_METAG_TLS_IENONPIC_HI16: u32 = 54;
pub const R_METAG_TLS_IENONPIC_LO16: u32 = 55;
pub const R_METAG_TLS_TPOFF: u32 = 56;
pub const R_METAG_TLS_DTPMOD: u32 = 57;
pub const R_METAG_TLS_DTPOFF: u32 = 58;
pub const R_METAG_TLS_LE: u32 = 59;
pub const R_METAG_TLS_LE_HI16: u32 = 60;
pub const R_METAG_TLS_LE_LO16: u32 = 61;
pub const R_NDS32_NONE: u32 = 0;
pub const R_NDS32_32_RELA: u32 = 20;
pub const R_NDS32_COPY: u32 = 39;
pub const R_NDS32_GLOB_DAT: u32 = 40;
pub const R_NDS32_JMP_SLOT: u32 = 41;
pub const R_NDS32_RELATIVE: u32 = 42;
pub const R_NDS32_TLS_TPOFF: u32 = 102;
pub const R_NDS32_TLS_DESC: u32 = 119;
pub const EF_LARCH_ABI_MODIFIER_MASK: u32 = 7;
pub const EF_LARCH_ABI_SOFT_FLOAT: u32 = 1;
pub const EF_LARCH_ABI_SINGLE_FLOAT: u32 = 2;
pub const EF_LARCH_ABI_DOUBLE_FLOAT: u32 = 3;
pub const EF_LARCH_OBJABI_V1: u32 = 64;
pub const R_LARCH_NONE: u32 = 0;
pub const R_LARCH_32: u32 = 1;
pub const R_LARCH_64: u32 = 2;
pub const R_LARCH_RELATIVE: u32 = 3;
pub const R_LARCH_COPY: u32 = 4;
pub const R_LARCH_JUMP_SLOT: u32 = 5;
pub const R_LARCH_TLS_DTPMOD32: u32 = 6;
pub const R_LARCH_TLS_DTPMOD64: u32 = 7;
pub const R_LARCH_TLS_DTPREL32: u32 = 8;
pub const R_LARCH_TLS_DTPREL64: u32 = 9;
pub const R_LARCH_TLS_TPREL32: u32 = 10;
pub const R_LARCH_TLS_TPREL64: u32 = 11;
pub const R_LARCH_IRELATIVE: u32 = 12;
pub const R_LARCH_MARK_LA: u32 = 20;
pub const R_LARCH_MARK_PCREL: u32 = 21;
pub const R_LARCH_SOP_PUSH_PCREL: u32 = 22;
pub const R_LARCH_SOP_PUSH_ABSOLUTE: u32 = 23;
pub const R_LARCH_SOP_PUSH_DUP: u32 = 24;
pub const R_LARCH_SOP_PUSH_GPREL: u32 = 25;
pub const R_LARCH_SOP_PUSH_TLS_TPREL: u32 = 26;
pub const R_LARCH_SOP_PUSH_TLS_GOT: u32 = 27;
pub const R_LARCH_SOP_PUSH_TLS_GD: u32 = 28;
pub const R_LARCH_SOP_PUSH_PLT_PCREL: u32 = 29;
pub const R_LARCH_SOP_ASSERT: u32 = 30;
pub const R_LARCH_SOP_NOT: u32 = 31;
pub const R_LARCH_SOP_SUB: u32 = 32;
pub const R_LARCH_SOP_SL: u32 = 33;
pub const R_LARCH_SOP_SR: u32 = 34;
pub const R_LARCH_SOP_ADD: u32 = 35;
pub const R_LARCH_SOP_AND: u32 = 36;
pub const R_LARCH_SOP_IF_ELSE: u32 = 37;
pub const R_LARCH_SOP_POP_32_S_10_5: u32 = 38;
pub const R_LARCH_SOP_POP_32_U_10_12: u32 = 39;
pub const R_LARCH_SOP_POP_32_S_10_12: u32 = 40;
pub const R_LARCH_SOP_POP_32_S_10_16: u32 = 41;
pub const R_LARCH_SOP_POP_32_S_10_16_S2: u32 = 42;
pub const R_LARCH_SOP_POP_32_S_5_20: u32 = 43;
pub const R_LARCH_SOP_POP_32_S_0_5_10_16_S2: u32 = 44;
pub const R_LARCH_SOP_POP_32_S_0_10_10_16_S2: u32 = 45;
pub const R_LARCH_SOP_POP_32_U: u32 = 46;
pub const R_LARCH_ADD8: u32 = 47;
pub const R_LARCH_ADD16: u32 = 48;
pub const R_LARCH_ADD24: u32 = 49;
pub const R_LARCH_ADD32: u32 = 50;
pub const R_LARCH_ADD64: u32 = 51;
pub const R_LARCH_SUB8: u32 = 52;
pub const R_LARCH_SUB16: u32 = 53;
pub const R_LARCH_SUB24: u32 = 54;
pub const R_LARCH_SUB32: u32 = 55;
pub const R_LARCH_SUB64: u32 = 56;
pub const R_LARCH_GNU_VTINHERIT: u32 = 57;
pub const R_LARCH_GNU_VTENTRY: u32 = 58;
pub const R_LARCH_B16: u32 = 64;
pub const R_LARCH_B21: u32 = 65;
pub const R_LARCH_B26: u32 = 66;
pub const R_LARCH_ABS_HI20: u32 = 67;
pub const R_LARCH_ABS_LO12: u32 = 68;
pub const R_LARCH_ABS64_LO20: u32 = 69;
pub const R_LARCH_ABS64_HI12: u32 = 70;
pub const R_LARCH_PCALA_HI20: u32 = 71;
pub const R_LARCH_PCALA_LO12: u32 = 72;
pub const R_LARCH_PCALA64_LO20: u32 = 73;
pub const R_LARCH_PCALA64_HI12: u32 = 74;
pub const R_LARCH_GOT_PC_HI20: u32 = 75;
pub const R_LARCH_GOT_PC_LO12: u32 = 76;
pub const R_LARCH_GOT64_PC_LO20: u32 = 77;
pub const R_LARCH_GOT64_PC_HI12: u32 = 78;
pub const R_LARCH_GOT_HI20: u32 = 79;
pub const R_LARCH_GOT_LO12: u32 = 80;
pub const R_LARCH_GOT64_LO20: u32 = 81;
pub const R_LARCH_GOT64_HI12: u32 = 82;
pub const R_LARCH_TLS_LE_HI20: u32 = 83;
pub const R_LARCH_TLS_LE_LO12: u32 = 84;
pub const R_LARCH_TLS_LE64_LO20: u32 = 85;
pub const R_LARCH_TLS_LE64_HI12: u32 = 86;
pub const R_LARCH_TLS_IE_PC_HI20: u32 = 87;
pub const R_LARCH_TLS_IE_PC_LO12: u32 = 88;
pub const R_LARCH_TLS_IE64_PC_LO20: u32 = 89;
pub const R_LARCH_TLS_IE64_PC_HI12: u32 = 90;
pub const R_LARCH_TLS_IE_HI20: u32 = 91;
pub const R_LARCH_TLS_IE_LO12: u32 = 92;
pub const R_LARCH_TLS_IE64_LO20: u32 = 93;
pub const R_LARCH_TLS_IE64_HI12: u32 = 94;
pub const R_LARCH_TLS_LD_PC_HI20: u32 = 95;
pub const R_LARCH_TLS_LD_HI20: u32 = 96;
pub const R_LARCH_TLS_GD_PC_HI20: u32 = 97;
pub const R_LARCH_TLS_GD_HI20: u32 = 98;
pub const R_LARCH_32_PCREL: u32 = 99;
pub const R_LARCH_RELAX: u32 = 100;
pub const EF_ARC_MACH_MSK: u32 = 255;
pub const EF_ARC_OSABI_MSK: u32 = 3840;
pub const EF_ARC_ALL_MSK: u32 = 4095;
pub const SHT_ARC_ATTRIBUTES: u32 = 1879048193;
pub const R_ARC_NONE: u32 = 0;
pub const R_ARC_8: u32 = 1;
pub const R_ARC_16: u32 = 2;
pub const R_ARC_24: u32 = 3;
pub const R_ARC_32: u32 = 4;
pub const R_ARC_B22_PCREL: u32 = 6;
pub const R_ARC_H30: u32 = 7;
pub const R_ARC_N8: u32 = 8;
pub const R_ARC_N16: u32 = 9;
pub const R_ARC_N24: u32 = 10;
pub const R_ARC_N32: u32 = 11;
pub const R_ARC_SDA: u32 = 12;
pub const R_ARC_SECTOFF: u32 = 13;
pub const R_ARC_S21H_PCREL: u32 = 14;
pub const R_ARC_S21W_PCREL: u32 = 15;
pub const R_ARC_S25H_PCREL: u32 = 16;
pub const R_ARC_S25W_PCREL: u32 = 17;
pub const R_ARC_SDA32: u32 = 18;
pub const R_ARC_SDA_LDST: u32 = 19;
pub const R_ARC_SDA_LDST1: u32 = 20;
pub const R_ARC_SDA_LDST2: u32 = 21;
pub const R_ARC_SDA16_LD: u32 = 22;
pub const R_ARC_SDA16_LD1: u32 = 23;
pub const R_ARC_SDA16_LD2: u32 = 24;
pub const R_ARC_S13_PCREL: u32 = 25;
pub const R_ARC_W: u32 = 26;
pub const R_ARC_32_ME: u32 = 27;
pub const R_ARC_N32_ME: u32 = 28;
pub const R_ARC_SECTOFF_ME: u32 = 29;
pub const R_ARC_SDA32_ME: u32 = 30;
pub const R_ARC_W_ME: u32 = 31;
pub const R_ARC_H30_ME: u32 = 32;
pub const R_ARC_SECTOFF_U8: u32 = 33;
pub const R_ARC_SECTOFF_S9: u32 = 34;
pub const R_AC_SECTOFF_U8: u32 = 35;
pub const R_AC_SECTOFF_U8_1: u32 = 36;
pub const R_AC_SECTOFF_U8_2: u32 = 37;
pub const R_AC_SECTOFF_S9: u32 = 38;
pub const R_AC_SECTOFF_S9_1: u32 = 39;
pub const R_AC_SECTOFF_S9_2: u32 = 40;
pub const R_ARC_SECTOFF_ME_1: u32 = 41;
pub const R_ARC_SECTOFF_ME_2: u32 = 42;
pub const R_ARC_SECTOFF_1: u32 = 43;
pub const R_ARC_SECTOFF_2: u32 = 44;
pub const R_ARC_SDA_12: u32 = 45;
pub const R_ARC_SDA16_ST2: u32 = 48;
pub const R_ARC_32_PCREL: u32 = 49;
pub const R_ARC_PC32: u32 = 50;
pub const R_ARC_GOTPC32: u32 = 51;
pub const R_ARC_PLT32: u32 = 52;
pub const R_ARC_COPY: u32 = 53;
pub const R_ARC_GLOB_DAT: u32 = 54;
pub const R_ARC_JMP_SLOT: u32 = 55;
pub const R_ARC_RELATIVE: u32 = 56;
pub const R_ARC_GOTOFF: u32 = 57;
pub const R_ARC_GOTPC: u32 = 58;
pub const R_ARC_GOT32: u32 = 59;
pub const R_ARC_S21W_PCREL_PLT: u32 = 60;
pub const R_ARC_S25H_PCREL_PLT: u32 = 61;
pub const R_ARC_JLI_SECTOFF: u32 = 63;
pub const R_ARC_TLS_DTPMOD: u32 = 66;
pub const R_ARC_TLS_DTPOFF: u32 = 67;
pub const R_ARC_TLS_TPOFF: u32 = 68;
pub const R_ARC_TLS_GD_GOT: u32 = 69;
pub const R_ARC_TLS_GD_LD: u32 = 70;
pub const R_ARC_TLS_GD_CALL: u32 = 71;
pub const R_ARC_TLS_IE_GOT: u32 = 72;
pub const R_ARC_TLS_DTPOFF_S9: u32 = 73;
pub const R_ARC_TLS_LE_S9: u32 = 74;
pub const R_ARC_TLS_LE_32: u32 = 75;
pub const R_ARC_S25W_PCREL_PLT: u32 = 76;
pub const R_ARC_S21H_PCREL_PLT: u32 = 77;
pub const R_ARC_NPS_CMEM16: u32 = 78;
pub const R_OR1K_NONE: u32 = 0;
pub const R_OR1K_32: u32 = 1;
pub const R_OR1K_16: u32 = 2;
pub const R_OR1K_8: u32 = 3;
pub const R_OR1K_LO_16_IN_INSN: u32 = 4;
pub const R_OR1K_HI_16_IN_INSN: u32 = 5;
pub const R_OR1K_INSN_REL_26: u32 = 6;
pub const R_OR1K_GNU_VTENTRY: u32 = 7;
pub const R_OR1K_GNU_VTINHERIT: u32 = 8;
pub const R_OR1K_32_PCREL: u32 = 9;
pub const R_OR1K_16_PCREL: u32 = 10;
pub const R_OR1K_8_PCREL: u32 = 11;
pub const R_OR1K_GOTPC_HI16: u32 = 12;
pub const R_OR1K_GOTPC_LO16: u32 = 13;
pub const R_OR1K_GOT16: u32 = 14;
pub const R_OR1K_PLT26: u32 = 15;
pub const R_OR1K_GOTOFF_HI16: u32 = 16;
pub const R_OR1K_GOTOFF_LO16: u32 = 17;
pub const R_OR1K_COPY: u32 = 18;
pub const R_OR1K_GLOB_DAT: u32 = 19;
pub const R_OR1K_JMP_SLOT: u32 = 20;
pub const R_OR1K_RELATIVE: u32 = 21;
pub const R_OR1K_TLS_GD_HI16: u32 = 22;
pub const R_OR1K_TLS_GD_LO16: u32 = 23;
pub const R_OR1K_TLS_LDM_HI16: u32 = 24;
pub const R_OR1K_TLS_LDM_LO16: u32 = 25;
pub const R_OR1K_TLS_LDO_HI16: u32 = 26;
pub const R_OR1K_TLS_LDO_LO16: u32 = 27;
pub const R_OR1K_TLS_IE_HI16: u32 = 28;
pub const R_OR1K_TLS_IE_LO16: u32 = 29;
pub const R_OR1K_TLS_LE_HI16: u32 = 30;
pub const R_OR1K_TLS_LE_LO16: u32 = 31;
pub const R_OR1K_TLS_TPOFF: u32 = 32;
pub const R_OR1K_TLS_DTPOFF: u32 = 33;
pub const R_OR1K_TLS_DTPMOD: u32 = 34;
pub const _ENVZ_H: u32 = 1;
pub const _ERR_H: u32 = 1;
pub const _ERROR_H: u32 = 1;
pub const _EXECINFO_H: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_DIRECTORY: u32 = 16384;
pub const __O_NOFOLLOW: u32 = 32768;
pub const __O_DIRECT: u32 = 65536;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4210688;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 16384;
pub const O_NOFOLLOW: u32 = 32768;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _FSTAB_H: u32 = 1;
pub const _PATH_FSTAB: &[u8; 11] = b"/etc/fstab\0";
pub const FSTAB: &[u8; 11] = b"/etc/fstab\0";
pub const FSTAB_RW: &[u8; 3] = b"rw\0";
pub const FSTAB_RQ: &[u8; 3] = b"rq\0";
pub const FSTAB_RO: &[u8; 3] = b"ro\0";
pub const FSTAB_SW: &[u8; 3] = b"sw\0";
pub const FSTAB_XX: &[u8; 3] = b"xx\0";
pub const _FTS_H: u32 = 1;
pub const FTS_COMFOLLOW: u32 = 1;
pub const FTS_LOGICAL: u32 = 2;
pub const FTS_NOCHDIR: u32 = 4;
pub const FTS_NOSTAT: u32 = 8;
pub const FTS_PHYSICAL: u32 = 16;
pub const FTS_SEEDOT: u32 = 32;
pub const FTS_XDEV: u32 = 64;
pub const FTS_WHITEOUT: u32 = 128;
pub const FTS_OPTIONMASK: u32 = 255;
pub const FTS_NAMEONLY: u32 = 256;
pub const FTS_STOP: u32 = 512;
pub const FTS_ROOTPARENTLEVEL: i32 = -1;
pub const FTS_ROOTLEVEL: u32 = 0;
pub const FTS_D: u32 = 1;
pub const FTS_DC: u32 = 2;
pub const FTS_DEFAULT: u32 = 3;
pub const FTS_DNR: u32 = 4;
pub const FTS_DOT: u32 = 5;
pub const FTS_DP: u32 = 6;
pub const FTS_ERR: u32 = 7;
pub const FTS_F: u32 = 8;
pub const FTS_INIT: u32 = 9;
pub const FTS_NS: u32 = 10;
pub const FTS_NSOK: u32 = 11;
pub const FTS_SL: u32 = 12;
pub const FTS_SLNONE: u32 = 13;
pub const FTS_W: u32 = 14;
pub const FTS_DONTCHDIR: u32 = 1;
pub const FTS_SYMFOLLOW: u32 = 2;
pub const FTS_AGAIN: u32 = 1;
pub const FTS_FOLLOW: u32 = 2;
pub const FTS_NOINSTR: u32 = 3;
pub const FTS_SKIP: u32 = 4;
pub const _FTW_H: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const INVALID_HANDLE: i32 = -1;
pub const gawk_api_major_version: u32 = 3;
pub const gawk_api_minor_version: u32 = 2;
pub const DO_FLAGS_SIZE: u32 = 6;
pub const gawk_do_lint: u32 = 0;
pub const gawk_do_traditional: u32 = 1;
pub const gawk_do_profile: u32 = 2;
pub const gawk_do_sandbox: u32 = 3;
pub const gawk_do_debug: u32 = 4;
pub const gawk_do_mpfr: u32 = 5;
pub const _GCONV_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const _GLOB_H: u32 = 1;
pub const GLOB_ERR: u32 = 1;
pub const GLOB_MARK: u32 = 2;
pub const GLOB_NOSORT: u32 = 4;
pub const GLOB_DOOFFS: u32 = 8;
pub const GLOB_NOCHECK: u32 = 16;
pub const GLOB_APPEND: u32 = 32;
pub const GLOB_NOESCAPE: u32 = 64;
pub const GLOB_PERIOD: u32 = 128;
pub const GLOB_MAGCHAR: u32 = 256;
pub const GLOB_ALTDIRFUNC: u32 = 512;
pub const GLOB_BRACE: u32 = 1024;
pub const GLOB_NOMAGIC: u32 = 2048;
pub const GLOB_TILDE: u32 = 4096;
pub const GLOB_ONLYDIR: u32 = 8192;
pub const GLOB_TILDE_CHECK: u32 = 16384;
pub const __GLOB_FLAGS: u32 = 32511;
pub const GLOB_NOSPACE: u32 = 1;
pub const GLOB_ABORTED: u32 = 2;
pub const GLOB_NOMATCH: u32 = 3;
pub const GLOB_NOSYS: u32 = 4;
pub const _GNU_VERSIONS_H: u32 = 1;
pub const _GNU_OBSTACK_INTERFACE_VERSION: u32 = 1;
pub const _GNU_REGEX_INTERFACE_VERSION: u32 = 1;
pub const _GNU_GLOB_INTERFACE_VERSION: u32 = 2;
pub const _GNU_GETOPT_INTERFACE_VERSION: u32 = 2;
pub const GMK_FUNC_DEFAULT: u32 = 0;
pub const GMK_FUNC_NOEXPAND: u32 = 1;
pub const _GRP_H: u32 = 1;
pub const NSS_BUFLEN_GROUP: u32 = 1024;
pub const _GSHADOW_H: u32 = 1;
pub const _PATH_DEFPATH: &[u8; 14] = b"/usr/bin:/bin\0";
pub const _PATH_STDPATH: &[u8; 30] = b"/usr/bin:/bin:/usr/sbin:/sbin\0";
pub const _PATH_BSHELL: &[u8; 8] = b"/bin/sh\0";
pub const _PATH_CONSOLE: &[u8; 13] = b"/dev/console\0";
pub const _PATH_CSHELL: &[u8; 9] = b"/bin/csh\0";
pub const _PATH_DEVDB: &[u8; 16] = b"/var/run/dev.db\0";
pub const _PATH_DEVNULL: &[u8; 10] = b"/dev/null\0";
pub const _PATH_DRUM: &[u8; 10] = b"/dev/drum\0";
pub const _PATH_GSHADOW: &[u8; 13] = b"/etc/gshadow\0";
pub const _PATH_KLOG: &[u8; 11] = b"/proc/kmsg\0";
pub const _PATH_KMEM: &[u8; 10] = b"/dev/kmem\0";
pub const _PATH_LASTLOG: &[u8; 17] = b"/var/log/lastlog\0";
pub const _PATH_MAILDIR: &[u8; 10] = b"/var/mail\0";
pub const _PATH_MAN: &[u8; 15] = b"/usr/share/man\0";
pub const _PATH_MEM: &[u8; 9] = b"/dev/mem\0";
pub const _PATH_MNTTAB: &[u8; 11] = b"/etc/fstab\0";
pub const _PATH_MOUNTED: &[u8; 10] = b"/etc/mtab\0";
pub const _PATH_NOLOGIN: &[u8; 13] = b"/etc/nologin\0";
pub const _PATH_PRESERVE: &[u8; 9] = b"/var/lib\0";
pub const _PATH_RWHODIR: &[u8; 16] = b"/var/spool/rwho\0";
pub const _PATH_SENDMAIL: &[u8; 19] = b"/usr/sbin/sendmail\0";
pub const _PATH_SHADOW: &[u8; 12] = b"/etc/shadow\0";
pub const _PATH_SHELLS: &[u8; 12] = b"/etc/shells\0";
pub const _PATH_TTY: &[u8; 9] = b"/dev/tty\0";
pub const _PATH_UNIX: &[u8; 14] = b"/boot/vmlinux\0";
pub const _PATH_UTMP: &[u8; 14] = b"/var/run/utmp\0";
pub const _PATH_VI: &[u8; 12] = b"/usr/bin/vi\0";
pub const _PATH_WTMP: &[u8; 14] = b"/var/log/wtmp\0";
pub const _PATH_DEV: &[u8; 6] = b"/dev/\0";
pub const _PATH_TMP: &[u8; 6] = b"/tmp/\0";
pub const _PATH_VARDB: &[u8; 15] = b"/var/lib/misc/\0";
pub const _PATH_VARRUN: &[u8; 10] = b"/var/run/\0";
pub const _PATH_VARTMP: &[u8; 10] = b"/var/tmp/\0";
pub const GSHADOW: &[u8; 13] = b"/etc/gshadow\0";
pub const _ICONV_H: u32 = 1;
pub const _IFADDRS_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _LANGINFO_H: u32 = 1;
pub const _NL_TYPES_H: u32 = 1;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const _UTMP_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const UT_LINESIZE: u32 = 32;
pub const UT_NAMESIZE: u32 = 32;
pub const UT_HOSTSIZE: u32 = 256;
pub const EMPTY: u32 = 0;
pub const RUN_LVL: u32 = 1;
pub const BOOT_TIME: u32 = 2;
pub const NEW_TIME: u32 = 3;
pub const OLD_TIME: u32 = 4;
pub const INIT_PROCESS: u32 = 5;
pub const LOGIN_PROCESS: u32 = 6;
pub const USER_PROCESS: u32 = 7;
pub const DEAD_PROCESS: u32 = 8;
pub const ACCOUNTING: u32 = 9;
pub const UT_UNKNOWN: u32 = 0;
pub const _HAVE_UT_TYPE: u32 = 1;
pub const _HAVE_UT_PID: u32 = 1;
pub const _HAVE_UT_ID: u32 = 1;
pub const _HAVE_UT_TV: u32 = 1;
pub const _HAVE_UT_HOST: u32 = 1;
pub const UTMP_FILE: &[u8; 14] = b"/var/run/utmp\0";
pub const UTMP_FILENAME: &[u8; 14] = b"/var/run/utmp\0";
pub const WTMP_FILE: &[u8; 14] = b"/var/log/wtmp\0";
pub const WTMP_FILENAME: &[u8; 14] = b"/var/log/wtmp\0";
pub const _LIBGEN_H: u32 = 1;
pub const _LIBINTL_H: u32 = 1;
pub const __USE_GNU_GETTEXT: u32 = 1;
pub const _LINK_H: u32 = 1;
pub const __ELF_NATIVE_CLASS: u32 = 64;
pub const _LOCALE_H: u32 = 1;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _MALLOC_H: u32 = 1;
pub const M_MXFAST: u32 = 1;
pub const M_NLBLKS: u32 = 2;
pub const M_GRAIN: u32 = 3;
pub const M_KEEP: u32 = 4;
pub const M_TRIM_THRESHOLD: i32 = -1;
pub const M_TOP_PAD: i32 = -2;
pub const M_MMAP_THRESHOLD: i32 = -3;
pub const M_MMAP_MAX: i32 = -4;
pub const M_CHECK_ACTION: i32 = -5;
pub const M_PERTURB: i32 = -6;
pub const M_ARENA_TEST: i32 = -7;
pub const M_ARENA_MAX: i32 = -8;
pub const _MCHECK_H: u32 = 1;
pub const _MEMORY_H: u32 = 1;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 6;
pub const NCURSES_VERSION_MINOR: u32 = 4;
pub const NCURSES_VERSION_PATCH: u32 = 20230625;
pub const NCURSES_VERSION: &[u8; 4] = b"6.4\0";
pub const NCURSES_MOUSE_VERSION: u32 = 2;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 0;
pub const NCURSES_OPAQUE_FORM: u32 = 0;
pub const NCURSES_OPAQUE_MENU: u32 = 0;
pub const NCURSES_OPAQUE_PANEL: u32 = 0;
pub const NCURSES_WATTR_MACROS: u32 = 0;
pub const NCURSES_REENTRANT: u32 = 0;
pub const NCURSES_INTEROP_FUNCS: u32 = 1;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_WCWIDTH_GRAPHICS: u32 = 1;
pub const NCURSES_WIDECHAR: u32 = 0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const NCURSES_EXT_FUNCS: u32 = 20230625;
pub const NCURSES_XNAMES: u32 = 1;
pub const NCURSES_SP_FUNCS: u32 = 20230625;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_MAX: u32 = 511;
pub const _XOPEN_CURSES: u32 = 1;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const NCURSES_ETI_H_incl: u32 = 1;
pub const E_OK: u32 = 0;
pub const E_SYSTEM_ERROR: i32 = -1;
pub const E_BAD_ARGUMENT: i32 = -2;
pub const E_POSTED: i32 = -3;
pub const E_CONNECTED: i32 = -4;
pub const E_BAD_STATE: i32 = -5;
pub const E_NO_ROOM: i32 = -6;
pub const E_NOT_POSTED: i32 = -7;
pub const E_UNKNOWN_COMMAND: i32 = -8;
pub const E_NO_MATCH: i32 = -9;
pub const E_NOT_SELECTABLE: i32 = -10;
pub const E_NOT_CONNECTED: i32 = -11;
pub const E_REQUEST_DENIED: i32 = -12;
pub const E_INVALID_FIELD: i32 = -13;
pub const E_CURRENT: i32 = -14;
pub const O_ONEVALUE: u32 = 1;
pub const O_SHOWDESC: u32 = 2;
pub const O_ROWMAJOR: u32 = 4;
pub const O_IGNORECASE: u32 = 8;
pub const O_SHOWMATCH: u32 = 16;
pub const O_NONCYCLIC: u32 = 32;
pub const O_MOUSE_MENU: u32 = 64;
pub const O_SELECTABLE: u32 = 1;
pub const REQ_LEFT_ITEM: u32 = 512;
pub const REQ_RIGHT_ITEM: u32 = 513;
pub const REQ_UP_ITEM: u32 = 514;
pub const REQ_DOWN_ITEM: u32 = 515;
pub const REQ_SCR_ULINE: u32 = 516;
pub const REQ_SCR_DLINE: u32 = 517;
pub const REQ_SCR_DPAGE: u32 = 518;
pub const REQ_SCR_UPAGE: u32 = 519;
pub const REQ_FIRST_ITEM: u32 = 520;
pub const REQ_LAST_ITEM: u32 = 521;
pub const REQ_NEXT_ITEM: u32 = 522;
pub const REQ_PREV_ITEM: u32 = 523;
pub const REQ_TOGGLE_ITEM: u32 = 524;
pub const REQ_CLEAR_PATTERN: u32 = 525;
pub const REQ_BACK_PATTERN: u32 = 526;
pub const REQ_NEXT_MATCH: u32 = 527;
pub const REQ_PREV_MATCH: u32 = 528;
pub const MIN_MENU_COMMAND: u32 = 512;
pub const MAX_MENU_COMMAND: u32 = 528;
pub const MAX_COMMAND: u32 = 639;
pub const _MNTENT_H: u32 = 1;
pub const MNTTAB: &[u8; 11] = b"/etc/fstab\0";
pub const MOUNTED: &[u8; 10] = b"/etc/mtab\0";
pub const MNTTYPE_IGNORE: &[u8; 7] = b"ignore\0";
pub const MNTTYPE_NFS: &[u8; 4] = b"nfs\0";
pub const MNTTYPE_SWAP: &[u8; 5] = b"swap\0";
pub const MNTOPT_DEFAULTS: &[u8; 9] = b"defaults\0";
pub const MNTOPT_RO: &[u8; 3] = b"ro\0";
pub const MNTOPT_RW: &[u8; 3] = b"rw\0";
pub const MNTOPT_SUID: &[u8; 5] = b"suid\0";
pub const MNTOPT_NOSUID: &[u8; 7] = b"nosuid\0";
pub const MNTOPT_NOAUTO: &[u8; 7] = b"noauto\0";
pub const _MONETARY_H: u32 = 1;
pub const _MQUEUE_H: u32 = 1;
pub const _NSS_H: u32 = 1;
pub const _OBSTACK_H: u32 = 1;
pub const NCURSES_PANEL_H_incl: u32 = 1;
pub const _SYS_POLL_H: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRNORM: u32 = 256;
pub const POLLWRBAND: u32 = 512;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const _PRINTF_H: u32 = 1;
pub const PA_FLAG_MASK: u32 = 65280;
pub const PA_FLAG_LONG_LONG: u32 = 256;
pub const PA_FLAG_LONG_DOUBLE: u32 = 256;
pub const PA_FLAG_LONG: u32 = 512;
pub const PA_FLAG_SHORT: u32 = 1024;
pub const PA_FLAG_PTR: u32 = 2048;
pub const _PROC_SERVICE_H: u32 = 1;
pub const _SYS_PROCFS_H: u32 = 1;
pub const _SYS_USER_H: u32 = 1;
pub const ELF_PRARGSZ: u32 = 80;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _PTY_H: u32 = 1;
pub const _TERMIOS_H: u32 = 1;
pub const NCCS: u32 = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: u32 = 1;
pub const _HAVE_STRUCT_TERMIOS_C_OSPEED: u32 = 1;
pub const VINTR: u32 = 0;
pub const VQUIT: u32 = 1;
pub const VERASE: u32 = 2;
pub const VKILL: u32 = 3;
pub const VEOF: u32 = 4;
pub const VTIME: u32 = 5;
pub const VMIN: u32 = 6;
pub const VSWTC: u32 = 7;
pub const VSTART: u32 = 8;
pub const VSTOP: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VEOL: u32 = 11;
pub const VREPRINT: u32 = 12;
pub const VDISCARD: u32 = 13;
pub const VWERASE: u32 = 14;
pub const VLNEXT: u32 = 15;
pub const VEOL2: u32 = 16;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IUCLC: u32 = 512;
pub const IXON: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IXOFF: u32 = 4096;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const OLCUC: u32 = 2;
pub const ONLCR: u32 = 4;
pub const OCRNL: u32 = 8;
pub const ONOCR: u32 = 16;
pub const ONLRET: u32 = 32;
pub const OFILL: u32 = 64;
pub const OFDEL: u32 = 128;
pub const NLDLY: u32 = 256;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const CRDLY: u32 = 1536;
pub const CR0: u32 = 0;
pub const CR1: u32 = 512;
pub const CR2: u32 = 1024;
pub const CR3: u32 = 1536;
pub const TABDLY: u32 = 6144;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 2048;
pub const TAB2: u32 = 4096;
pub const TAB3: u32 = 6144;
pub const BSDLY: u32 = 8192;
pub const BS0: u32 = 0;
pub const BS1: u32 = 8192;
pub const FFDLY: u32 = 32768;
pub const FF0: u32 = 0;
pub const FF1: u32 = 32768;
pub const VTDLY: u32 = 16384;
pub const VT0: u32 = 0;
pub const VT1: u32 = 16384;
pub const XTABS: u32 = 6144;
pub const B0: u32 = 0;
pub const B50: u32 = 1;
pub const B75: u32 = 2;
pub const B110: u32 = 3;
pub const B134: u32 = 4;
pub const B150: u32 = 5;
pub const B200: u32 = 6;
pub const B300: u32 = 7;
pub const B600: u32 = 8;
pub const B1200: u32 = 9;
pub const B1800: u32 = 10;
pub const B2400: u32 = 11;
pub const B4800: u32 = 12;
pub const B9600: u32 = 13;
pub const B19200: u32 = 14;
pub const B38400: u32 = 15;
pub const EXTA: u32 = 14;
pub const EXTB: u32 = 15;
pub const CBAUD: u32 = 4111;
pub const CBAUDEX: u32 = 4096;
pub const CIBAUD: u32 = 269418496;
pub const CMSPAR: u32 = 1073741824;
pub const CRTSCTS: u32 = 2147483648;
pub const B57600: u32 = 4097;
pub const B115200: u32 = 4098;
pub const B230400: u32 = 4099;
pub const B460800: u32 = 4100;
pub const B500000: u32 = 4101;
pub const B576000: u32 = 4102;
pub const B921600: u32 = 4103;
pub const B1000000: u32 = 4104;
pub const B1152000: u32 = 4105;
pub const B1500000: u32 = 4106;
pub const B2000000: u32 = 4107;
pub const B2500000: u32 = 4108;
pub const B3000000: u32 = 4109;
pub const B3500000: u32 = 4110;
pub const B4000000: u32 = 4111;
pub const __MAX_BAUD: u32 = 4111;
pub const CSIZE: u32 = 48;
pub const CS5: u32 = 0;
pub const CS6: u32 = 16;
pub const CS7: u32 = 32;
pub const CS8: u32 = 48;
pub const CSTOPB: u32 = 64;
pub const CREAD: u32 = 128;
pub const PARENB: u32 = 256;
pub const PARODD: u32 = 512;
pub const HUPCL: u32 = 1024;
pub const CLOCAL: u32 = 2048;
pub const ADDRB: u32 = 536870912;
pub const ISIG: u32 = 1;
pub const ICANON: u32 = 2;
pub const XCASE: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHOE: u32 = 16;
pub const ECHOK: u32 = 32;
pub const ECHONL: u32 = 64;
pub const NOFLSH: u32 = 128;
pub const TOSTOP: u32 = 256;
pub const ECHOCTL: u32 = 512;
pub const ECHOPRT: u32 = 1024;
pub const ECHOKE: u32 = 2048;
pub const FLUSHO: u32 = 4096;
pub const PENDIN: u32 = 16384;
pub const IEXTEN: u32 = 32768;
pub const EXTPROC: u32 = 65536;
pub const TIOCSER_TEMT: u32 = 1;
pub const TCOOFF: u32 = 0;
pub const TCOON: u32 = 1;
pub const TCIOFF: u32 = 2;
pub const TCION: u32 = 3;
pub const TCIFLUSH: u32 = 0;
pub const TCOFLUSH: u32 = 1;
pub const TCIOFLUSH: u32 = 2;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TTYDEF_IFLAG: u32 = 11554;
pub const TTYDEF_OFLAG: u32 = 6149;
pub const TTYDEF_LFLAG: u32 = 35355;
pub const TTYDEF_CFLAG: u32 = 1440;
pub const TTYDEF_SPEED: u32 = 13;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const _SYS_IOCTL_H: u32 = 1;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const FIOQSIZE: u32 = 21600;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const _PWD_H: u32 = 1;
pub const NSS_BUFLEN_PASSWD: u32 = 1024;
pub const _RE_COMP_H: u32 = 1;
pub const _REGEX_H: u32 = 1;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NEWLINE: u32 = 4;
pub const REG_NOSUB: u32 = 8;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const _SYS_PARAM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FPSIMD_MAGIC: u32 = 1179680769;
pub const ESR_MAGIC: u32 = 1163088385;
pub const EXTRA_MAGIC: u32 = 1163416577;
pub const SVE_MAGIC: u32 = 1398162689;
pub const SVE_SIG_FLAG_SM: u32 = 1;
pub const TPIDR2_MAGIC: u32 = 1414547714;
pub const ZA_MAGIC: u32 = 1412850501;
pub const ZT_MAGIC: u32 = 1515474433;
pub const __SVE_VQ_BYTES: u32 = 16;
pub const __SVE_VQ_MIN: u32 = 1;
pub const __SVE_VQ_MAX: u32 = 512;
pub const __SVE_VL_MIN: u32 = 16;
pub const __SVE_VL_MAX: u32 = 8192;
pub const __SVE_NUM_ZREGS: u32 = 32;
pub const __SVE_NUM_PREGS: u32 = 16;
pub const __SVE_ZREGS_OFFSET: u32 = 0;
pub const SVE_VQ_BYTES: u32 = 16;
pub const SVE_VQ_MIN: u32 = 1;
pub const SVE_VQ_MAX: u32 = 512;
pub const SVE_VL_MIN: u32 = 16;
pub const SVE_VL_MAX: u32 = 8192;
pub const SVE_NUM_ZREGS: u32 = 32;
pub const SVE_NUM_PREGS: u32 = 16;
pub const ZT_SIG_REG_SIZE: u32 = 512;
pub const ZT_SIG_REG_BYTES: u32 = 64;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 5120;
pub const SIGSTKSZ: u32 = 16384;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const EXEC_PAGESIZE: u32 = 65536;
pub const HZ: u32 = 100;
pub const NOGROUP: i32 = -1;
pub const MAXHOSTNAMELEN: u32 = 64;
pub const MAXSYMLINKS: u32 = 20;
pub const NOFILE: u32 = 256;
pub const NCARGS: u32 = 131072;
pub const NGROUPS: u32 = 65536;
pub const CANBSIZ: u32 = 255;
pub const MAXPATHLEN: u32 = 4096;
pub const DEV_BSIZE: u32 = 512;
pub const _NETINET_IN_H: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const IP_LOCAL_PORT_RANGE: u32 = 51;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const NS_PACKETSZ: u32 = 512;
pub const NS_MAXDNAME: u32 = 1025;
pub const NS_MAXMSG: u32 = 65535;
pub const NS_MAXCDNAME: u32 = 255;
pub const NS_MAXLABEL: u32 = 63;
pub const NS_HFIXEDSZ: u32 = 12;
pub const NS_QFIXEDSZ: u32 = 4;
pub const NS_RRFIXEDSZ: u32 = 10;
pub const NS_INT32SZ: u32 = 4;
pub const NS_INT16SZ: u32 = 2;
pub const NS_INT8SZ: u32 = 1;
pub const NS_INADDRSZ: u32 = 4;
pub const NS_IN6ADDRSZ: u32 = 16;
pub const NS_CMPRSFLGS: u32 = 192;
pub const NS_DEFAULTPORT: u32 = 53;
pub const NS_TSIG_FUDGE: u32 = 300;
pub const NS_TSIG_TCP_COUNT: u32 = 100;
pub const NS_TSIG_ALG_HMAC_MD5: &[u8; 25] = b"HMAC-MD5.SIG-ALG.REG.INT\0";
pub const NS_TSIG_ERROR_NO_TSIG: i32 = -10;
pub const NS_TSIG_ERROR_NO_SPACE: i32 = -11;
pub const NS_TSIG_ERROR_FORMERR: i32 = -12;
pub const NS_OPT_DNSSEC_OK: u32 = 32768;
pub const NS_OPT_NSID: u32 = 3;
pub const PACKETSZ: u32 = 512;
pub const MAXDNAME: u32 = 1025;
pub const MAXCDNAME: u32 = 255;
pub const MAXLABEL: u32 = 63;
pub const HFIXEDSZ: u32 = 12;
pub const QFIXEDSZ: u32 = 4;
pub const RRFIXEDSZ: u32 = 10;
pub const INT32SZ: u32 = 4;
pub const INT16SZ: u32 = 2;
pub const INT8SZ: u32 = 1;
pub const INADDRSZ: u32 = 4;
pub const IN6ADDRSZ: u32 = 16;
pub const INDIR_MASK: u32 = 192;
pub const NAMESERVER_PORT: u32 = 53;
pub const __res_state_defined: u32 = 1;
pub const MAXNS: u32 = 3;
pub const MAXDFLSRCH: u32 = 3;
pub const MAXDNSRCH: u32 = 6;
pub const MAXRESOLVSORT: u32 = 10;
pub const LOCALDOMAINPARTS: u32 = 2;
pub const RES_TIMEOUT: u32 = 5;
pub const RES_MAXNDOTS: u32 = 15;
pub const RES_MAXRETRANS: u32 = 30;
pub const RES_MAXRETRY: u32 = 5;
pub const RES_DFLRETRY: u32 = 2;
pub const RES_MAXTIME: u32 = 65535;
pub const __RES: u32 = 19991006;
pub const _PATH_RESCONF: &[u8; 17] = b"/etc/resolv.conf\0";
pub const RES_INIT: u32 = 1;
pub const RES_DEBUG: u32 = 2;
pub const RES_USEVC: u32 = 8;
pub const RES_IGNTC: u32 = 32;
pub const RES_RECURSE: u32 = 64;
pub const RES_DEFNAMES: u32 = 128;
pub const RES_STAYOPEN: u32 = 256;
pub const RES_DNSRCH: u32 = 512;
pub const RES_NOALIASES: u32 = 4096;
pub const RES_ROTATE: u32 = 16384;
pub const RES_USE_EDNS0: u32 = 1048576;
pub const RES_SNGLKUP: u32 = 2097152;
pub const RES_SNGLKUPREOP: u32 = 4194304;
pub const RES_USE_DNSSEC: u32 = 8388608;
pub const RES_NOTLDQUERY: u32 = 16777216;
pub const RES_NORELOAD: u32 = 33554432;
pub const RES_TRUSTAD: u32 = 67108864;
pub const RES_NOAAAA: u32 = 134217728;
pub const RES_DEFAULT: u32 = 704;
pub const RES_PRF_STATS: u32 = 1;
pub const RES_PRF_UPDATE: u32 = 2;
pub const RES_PRF_CLASS: u32 = 4;
pub const RES_PRF_CMD: u32 = 8;
pub const RES_PRF_QUES: u32 = 16;
pub const RES_PRF_ANS: u32 = 32;
pub const RES_PRF_AUTH: u32 = 64;
pub const RES_PRF_ADD: u32 = 128;
pub const RES_PRF_HEAD1: u32 = 256;
pub const RES_PRF_HEAD2: u32 = 512;
pub const RES_PRF_TTLID: u32 = 1024;
pub const RES_PRF_HEADX: u32 = 2048;
pub const RES_PRF_QUERY: u32 = 4096;
pub const RES_PRF_REPLY: u32 = 8192;
pub const RES_PRF_INIT: u32 = 16384;
pub const _SEARCH_H: u32 = 1;
pub const _SEMAPHORE_H: u32 = 1;
pub const __SIZEOF_SEM_T: u32 = 32;
pub const _SETJMP_H: u32 = 1;
pub const _SGTTY_H: u32 = 1;
pub const _SHADOW_H: u32 = 1;
pub const SHADOW: &[u8; 12] = b"/etc/shadow\0";
pub const _SPAWN_H: u32 = 1;
pub const POSIX_SPAWN_RESETIDS: u32 = 1;
pub const POSIX_SPAWN_SETPGROUP: u32 = 2;
pub const POSIX_SPAWN_SETSIGDEF: u32 = 4;
pub const POSIX_SPAWN_SETSIGMASK: u32 = 8;
pub const POSIX_SPAWN_SETSCHEDPARAM: u32 = 16;
pub const POSIX_SPAWN_SETSCHEDULER: u32 = 32;
pub const _STDIO_EXT_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const SUDO_API_VERSION_MAJOR: u32 = 1;
pub const SUDO_API_VERSION_MINOR: u32 = 21;
pub const SUDO_FRONT_END: u32 = 0;
pub const SUDO_CONV_PROMPT_ECHO_OFF: u32 = 1;
pub const SUDO_CONV_PROMPT_ECHO_ON: u32 = 2;
pub const SUDO_CONV_ERROR_MSG: u32 = 3;
pub const SUDO_CONV_INFO_MSG: u32 = 4;
pub const SUDO_CONV_PROMPT_MASK: u32 = 5;
pub const SUDO_CONV_PROMPT_ECHO_OK: u32 = 4096;
pub const SUDO_CONV_PREFER_TTY: u32 = 8192;
pub const SUDO_CONV_REPL_MAX: u32 = 1023;
pub const SUDO_CONV_CALLBACK_VERSION_MAJOR: u32 = 1;
pub const SUDO_CONV_CALLBACK_VERSION_MINOR: u32 = 0;
pub const SUDO_HOOK_VERSION_MAJOR: u32 = 1;
pub const SUDO_HOOK_VERSION_MINOR: u32 = 0;
pub const SUDO_HOOK_RET_ERROR: i32 = -1;
pub const SUDO_HOOK_RET_NEXT: u32 = 0;
pub const SUDO_HOOK_RET_STOP: u32 = 1;
pub const SUDO_HOOK_SETENV: u32 = 1;
pub const SUDO_HOOK_UNSETENV: u32 = 2;
pub const SUDO_HOOK_PUTENV: u32 = 3;
pub const SUDO_HOOK_GETENV: u32 = 4;
pub const SUDO_PLUGIN_EV_TIMEOUT: u32 = 1;
pub const SUDO_PLUGIN_EV_READ: u32 = 2;
pub const SUDO_PLUGIN_EV_WRITE: u32 = 4;
pub const SUDO_PLUGIN_EV_PERSIST: u32 = 8;
pub const SUDO_PLUGIN_EV_SIGNAL: u32 = 16;
pub const SUDO_POLICY_PLUGIN: u32 = 1;
pub const SUDO_IO_PLUGIN: u32 = 2;
pub const SUDO_PLUGIN_NO_STATUS: u32 = 0;
pub const SUDO_PLUGIN_WAIT_STATUS: u32 = 1;
pub const SUDO_PLUGIN_EXEC_ERROR: u32 = 2;
pub const SUDO_PLUGIN_SUDO_ERROR: u32 = 3;
pub const SUDO_AUDIT_PLUGIN: u32 = 3;
pub const SUDO_APPROVAL_PLUGIN: u32 = 4;
pub const GROUP_API_VERSION_MAJOR: u32 = 1;
pub const GROUP_API_VERSION_MINOR: u32 = 0;
pub const _SYSCALL_H: u32 = 1;
pub const __NR_io_setup: u32 = 0;
pub const __NR_io_destroy: u32 = 1;
pub const __NR_io_submit: u32 = 2;
pub const __NR_io_cancel: u32 = 3;
pub const __NR_io_getevents: u32 = 4;
pub const __NR_setxattr: u32 = 5;
pub const __NR_lsetxattr: u32 = 6;
pub const __NR_fsetxattr: u32 = 7;
pub const __NR_getxattr: u32 = 8;
pub const __NR_lgetxattr: u32 = 9;
pub const __NR_fgetxattr: u32 = 10;
pub const __NR_listxattr: u32 = 11;
pub const __NR_llistxattr: u32 = 12;
pub const __NR_flistxattr: u32 = 13;
pub const __NR_removexattr: u32 = 14;
pub const __NR_lremovexattr: u32 = 15;
pub const __NR_fremovexattr: u32 = 16;
pub const __NR_getcwd: u32 = 17;
pub const __NR_lookup_dcookie: u32 = 18;
pub const __NR_eventfd2: u32 = 19;
pub const __NR_epoll_create1: u32 = 20;
pub const __NR_epoll_ctl: u32 = 21;
pub const __NR_epoll_pwait: u32 = 22;
pub const __NR_dup: u32 = 23;
pub const __NR_dup3: u32 = 24;
pub const __NR3264_fcntl: u32 = 25;
pub const __NR_inotify_init1: u32 = 26;
pub const __NR_inotify_add_watch: u32 = 27;
pub const __NR_inotify_rm_watch: u32 = 28;
pub const __NR_ioctl: u32 = 29;
pub const __NR_ioprio_set: u32 = 30;
pub const __NR_ioprio_get: u32 = 31;
pub const __NR_flock: u32 = 32;
pub const __NR_mknodat: u32 = 33;
pub const __NR_mkdirat: u32 = 34;
pub const __NR_unlinkat: u32 = 35;
pub const __NR_symlinkat: u32 = 36;
pub const __NR_linkat: u32 = 37;
pub const __NR_renameat: u32 = 38;
pub const __NR_umount2: u32 = 39;
pub const __NR_mount: u32 = 40;
pub const __NR_pivot_root: u32 = 41;
pub const __NR_nfsservctl: u32 = 42;
pub const __NR3264_statfs: u32 = 43;
pub const __NR3264_fstatfs: u32 = 44;
pub const __NR3264_truncate: u32 = 45;
pub const __NR3264_ftruncate: u32 = 46;
pub const __NR_fallocate: u32 = 47;
pub const __NR_faccessat: u32 = 48;
pub const __NR_chdir: u32 = 49;
pub const __NR_fchdir: u32 = 50;
pub const __NR_chroot: u32 = 51;
pub const __NR_fchmod: u32 = 52;
pub const __NR_fchmodat: u32 = 53;
pub const __NR_fchownat: u32 = 54;
pub const __NR_fchown: u32 = 55;
pub const __NR_openat: u32 = 56;
pub const __NR_close: u32 = 57;
pub const __NR_vhangup: u32 = 58;
pub const __NR_pipe2: u32 = 59;
pub const __NR_quotactl: u32 = 60;
pub const __NR_getdents64: u32 = 61;
pub const __NR3264_lseek: u32 = 62;
pub const __NR_read: u32 = 63;
pub const __NR_write: u32 = 64;
pub const __NR_readv: u32 = 65;
pub const __NR_writev: u32 = 66;
pub const __NR_pread64: u32 = 67;
pub const __NR_pwrite64: u32 = 68;
pub const __NR_preadv: u32 = 69;
pub const __NR_pwritev: u32 = 70;
pub const __NR3264_sendfile: u32 = 71;
pub const __NR_pselect6: u32 = 72;
pub const __NR_ppoll: u32 = 73;
pub const __NR_signalfd4: u32 = 74;
pub const __NR_vmsplice: u32 = 75;
pub const __NR_splice: u32 = 76;
pub const __NR_tee: u32 = 77;
pub const __NR_readlinkat: u32 = 78;
pub const __NR3264_fstatat: u32 = 79;
pub const __NR3264_fstat: u32 = 80;
pub const __NR_sync: u32 = 81;
pub const __NR_fsync: u32 = 82;
pub const __NR_fdatasync: u32 = 83;
pub const __NR_sync_file_range: u32 = 84;
pub const __NR_timerfd_create: u32 = 85;
pub const __NR_timerfd_settime: u32 = 86;
pub const __NR_timerfd_gettime: u32 = 87;
pub const __NR_utimensat: u32 = 88;
pub const __NR_acct: u32 = 89;
pub const __NR_capget: u32 = 90;
pub const __NR_capset: u32 = 91;
pub const __NR_personality: u32 = 92;
pub const __NR_exit: u32 = 93;
pub const __NR_exit_group: u32 = 94;
pub const __NR_waitid: u32 = 95;
pub const __NR_set_tid_address: u32 = 96;
pub const __NR_unshare: u32 = 97;
pub const __NR_futex: u32 = 98;
pub const __NR_set_robust_list: u32 = 99;
pub const __NR_get_robust_list: u32 = 100;
pub const __NR_nanosleep: u32 = 101;
pub const __NR_getitimer: u32 = 102;
pub const __NR_setitimer: u32 = 103;
pub const __NR_kexec_load: u32 = 104;
pub const __NR_init_module: u32 = 105;
pub const __NR_delete_module: u32 = 106;
pub const __NR_timer_create: u32 = 107;
pub const __NR_timer_gettime: u32 = 108;
pub const __NR_timer_getoverrun: u32 = 109;
pub const __NR_timer_settime: u32 = 110;
pub const __NR_timer_delete: u32 = 111;
pub const __NR_clock_settime: u32 = 112;
pub const __NR_clock_gettime: u32 = 113;
pub const __NR_clock_getres: u32 = 114;
pub const __NR_clock_nanosleep: u32 = 115;
pub const __NR_syslog: u32 = 116;
pub const __NR_ptrace: u32 = 117;
pub const __NR_sched_setparam: u32 = 118;
pub const __NR_sched_setscheduler: u32 = 119;
pub const __NR_sched_getscheduler: u32 = 120;
pub const __NR_sched_getparam: u32 = 121;
pub const __NR_sched_setaffinity: u32 = 122;
pub const __NR_sched_getaffinity: u32 = 123;
pub const __NR_sched_yield: u32 = 124;
pub const __NR_sched_get_priority_max: u32 = 125;
pub const __NR_sched_get_priority_min: u32 = 126;
pub const __NR_sched_rr_get_interval: u32 = 127;
pub const __NR_restart_syscall: u32 = 128;
pub const __NR_kill: u32 = 129;
pub const __NR_tkill: u32 = 130;
pub const __NR_tgkill: u32 = 131;
pub const __NR_sigaltstack: u32 = 132;
pub const __NR_rt_sigsuspend: u32 = 133;
pub const __NR_rt_sigaction: u32 = 134;
pub const __NR_rt_sigprocmask: u32 = 135;
pub const __NR_rt_sigpending: u32 = 136;
pub const __NR_rt_sigtimedwait: u32 = 137;
pub const __NR_rt_sigqueueinfo: u32 = 138;
pub const __NR_rt_sigreturn: u32 = 139;
pub const __NR_setpriority: u32 = 140;
pub const __NR_getpriority: u32 = 141;
pub const __NR_reboot: u32 = 142;
pub const __NR_setregid: u32 = 143;
pub const __NR_setgid: u32 = 144;
pub const __NR_setreuid: u32 = 145;
pub const __NR_setuid: u32 = 146;
pub const __NR_setresuid: u32 = 147;
pub const __NR_getresuid: u32 = 148;
pub const __NR_setresgid: u32 = 149;
pub const __NR_getresgid: u32 = 150;
pub const __NR_setfsuid: u32 = 151;
pub const __NR_setfsgid: u32 = 152;
pub const __NR_times: u32 = 153;
pub const __NR_setpgid: u32 = 154;
pub const __NR_getpgid: u32 = 155;
pub const __NR_getsid: u32 = 156;
pub const __NR_setsid: u32 = 157;
pub const __NR_getgroups: u32 = 158;
pub const __NR_setgroups: u32 = 159;
pub const __NR_uname: u32 = 160;
pub const __NR_sethostname: u32 = 161;
pub const __NR_setdomainname: u32 = 162;
pub const __NR_getrlimit: u32 = 163;
pub const __NR_setrlimit: u32 = 164;
pub const __NR_getrusage: u32 = 165;
pub const __NR_umask: u32 = 166;
pub const __NR_prctl: u32 = 167;
pub const __NR_getcpu: u32 = 168;
pub const __NR_gettimeofday: u32 = 169;
pub const __NR_settimeofday: u32 = 170;
pub const __NR_adjtimex: u32 = 171;
pub const __NR_getpid: u32 = 172;
pub const __NR_getppid: u32 = 173;
pub const __NR_getuid: u32 = 174;
pub const __NR_geteuid: u32 = 175;
pub const __NR_getgid: u32 = 176;
pub const __NR_getegid: u32 = 177;
pub const __NR_gettid: u32 = 178;
pub const __NR_sysinfo: u32 = 179;
pub const __NR_mq_open: u32 = 180;
pub const __NR_mq_unlink: u32 = 181;
pub const __NR_mq_timedsend: u32 = 182;
pub const __NR_mq_timedreceive: u32 = 183;
pub const __NR_mq_notify: u32 = 184;
pub const __NR_mq_getsetattr: u32 = 185;
pub const __NR_msgget: u32 = 186;
pub const __NR_msgctl: u32 = 187;
pub const __NR_msgrcv: u32 = 188;
pub const __NR_msgsnd: u32 = 189;
pub const __NR_semget: u32 = 190;
pub const __NR_semctl: u32 = 191;
pub const __NR_semtimedop: u32 = 192;
pub const __NR_semop: u32 = 193;
pub const __NR_shmget: u32 = 194;
pub const __NR_shmctl: u32 = 195;
pub const __NR_shmat: u32 = 196;
pub const __NR_shmdt: u32 = 197;
pub const __NR_socket: u32 = 198;
pub const __NR_socketpair: u32 = 199;
pub const __NR_bind: u32 = 200;
pub const __NR_listen: u32 = 201;
pub const __NR_accept: u32 = 202;
pub const __NR_connect: u32 = 203;
pub const __NR_getsockname: u32 = 204;
pub const __NR_getpeername: u32 = 205;
pub const __NR_sendto: u32 = 206;
pub const __NR_recvfrom: u32 = 207;
pub const __NR_setsockopt: u32 = 208;
pub const __NR_getsockopt: u32 = 209;
pub const __NR_shutdown: u32 = 210;
pub const __NR_sendmsg: u32 = 211;
pub const __NR_recvmsg: u32 = 212;
pub const __NR_readahead: u32 = 213;
pub const __NR_brk: u32 = 214;
pub const __NR_munmap: u32 = 215;
pub const __NR_mremap: u32 = 216;
pub const __NR_add_key: u32 = 217;
pub const __NR_request_key: u32 = 218;
pub const __NR_keyctl: u32 = 219;
pub const __NR_clone: u32 = 220;
pub const __NR_execve: u32 = 221;
pub const __NR3264_mmap: u32 = 222;
pub const __NR3264_fadvise64: u32 = 223;
pub const __NR_swapon: u32 = 224;
pub const __NR_swapoff: u32 = 225;
pub const __NR_mprotect: u32 = 226;
pub const __NR_msync: u32 = 227;
pub const __NR_mlock: u32 = 228;
pub const __NR_munlock: u32 = 229;
pub const __NR_mlockall: u32 = 230;
pub const __NR_munlockall: u32 = 231;
pub const __NR_mincore: u32 = 232;
pub const __NR_madvise: u32 = 233;
pub const __NR_remap_file_pages: u32 = 234;
pub const __NR_mbind: u32 = 235;
pub const __NR_get_mempolicy: u32 = 236;
pub const __NR_set_mempolicy: u32 = 237;
pub const __NR_migrate_pages: u32 = 238;
pub const __NR_move_pages: u32 = 239;
pub const __NR_rt_tgsigqueueinfo: u32 = 240;
pub const __NR_perf_event_open: u32 = 241;
pub const __NR_accept4: u32 = 242;
pub const __NR_recvmmsg: u32 = 243;
pub const __NR_arch_specific_syscall: u32 = 244;
pub const __NR_wait4: u32 = 260;
pub const __NR_prlimit64: u32 = 261;
pub const __NR_fanotify_init: u32 = 262;
pub const __NR_fanotify_mark: u32 = 263;
pub const __NR_name_to_handle_at: u32 = 264;
pub const __NR_open_by_handle_at: u32 = 265;
pub const __NR_clock_adjtime: u32 = 266;
pub const __NR_syncfs: u32 = 267;
pub const __NR_setns: u32 = 268;
pub const __NR_sendmmsg: u32 = 269;
pub const __NR_process_vm_readv: u32 = 270;
pub const __NR_process_vm_writev: u32 = 271;
pub const __NR_kcmp: u32 = 272;
pub const __NR_finit_module: u32 = 273;
pub const __NR_sched_setattr: u32 = 274;
pub const __NR_sched_getattr: u32 = 275;
pub const __NR_renameat2: u32 = 276;
pub const __NR_seccomp: u32 = 277;
pub const __NR_getrandom: u32 = 278;
pub const __NR_memfd_create: u32 = 279;
pub const __NR_bpf: u32 = 280;
pub const __NR_execveat: u32 = 281;
pub const __NR_userfaultfd: u32 = 282;
pub const __NR_membarrier: u32 = 283;
pub const __NR_mlock2: u32 = 284;
pub const __NR_copy_file_range: u32 = 285;
pub const __NR_preadv2: u32 = 286;
pub const __NR_pwritev2: u32 = 287;
pub const __NR_pkey_mprotect: u32 = 288;
pub const __NR_pkey_alloc: u32 = 289;
pub const __NR_pkey_free: u32 = 290;
pub const __NR_statx: u32 = 291;
pub const __NR_io_pgetevents: u32 = 292;
pub const __NR_rseq: u32 = 293;
pub const __NR_kexec_file_load: u32 = 294;
pub const __NR_pidfd_send_signal: u32 = 424;
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
pub const __NR_open_tree: u32 = 428;
pub const __NR_move_mount: u32 = 429;
pub const __NR_fsopen: u32 = 430;
pub const __NR_fsconfig: u32 = 431;
pub const __NR_fsmount: u32 = 432;
pub const __NR_fspick: u32 = 433;
pub const __NR_pidfd_open: u32 = 434;
pub const __NR_clone3: u32 = 435;
pub const __NR_close_range: u32 = 436;
pub const __NR_openat2: u32 = 437;
pub const __NR_pidfd_getfd: u32 = 438;
pub const __NR_faccessat2: u32 = 439;
pub const __NR_process_madvise: u32 = 440;
pub const __NR_epoll_pwait2: u32 = 441;
pub const __NR_mount_setattr: u32 = 442;
pub const __NR_quotactl_fd: u32 = 443;
pub const __NR_landlock_create_ruleset: u32 = 444;
pub const __NR_landlock_add_rule: u32 = 445;
pub const __NR_landlock_restrict_self: u32 = 446;
pub const __NR_memfd_secret: u32 = 447;
pub const __NR_process_mrelease: u32 = 448;
pub const __NR_futex_waitv: u32 = 449;
pub const __NR_set_mempolicy_home_node: u32 = 450;
pub const __NR_cachestat: u32 = 451;
pub const __NR_syscalls: u32 = 452;
pub const __NR_fcntl: u32 = 25;
pub const __NR_statfs: u32 = 43;
pub const __NR_fstatfs: u32 = 44;
pub const __NR_truncate: u32 = 45;
pub const __NR_ftruncate: u32 = 46;
pub const __NR_lseek: u32 = 62;
pub const __NR_sendfile: u32 = 71;
pub const __NR_newfstatat: u32 = 79;
pub const __NR_fstat: u32 = 80;
pub const __NR_mmap: u32 = 222;
pub const __NR_fadvise64: u32 = 223;
pub const __GLIBC_LINUX_VERSION_CODE: u32 = 394240;
pub const SYS_accept: u32 = 202;
pub const SYS_accept4: u32 = 242;
pub const SYS_acct: u32 = 89;
pub const SYS_add_key: u32 = 217;
pub const SYS_adjtimex: u32 = 171;
pub const SYS_bind: u32 = 200;
pub const SYS_bpf: u32 = 280;
pub const SYS_brk: u32 = 214;
pub const SYS_capget: u32 = 90;
pub const SYS_capset: u32 = 91;
pub const SYS_chdir: u32 = 49;
pub const SYS_chroot: u32 = 51;
pub const SYS_clock_adjtime: u32 = 266;
pub const SYS_clock_getres: u32 = 114;
pub const SYS_clock_gettime: u32 = 113;
pub const SYS_clock_nanosleep: u32 = 115;
pub const SYS_clock_settime: u32 = 112;
pub const SYS_clone: u32 = 220;
pub const SYS_clone3: u32 = 435;
pub const SYS_close: u32 = 57;
pub const SYS_close_range: u32 = 436;
pub const SYS_connect: u32 = 203;
pub const SYS_copy_file_range: u32 = 285;
pub const SYS_delete_module: u32 = 106;
pub const SYS_dup: u32 = 23;
pub const SYS_dup3: u32 = 24;
pub const SYS_epoll_create1: u32 = 20;
pub const SYS_epoll_ctl: u32 = 21;
pub const SYS_epoll_pwait: u32 = 22;
pub const SYS_epoll_pwait2: u32 = 441;
pub const SYS_eventfd2: u32 = 19;
pub const SYS_execve: u32 = 221;
pub const SYS_execveat: u32 = 281;
pub const SYS_exit: u32 = 93;
pub const SYS_exit_group: u32 = 94;
pub const SYS_faccessat: u32 = 48;
pub const SYS_faccessat2: u32 = 439;
pub const SYS_fadvise64: u32 = 223;
pub const SYS_fallocate: u32 = 47;
pub const SYS_fanotify_init: u32 = 262;
pub const SYS_fanotify_mark: u32 = 263;
pub const SYS_fchdir: u32 = 50;
pub const SYS_fchmod: u32 = 52;
pub const SYS_fchmodat: u32 = 53;
pub const SYS_fchown: u32 = 55;
pub const SYS_fchownat: u32 = 54;
pub const SYS_fcntl: u32 = 25;
pub const SYS_fdatasync: u32 = 83;
pub const SYS_fgetxattr: u32 = 10;
pub const SYS_finit_module: u32 = 273;
pub const SYS_flistxattr: u32 = 13;
pub const SYS_flock: u32 = 32;
pub const SYS_fremovexattr: u32 = 16;
pub const SYS_fsconfig: u32 = 431;
pub const SYS_fsetxattr: u32 = 7;
pub const SYS_fsmount: u32 = 432;
pub const SYS_fsopen: u32 = 430;
pub const SYS_fspick: u32 = 433;
pub const SYS_fstat: u32 = 80;
pub const SYS_fstatfs: u32 = 44;
pub const SYS_fsync: u32 = 82;
pub const SYS_ftruncate: u32 = 46;
pub const SYS_futex: u32 = 98;
pub const SYS_futex_waitv: u32 = 449;
pub const SYS_get_mempolicy: u32 = 236;
pub const SYS_get_robust_list: u32 = 100;
pub const SYS_getcpu: u32 = 168;
pub const SYS_getcwd: u32 = 17;
pub const SYS_getdents64: u32 = 61;
pub const SYS_getegid: u32 = 177;
pub const SYS_geteuid: u32 = 175;
pub const SYS_getgid: u32 = 176;
pub const SYS_getgroups: u32 = 158;
pub const SYS_getitimer: u32 = 102;
pub const SYS_getpeername: u32 = 205;
pub const SYS_getpgid: u32 = 155;
pub const SYS_getpid: u32 = 172;
pub const SYS_getppid: u32 = 173;
pub const SYS_getpriority: u32 = 141;
pub const SYS_getrandom: u32 = 278;
pub const SYS_getresgid: u32 = 150;
pub const SYS_getresuid: u32 = 148;
pub const SYS_getrlimit: u32 = 163;
pub const SYS_getrusage: u32 = 165;
pub const SYS_getsid: u32 = 156;
pub const SYS_getsockname: u32 = 204;
pub const SYS_getsockopt: u32 = 209;
pub const SYS_gettid: u32 = 178;
pub const SYS_gettimeofday: u32 = 169;
pub const SYS_getuid: u32 = 174;
pub const SYS_getxattr: u32 = 8;
pub const SYS_init_module: u32 = 105;
pub const SYS_inotify_add_watch: u32 = 27;
pub const SYS_inotify_init1: u32 = 26;
pub const SYS_inotify_rm_watch: u32 = 28;
pub const SYS_io_cancel: u32 = 3;
pub const SYS_io_destroy: u32 = 1;
pub const SYS_io_getevents: u32 = 4;
pub const SYS_io_pgetevents: u32 = 292;
pub const SYS_io_setup: u32 = 0;
pub const SYS_io_submit: u32 = 2;
pub const SYS_io_uring_enter: u32 = 426;
pub const SYS_io_uring_register: u32 = 427;
pub const SYS_io_uring_setup: u32 = 425;
pub const SYS_ioctl: u32 = 29;
pub const SYS_ioprio_get: u32 = 31;
pub const SYS_ioprio_set: u32 = 30;
pub const SYS_kcmp: u32 = 272;
pub const SYS_kexec_file_load: u32 = 294;
pub const SYS_kexec_load: u32 = 104;
pub const SYS_keyctl: u32 = 219;
pub const SYS_kill: u32 = 129;
pub const SYS_landlock_add_rule: u32 = 445;
pub const SYS_landlock_create_ruleset: u32 = 444;
pub const SYS_landlock_restrict_self: u32 = 446;
pub const SYS_lgetxattr: u32 = 9;
pub const SYS_linkat: u32 = 37;
pub const SYS_listen: u32 = 201;
pub const SYS_listxattr: u32 = 11;
pub const SYS_llistxattr: u32 = 12;
pub const SYS_lookup_dcookie: u32 = 18;
pub const SYS_lremovexattr: u32 = 15;
pub const SYS_lseek: u32 = 62;
pub const SYS_lsetxattr: u32 = 6;
pub const SYS_madvise: u32 = 233;
pub const SYS_mbind: u32 = 235;
pub const SYS_membarrier: u32 = 283;
pub const SYS_memfd_create: u32 = 279;
pub const SYS_memfd_secret: u32 = 447;
pub const SYS_migrate_pages: u32 = 238;
pub const SYS_mincore: u32 = 232;
pub const SYS_mkdirat: u32 = 34;
pub const SYS_mknodat: u32 = 33;
pub const SYS_mlock: u32 = 228;
pub const SYS_mlock2: u32 = 284;
pub const SYS_mlockall: u32 = 230;
pub const SYS_mmap: u32 = 222;
pub const SYS_mount: u32 = 40;
pub const SYS_mount_setattr: u32 = 442;
pub const SYS_move_mount: u32 = 429;
pub const SYS_move_pages: u32 = 239;
pub const SYS_mprotect: u32 = 226;
pub const SYS_mq_getsetattr: u32 = 185;
pub const SYS_mq_notify: u32 = 184;
pub const SYS_mq_open: u32 = 180;
pub const SYS_mq_timedreceive: u32 = 183;
pub const SYS_mq_timedsend: u32 = 182;
pub const SYS_mq_unlink: u32 = 181;
pub const SYS_mremap: u32 = 216;
pub const SYS_msgctl: u32 = 187;
pub const SYS_msgget: u32 = 186;
pub const SYS_msgrcv: u32 = 188;
pub const SYS_msgsnd: u32 = 189;
pub const SYS_msync: u32 = 227;
pub const SYS_munlock: u32 = 229;
pub const SYS_munlockall: u32 = 231;
pub const SYS_munmap: u32 = 215;
pub const SYS_name_to_handle_at: u32 = 264;
pub const SYS_nanosleep: u32 = 101;
pub const SYS_newfstatat: u32 = 79;
pub const SYS_nfsservctl: u32 = 42;
pub const SYS_open_by_handle_at: u32 = 265;
pub const SYS_open_tree: u32 = 428;
pub const SYS_openat: u32 = 56;
pub const SYS_openat2: u32 = 437;
pub const SYS_perf_event_open: u32 = 241;
pub const SYS_personality: u32 = 92;
pub const SYS_pidfd_getfd: u32 = 438;
pub const SYS_pidfd_open: u32 = 434;
pub const SYS_pidfd_send_signal: u32 = 424;
pub const SYS_pipe2: u32 = 59;
pub const SYS_pivot_root: u32 = 41;
pub const SYS_pkey_alloc: u32 = 289;
pub const SYS_pkey_free: u32 = 290;
pub const SYS_pkey_mprotect: u32 = 288;
pub const SYS_ppoll: u32 = 73;
pub const SYS_prctl: u32 = 167;
pub const SYS_pread64: u32 = 67;
pub const SYS_preadv: u32 = 69;
pub const SYS_preadv2: u32 = 286;
pub const SYS_prlimit64: u32 = 261;
pub const SYS_process_madvise: u32 = 440;
pub const SYS_process_mrelease: u32 = 448;
pub const SYS_process_vm_readv: u32 = 270;
pub const SYS_process_vm_writev: u32 = 271;
pub const SYS_pselect6: u32 = 72;
pub const SYS_ptrace: u32 = 117;
pub const SYS_pwrite64: u32 = 68;
pub const SYS_pwritev: u32 = 70;
pub const SYS_pwritev2: u32 = 287;
pub const SYS_quotactl: u32 = 60;
pub const SYS_quotactl_fd: u32 = 443;
pub const SYS_read: u32 = 63;
pub const SYS_readahead: u32 = 213;
pub const SYS_readlinkat: u32 = 78;
pub const SYS_readv: u32 = 65;
pub const SYS_reboot: u32 = 142;
pub const SYS_recvfrom: u32 = 207;
pub const SYS_recvmmsg: u32 = 243;
pub const SYS_recvmsg: u32 = 212;
pub const SYS_remap_file_pages: u32 = 234;
pub const SYS_removexattr: u32 = 14;
pub const SYS_renameat: u32 = 38;
pub const SYS_renameat2: u32 = 276;
pub const SYS_request_key: u32 = 218;
pub const SYS_restart_syscall: u32 = 128;
pub const SYS_rseq: u32 = 293;
pub const SYS_rt_sigaction: u32 = 134;
pub const SYS_rt_sigpending: u32 = 136;
pub const SYS_rt_sigprocmask: u32 = 135;
pub const SYS_rt_sigqueueinfo: u32 = 138;
pub const SYS_rt_sigreturn: u32 = 139;
pub const SYS_rt_sigsuspend: u32 = 133;
pub const SYS_rt_sigtimedwait: u32 = 137;
pub const SYS_rt_tgsigqueueinfo: u32 = 240;
pub const SYS_sched_get_priority_max: u32 = 125;
pub const SYS_sched_get_priority_min: u32 = 126;
pub const SYS_sched_getaffinity: u32 = 123;
pub const SYS_sched_getattr: u32 = 275;
pub const SYS_sched_getparam: u32 = 121;
pub const SYS_sched_getscheduler: u32 = 120;
pub const SYS_sched_rr_get_interval: u32 = 127;
pub const SYS_sched_setaffinity: u32 = 122;
pub const SYS_sched_setattr: u32 = 274;
pub const SYS_sched_setparam: u32 = 118;
pub const SYS_sched_setscheduler: u32 = 119;
pub const SYS_sched_yield: u32 = 124;
pub const SYS_seccomp: u32 = 277;
pub const SYS_semctl: u32 = 191;
pub const SYS_semget: u32 = 190;
pub const SYS_semop: u32 = 193;
pub const SYS_semtimedop: u32 = 192;
pub const SYS_sendfile: u32 = 71;
pub const SYS_sendmmsg: u32 = 269;
pub const SYS_sendmsg: u32 = 211;
pub const SYS_sendto: u32 = 206;
pub const SYS_set_mempolicy: u32 = 237;
pub const SYS_set_mempolicy_home_node: u32 = 450;
pub const SYS_set_robust_list: u32 = 99;
pub const SYS_set_tid_address: u32 = 96;
pub const SYS_setdomainname: u32 = 162;
pub const SYS_setfsgid: u32 = 152;
pub const SYS_setfsuid: u32 = 151;
pub const SYS_setgid: u32 = 144;
pub const SYS_setgroups: u32 = 159;
pub const SYS_sethostname: u32 = 161;
pub const SYS_setitimer: u32 = 103;
pub const SYS_setns: u32 = 268;
pub const SYS_setpgid: u32 = 154;
pub const SYS_setpriority: u32 = 140;
pub const SYS_setregid: u32 = 143;
pub const SYS_setresgid: u32 = 149;
pub const SYS_setresuid: u32 = 147;
pub const SYS_setreuid: u32 = 145;
pub const SYS_setrlimit: u32 = 164;
pub const SYS_setsid: u32 = 157;
pub const SYS_setsockopt: u32 = 208;
pub const SYS_settimeofday: u32 = 170;
pub const SYS_setuid: u32 = 146;
pub const SYS_setxattr: u32 = 5;
pub const SYS_shmat: u32 = 196;
pub const SYS_shmctl: u32 = 195;
pub const SYS_shmdt: u32 = 197;
pub const SYS_shmget: u32 = 194;
pub const SYS_shutdown: u32 = 210;
pub const SYS_sigaltstack: u32 = 132;
pub const SYS_signalfd4: u32 = 74;
pub const SYS_socket: u32 = 198;
pub const SYS_socketpair: u32 = 199;
pub const SYS_splice: u32 = 76;
pub const SYS_statfs: u32 = 43;
pub const SYS_statx: u32 = 291;
pub const SYS_swapoff: u32 = 225;
pub const SYS_swapon: u32 = 224;
pub const SYS_symlinkat: u32 = 36;
pub const SYS_sync: u32 = 81;
pub const SYS_sync_file_range: u32 = 84;
pub const SYS_syncfs: u32 = 267;
pub const SYS_sysinfo: u32 = 179;
pub const SYS_syslog: u32 = 116;
pub const SYS_tee: u32 = 77;
pub const SYS_tgkill: u32 = 131;
pub const SYS_timer_create: u32 = 107;
pub const SYS_timer_delete: u32 = 111;
pub const SYS_timer_getoverrun: u32 = 109;
pub const SYS_timer_gettime: u32 = 108;
pub const SYS_timer_settime: u32 = 110;
pub const SYS_timerfd_create: u32 = 85;
pub const SYS_timerfd_gettime: u32 = 87;
pub const SYS_timerfd_settime: u32 = 86;
pub const SYS_times: u32 = 153;
pub const SYS_tkill: u32 = 130;
pub const SYS_truncate: u32 = 45;
pub const SYS_umask: u32 = 166;
pub const SYS_umount2: u32 = 39;
pub const SYS_uname: u32 = 160;
pub const SYS_unlinkat: u32 = 35;
pub const SYS_unshare: u32 = 97;
pub const SYS_userfaultfd: u32 = 282;
pub const SYS_utimensat: u32 = 88;
pub const SYS_vhangup: u32 = 58;
pub const SYS_vmsplice: u32 = 75;
pub const SYS_wait4: u32 = 260;
pub const SYS_waitid: u32 = 95;
pub const SYS_write: u32 = 64;
pub const SYS_writev: u32 = 66;
pub const _SYSEXITS_H: u32 = 1;
pub const EX_OK: u32 = 0;
pub const EX__BASE: u32 = 64;
pub const EX_USAGE: u32 = 64;
pub const EX_DATAERR: u32 = 65;
pub const EX_NOINPUT: u32 = 66;
pub const EX_NOUSER: u32 = 67;
pub const EX_NOHOST: u32 = 68;
pub const EX_UNAVAILABLE: u32 = 69;
pub const EX_SOFTWARE: u32 = 70;
pub const EX_OSERR: u32 = 71;
pub const EX_OSFILE: u32 = 72;
pub const EX_CANTCREAT: u32 = 73;
pub const EX_IOERR: u32 = 74;
pub const EX_TEMPFAIL: u32 = 75;
pub const EX_PROTOCOL: u32 = 76;
pub const EX_NOPERM: u32 = 77;
pub const EX_CONFIG: u32 = 78;
pub const EX__MAX: u32 = 78;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _TAR_H: u32 = 1;
pub const TSUID: u32 = 2048;
pub const TSGID: u32 = 1024;
pub const TUREAD: u32 = 256;
pub const TUWRITE: u32 = 128;
pub const TUEXEC: u32 = 64;
pub const TGREAD: u32 = 32;
pub const TGWRITE: u32 = 16;
pub const TGEXEC: u32 = 8;
pub const TOREAD: u32 = 4;
pub const TOWRITE: u32 = 2;
pub const TOEXEC: u32 = 1;
pub const REGTYPE: u8 = 48u8;
pub const AREGTYPE: u8 = 0u8;
pub const LNKTYPE: u8 = 49u8;
pub const SYMTYPE: u8 = 50u8;
pub const CHRTYPE: u8 = 51u8;
pub const BLKTYPE: u8 = 52u8;
pub const DIRTYPE: u8 = 53u8;
pub const FIFOTYPE: u8 = 54u8;
pub const CONTTYPE: u8 = 55u8;
pub const TMAGIC: &[u8; 6] = b"ustar\0";
pub const TMAGLEN: u32 = 6;
pub const TVERSION: &[u8; 3] = b"00\0";
pub const TVERSLEN: u32 = 2;
pub const NCURSES_TERM_H_incl: u32 = 1;
pub const NCURSES_USE_DATABASE: u32 = 1;
pub const NCURSES_USE_TERMCAP: u32 = 0;
pub const TERMIOS: u32 = 1;
pub const NAMESIZE: u32 = 256;
pub const BOOLWRITE: u32 = 37;
pub const NUMWRITE: u32 = 33;
pub const STRWRITE: u32 = 394;
pub const BOOLCOUNT: u32 = 44;
pub const NUMCOUNT: u32 = 39;
pub const STRCOUNT: u32 = 414;
pub const acs_chars_index: u32 = 146;
pub const NCURSES_TERM_ENTRY_H_incl: u32 = 1;
pub const NCURSES_TERMCAP_H_incl: u32 = 1;
pub const _THREAD_DB_H: u32 = 1;
pub const TD_THR_ANY_USER_FLAGS: u32 = 4294967295;
pub const TD_THR_LOWEST_PRIORITY: i32 = -20;
pub const TD_EVENTSIZE: u32 = 2;
pub const BT_UISHIFT: u32 = 5;
pub const BT_NBIPUI: u32 = 32;
pub const BT_UIMASK: u32 = 31;
pub const _THREADS_H: u32 = 1;
pub const TSS_DTOR_ITERATIONS: u32 = 4;
pub const _TTYENT_H: u32 = 1;
pub const _PATH_TTYS: &[u8; 10] = b"/etc/ttys\0";
pub const _TTYS_OFF: &[u8; 4] = b"off\0";
pub const _TTYS_ON: &[u8; 3] = b"on\0";
pub const _TTYS_SECURE: &[u8; 7] = b"secure\0";
pub const _TTYS_WINDOW: &[u8; 7] = b"window\0";
pub const TTY_ON: u32 = 1;
pub const TTY_SECURE: u32 = 2;
pub const _UCHAR_H: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const _UCONTEXT_H: u32 = 1;
pub const _ULIMIT_H: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _UTIME_H: u32 = 1;
pub const _UTMPX_H: u32 = 1;
pub const __UT_LINESIZE: u32 = 32;
pub const __UT_NAMESIZE: u32 = 32;
pub const __UT_HOSTSIZE: u32 = 256;
pub const _VALUES_H: u32 = 1;
pub const _SYS_WAIT_H: u32 = 1;
pub const WCOREFLAG: u32 = 128;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _WORDEXP_H: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 64usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_1 = 0;
pub const SIGEV_NONE: _bindgen_ty_1 = 1;
pub const SIGEV_THREAD: _bindgen_ty_1 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
pub struct aiocb {
    pub aio_fildes: ::std::os::raw::c_int,
    pub aio_lio_opcode: ::std::os::raw::c_int,
    pub aio_reqprio: ::std::os::raw::c_int,
    pub aio_buf: *mut ::std::os::raw::c_void,
    pub aio_nbytes: usize,
    pub aio_sigevent: sigevent,
    pub __next_prio: *mut aiocb,
    pub __abs_prio: ::std::os::raw::c_int,
    pub __policy: ::std::os::raw::c_int,
    pub __error_code: ::std::os::raw::c_int,
    pub __return_value: __ssize_t,
    pub aio_offset: __off_t,
    pub __pad: __IncompleteArrayField<::std::os::raw::c_char>,
    pub __glibc_reserved: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_aiocb() {
    const UNINIT: ::std::mem::MaybeUninit<aiocb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<aiocb>(),
        168usize,
        concat!("Size of: ", stringify!(aiocb))
    );
    assert_eq!(
        ::std::mem::align_of::<aiocb>(),
        8usize,
        concat!("Alignment of ", stringify!(aiocb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_fildes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_fildes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_lio_opcode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_lio_opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_reqprio) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_reqprio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_nbytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_nbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_sigevent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_sigevent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next_prio) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__next_prio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__abs_prio) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__abs_prio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__policy) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__error_code) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__error_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__return_value) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__return_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_offset) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(aio_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(aiocb),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub const AIO_CANCELED: _bindgen_ty_2 = 0;
pub const AIO_NOTCANCELED: _bindgen_ty_2 = 1;
pub const AIO_ALLDONE: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const LIO_READ: _bindgen_ty_3 = 0;
pub const LIO_WRITE: _bindgen_ty_3 = 1;
pub const LIO_NOP: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const LIO_WAIT: _bindgen_ty_4 = 0;
pub const LIO_NOWAIT: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aliasent {
    pub alias_name: *mut ::std::os::raw::c_char,
    pub alias_members_len: usize,
    pub alias_members: *mut *mut ::std::os::raw::c_char,
    pub alias_local: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_aliasent() {
    const UNINIT: ::std::mem::MaybeUninit<aliasent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<aliasent>(),
        32usize,
        concat!("Size of: ", stringify!(aliasent))
    );
    assert_eq!(
        ::std::mem::align_of::<aliasent>(),
        8usize,
        concat!("Alignment of ", stringify!(aliasent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aliasent),
            "::",
            stringify!(alias_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_members_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(aliasent),
            "::",
            stringify!(alias_members_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_members) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aliasent),
            "::",
            stringify!(alias_members)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias_local) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(aliasent),
            "::",
            stringify!(alias_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ar_hdr {
    pub ar_name: [::std::os::raw::c_char; 16usize],
    pub ar_date: [::std::os::raw::c_char; 12usize],
    pub ar_uid: [::std::os::raw::c_char; 6usize],
    pub ar_gid: [::std::os::raw::c_char; 6usize],
    pub ar_mode: [::std::os::raw::c_char; 8usize],
    pub ar_size: [::std::os::raw::c_char; 10usize],
    pub ar_fmag: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_ar_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<ar_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ar_hdr>(),
        60usize,
        concat!("Size of: ", stringify!(ar_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<ar_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(ar_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_date) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_gid) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ar_fmag) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ar_hdr),
            "::",
            stringify!(ar_fmag)
        )
    );
}
pub type __gnuc_va_list = [u64; 4usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
pub type _Float128 = u128;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub const _ISupper: _bindgen_ty_5 = 256;
pub const _ISlower: _bindgen_ty_5 = 512;
pub const _ISalpha: _bindgen_ty_5 = 1024;
pub const _ISdigit: _bindgen_ty_5 = 2048;
pub const _ISxdigit: _bindgen_ty_5 = 4096;
pub const _ISspace: _bindgen_ty_5 = 8192;
pub const _ISprint: _bindgen_ty_5 = 16384;
pub const _ISgraph: _bindgen_ty_5 = 32768;
pub const _ISblank: _bindgen_ty_5 = 1;
pub const _IScntrl: _bindgen_ty_5 = 2;
pub const _ISpunct: _bindgen_ty_5 = 4;
pub const _ISalnum: _bindgen_ty_5 = 8;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_option() {
    const UNINIT: ::std::mem::MaybeUninit<option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<option>(),
        32usize,
        concat!("Size of: ", stringify!(option))
    );
    assert_eq!(
        ::std::mem::align_of::<option>(),
        8usize,
        concat!("Alignment of ", stringify!(option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(has_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(val)
        )
    );
}
pub type error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argp_option {
    pub name: *const ::std::os::raw::c_char,
    pub key: ::std::os::raw::c_int,
    pub arg: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub doc: *const ::std::os::raw::c_char,
    pub group: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_argp_option() {
    const UNINIT: ::std::mem::MaybeUninit<argp_option> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argp_option>(),
        48usize,
        concat!("Size of: ", stringify!(argp_option))
    );
    assert_eq!(
        ::std::mem::align_of::<argp_option>(),
        8usize,
        concat!("Alignment of ", stringify!(argp_option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_option),
            "::",
            stringify!(group)
        )
    );
}
pub type argp_parser_t = ::std::option::Option<
    unsafe extern "C" fn(
        __key: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_char,
        __state: *mut argp_state,
    ) -> error_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argp {
    pub options: *const argp_option,
    pub parser: argp_parser_t,
    pub args_doc: *const ::std::os::raw::c_char,
    pub doc: *const ::std::os::raw::c_char,
    pub children: *const argp_child,
    pub help_filter: ::std::option::Option<
        unsafe extern "C" fn(
            __key: ::std::os::raw::c_int,
            __text: *const ::std::os::raw::c_char,
            __input: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub argp_domain: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_argp() {
    const UNINIT: ::std::mem::MaybeUninit<argp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argp>(),
        56usize,
        concat!("Size of: ", stringify!(argp))
    );
    assert_eq!(
        ::std::mem::align_of::<argp>(),
        8usize,
        concat!("Alignment of ", stringify!(argp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parser) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(parser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_doc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(args_doc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).doc) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(argp), "::", stringify!(doc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).help_filter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(help_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argp_domain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(argp),
            "::",
            stringify!(argp_domain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argp_child {
    pub argp: *const argp,
    pub flags: ::std::os::raw::c_int,
    pub header: *const ::std::os::raw::c_char,
    pub group: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_argp_child() {
    const UNINIT: ::std::mem::MaybeUninit<argp_child> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argp_child>(),
        32usize,
        concat!("Size of: ", stringify!(argp_child))
    );
    assert_eq!(
        ::std::mem::align_of::<argp_child>(),
        8usize,
        concat!("Alignment of ", stringify!(argp_child))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_child),
            "::",
            stringify!(argp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_child),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_child),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_child),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct argp_state {
    pub root_argp: *const argp,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub next: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub arg_num: ::std::os::raw::c_uint,
    pub quoted: ::std::os::raw::c_int,
    pub input: *mut ::std::os::raw::c_void,
    pub child_inputs: *mut *mut ::std::os::raw::c_void,
    pub hook: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
    pub err_stream: *mut FILE,
    pub out_stream: *mut FILE,
    pub pstate: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_argp_state() {
    const UNINIT: ::std::mem::MaybeUninit<argp_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<argp_state>(),
        96usize,
        concat!("Size of: ", stringify!(argp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<argp_state>(),
        8usize,
        concat!("Alignment of ", stringify!(argp_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_argp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(root_argp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(arg_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quoted) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(quoted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_inputs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(child_inputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_stream) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(err_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_stream) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(out_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(argp_state),
            "::",
            stringify!(pstate)
        )
    );
}
extern "C" {
    pub static mut argp_program_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut argp_program_version_hook:
        ::std::option::Option<unsafe extern "C" fn(__stream: *mut FILE, __state: *mut argp_state)>;
}
extern "C" {
    pub static mut argp_program_bug_address: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut argp_err_exit_status: error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypt_data {
    pub output: [::std::os::raw::c_char; 384usize],
    pub setting: [::std::os::raw::c_char; 384usize],
    pub input: [::std::os::raw::c_char; 512usize],
    pub reserved: [::std::os::raw::c_char; 767usize],
    pub initialized: ::std::os::raw::c_char,
    pub internal: [::std::os::raw::c_char; 30720usize],
}
#[test]
fn bindgen_test_layout_crypt_data() {
    const UNINIT: ::std::mem::MaybeUninit<crypt_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<crypt_data>(),
        32768usize,
        concat!("Size of: ", stringify!(crypt_data))
    );
    assert_eq!(
        ::std::mem::align_of::<crypt_data>(),
        1usize,
        concat!("Alignment of ", stringify!(crypt_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setting) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(setting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        2047usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(crypt_data),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_6 = 0;
pub const DT_FIFO: _bindgen_ty_6 = 1;
pub const DT_CHR: _bindgen_ty_6 = 2;
pub const DT_DIR: _bindgen_ty_6 = 4;
pub const DT_BLK: _bindgen_ty_6 = 6;
pub const DT_REG: _bindgen_ty_6 = 8;
pub const DT_LNK: _bindgen_ty_6 = 10;
pub const DT_SOCK: _bindgen_ty_6 = 12;
pub const DT_WHT: _bindgen_ty_6 = 14;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type Elf32_Half = u16;
pub type Elf64_Half = u16;
pub type Elf32_Word = u32;
pub type Elf32_Sword = i32;
pub type Elf64_Word = u32;
pub type Elf64_Sword = i32;
pub type Elf32_Xword = u64;
pub type Elf32_Sxword = i64;
pub type Elf64_Xword = u64;
pub type Elf64_Sxword = i64;
pub type Elf32_Addr = u32;
pub type Elf64_Addr = u64;
pub type Elf32_Off = u32;
pub type Elf64_Off = u64;
pub type Elf32_Section = u16;
pub type Elf64_Section = u16;
pub type Elf32_Versym = Elf32_Half;
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Ehdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Ehdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Ehdr>(),
        52usize,
        concat!("Size of: ", stringify!(Elf32_Ehdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Ehdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Ehdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ident) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_machine) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phoff) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shoff) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ehsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_ehsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phentsize) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phentsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phnum) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shentsize) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shentsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shstrndx) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shstrndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Ehdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Ehdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Ehdr>(),
        64usize,
        concat!("Size of: ", stringify!(Elf64_Ehdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Ehdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Ehdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ident) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_machine) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phoff) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ehsize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_ehsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phentsize) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phentsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_phnum) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shentsize) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shentsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shnum) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_shstrndx) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shstrndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Shdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Shdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Shdr>(),
        40usize,
        concat!("Size of: ", stringify!(Elf32_Shdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Shdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Shdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_addr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_link) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_info) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_addralign) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_addralign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_entsize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_entsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Shdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Shdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Shdr>(),
        64usize,
        concat!("Size of: ", stringify!(Elf64_Shdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Shdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Shdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_link) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_addralign) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_addralign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh_entsize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_entsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Chdr {
    pub ch_type: Elf32_Word,
    pub ch_size: Elf32_Word,
    pub ch_addralign: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Chdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Chdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Chdr>(),
        12usize,
        concat!("Size of: ", stringify!(Elf32_Chdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Chdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Chdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Chdr),
            "::",
            stringify!(ch_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Chdr),
            "::",
            stringify!(ch_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_addralign) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Chdr),
            "::",
            stringify!(ch_addralign)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Chdr {
    pub ch_type: Elf64_Word,
    pub ch_reserved: Elf64_Word,
    pub ch_size: Elf64_Xword,
    pub ch_addralign: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Chdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Chdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Chdr>(),
        24usize,
        concat!("Size of: ", stringify!(Elf64_Chdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Chdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Chdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Chdr),
            "::",
            stringify!(ch_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Chdr),
            "::",
            stringify!(ch_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Chdr),
            "::",
            stringify!(ch_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch_addralign) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Chdr),
            "::",
            stringify!(ch_addralign)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf32_Section,
}
#[test]
fn bindgen_test_layout_Elf32_Sym() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Sym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Sym>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Sym))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Sym>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Sym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_info) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_other) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_shndx) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_shndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Sym() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Sym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Sym>(),
        24usize,
        concat!("Size of: ", stringify!(Elf64_Sym))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Sym>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Sym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_other) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_shndx) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_shndx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Syminfo {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Syminfo() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Syminfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Syminfo>(),
        4usize,
        concat!("Size of: ", stringify!(Elf32_Syminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Syminfo>(),
        2usize,
        concat!("Alignment of ", stringify!(Elf32_Syminfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_boundto) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Syminfo),
            "::",
            stringify!(si_boundto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Syminfo),
            "::",
            stringify!(si_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Syminfo {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Syminfo() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Syminfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Syminfo>(),
        4usize,
        concat!("Size of: ", stringify!(Elf64_Syminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Syminfo>(),
        2usize,
        concat!("Alignment of ", stringify!(Elf64_Syminfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_boundto) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Syminfo),
            "::",
            stringify!(si_boundto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Syminfo),
            "::",
            stringify!(si_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Rel() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Rel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Rel>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Rel))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Rel>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Rel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rel),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rel),
            "::",
            stringify!(r_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Rel() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Rel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Rel>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Rel))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Rel>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Rel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rel),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rel),
            "::",
            stringify!(r_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_Rela() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Rela> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Rela>(),
        12usize,
        concat!("Size of: ", stringify!(Elf32_Rela))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Rela>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Rela))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_addend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_addend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
#[test]
fn bindgen_test_layout_Elf64_Rela() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Rela> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Rela>(),
        24usize,
        concat!("Size of: ", stringify!(Elf64_Rela))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Rela>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Rela))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_addend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_addend)
        )
    );
}
pub type Elf32_Relr = Elf32_Word;
pub type Elf64_Relr = Elf64_Xword;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Phdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Phdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Phdr>(),
        32usize,
        concat!("Size of: ", stringify!(Elf32_Phdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Phdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Phdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_vaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_vaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_paddr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_paddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_filesz) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_filesz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_memsz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_memsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_align) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Phdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Phdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Phdr>(),
        56usize,
        concat!("Size of: ", stringify!(Elf64_Phdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Phdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Phdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_vaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_vaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_paddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_paddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_filesz) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_filesz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_memsz) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_memsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_align) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Word,
    pub d_ptr: Elf32_Addr,
}
#[test]
fn bindgen_test_layout_Elf32_Dyn__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Dyn__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Dyn__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(Elf32_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Dyn__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_Dyn() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Dyn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Dyn>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Dyn))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Dyn>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Dyn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn),
            "::",
            stringify!(d_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_un) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn),
            "::",
            stringify!(d_un)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
}
#[test]
fn bindgen_test_layout_Elf64_Dyn__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Dyn__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Dyn__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Dyn__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf64_Dyn() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Dyn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Dyn>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Dyn))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Dyn>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Dyn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn),
            "::",
            stringify!(d_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_un) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn),
            "::",
            stringify!(d_un)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verdef {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdef() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Verdef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Verdef>(),
        20usize,
        concat!("Size of: ", stringify!(Elf32_Verdef))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Verdef>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verdef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_ndx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_ndx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_cnt) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_aux) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verdef {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdef() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Verdef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Verdef>(),
        20usize,
        concat!("Size of: ", stringify!(Elf64_Verdef))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Verdef>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verdef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_ndx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_ndx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_cnt) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_aux) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd_next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verdaux {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdaux() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Verdaux> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Verdaux>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Verdaux))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Verdaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verdaux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vda_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdaux),
            "::",
            stringify!(vda_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vda_next) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdaux),
            "::",
            stringify!(vda_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verdaux {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdaux() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Verdaux> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Verdaux>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_Verdaux))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Verdaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verdaux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vda_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdaux),
            "::",
            stringify!(vda_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vda_next) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdaux),
            "::",
            stringify!(vda_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verneed {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verneed() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Verneed> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Verneed>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Verneed))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Verneed>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verneed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_cnt) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_file) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_aux) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_next) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verneed {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verneed() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Verneed> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Verneed>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Verneed))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Verneed>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verneed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_cnt) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_file) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_aux) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_aux)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn_next) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Vernaux {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Vernaux() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Vernaux> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Vernaux>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Vernaux))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Vernaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Vernaux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_other) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_next) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Vernaux {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Vernaux() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Vernaux> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Vernaux>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Vernaux))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Vernaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Vernaux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_other) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vna_next) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_auxv_t {
    pub a_type: u32,
    pub a_un: Elf32_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_auxv_t__bindgen_ty_1 {
    pub a_val: u32,
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_auxv_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_auxv_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(Elf32_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_auxv_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_val)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_auxv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_auxv_t>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_auxv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_auxv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_auxv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t),
            "::",
            stringify!(a_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_un) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t),
            "::",
            stringify!(a_un)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_auxv_t {
    pub a_type: u64,
    pub a_un: Elf64_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_auxv_t__bindgen_ty_1 {
    pub a_val: u64,
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_auxv_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_val)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_auxv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_auxv_t>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_auxv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_auxv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_auxv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t),
            "::",
            stringify!(a_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_un) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t),
            "::",
            stringify!(a_un)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Nhdr {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Nhdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Nhdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Nhdr>(),
        12usize,
        concat!("Size of: ", stringify!(Elf32_Nhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Nhdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Nhdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_namesz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_namesz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_descsz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_descsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Nhdr {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Nhdr() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Nhdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Nhdr>(),
        12usize,
        concat!("Size of: ", stringify!(Elf64_Nhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Nhdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Nhdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_namesz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_namesz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_descsz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_descsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Move {
    pub m_value: Elf32_Xword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Move() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Move> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Move>(),
        24usize,
        concat!("Size of: ", stringify!(Elf32_Move))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Move>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf32_Move))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_poffset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_poffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_repeat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_stride) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Move {
    pub m_value: Elf64_Xword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Move() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Move> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Move>(),
        32usize,
        concat!("Size of: ", stringify!(Elf64_Move))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Move>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Move))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_poffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_poffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_repeat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_stride) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_stride)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_gptab {
    pub gt_header: Elf32_gptab__bindgen_ty_1,
    pub gt_entry: Elf32_gptab__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_gptab__bindgen_ty_1 {
    pub gt_current_g_value: Elf32_Word,
    pub gt_unused: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_gptab__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_gptab__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_gptab__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_current_g_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_1),
            "::",
            stringify!(gt_current_g_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_unused) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_1),
            "::",
            stringify!(gt_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_gptab__bindgen_ty_2 {
    pub gt_g_value: Elf32_Word,
    pub gt_bytes: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_gptab__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_gptab__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_gptab__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_g_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_2),
            "::",
            stringify!(gt_g_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_bytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_2),
            "::",
            stringify!(gt_bytes)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_gptab() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_gptab> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_gptab>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_gptab>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab),
            "::",
            stringify!(gt_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gt_entry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab),
            "::",
            stringify!(gt_entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_RegInfo {
    pub ri_gprmask: Elf32_Word,
    pub ri_cprmask: [Elf32_Word; 4usize],
    pub ri_gp_value: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_RegInfo() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_RegInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_RegInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Elf32_RegInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_RegInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_RegInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_gprmask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_gprmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cprmask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_cprmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_gp_value) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_gp_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Options {
    pub kind: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uchar,
    pub section: Elf32_Section,
    pub info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options() {
    const UNINIT: ::std::mem::MaybeUninit<Elf_Options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf_Options>(),
        8usize,
        concat!("Size of: ", stringify!(Elf_Options))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf_Options>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf_Options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Options_Hw {
    pub hwp_flags1: Elf32_Word,
    pub hwp_flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options_Hw() {
    const UNINIT: ::std::mem::MaybeUninit<Elf_Options_Hw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf_Options_Hw>(),
        8usize,
        concat!("Size of: ", stringify!(Elf_Options_Hw))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf_Options_Hw>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf_Options_Hw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hwp_flags1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options_Hw),
            "::",
            stringify!(hwp_flags1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hwp_flags2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options_Hw),
            "::",
            stringify!(hwp_flags2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Lib {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Lib() {
    const UNINIT: ::std::mem::MaybeUninit<Elf32_Lib> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf32_Lib>(),
        20usize,
        concat!("Size of: ", stringify!(Elf32_Lib))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf32_Lib>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Lib))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_time_stamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_time_stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_checksum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Lib {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Lib() {
    const UNINIT: ::std::mem::MaybeUninit<Elf64_Lib> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf64_Lib>(),
        20usize,
        concat!("Size of: ", stringify!(Elf64_Lib))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf64_Lib>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Lib))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_time_stamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_time_stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_checksum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_flags)
        )
    );
}
pub type Elf32_Conflict = Elf32_Addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_MIPS_ABIFlags_v0 {
    pub version: Elf32_Half,
    pub isa_level: ::std::os::raw::c_uchar,
    pub isa_rev: ::std::os::raw::c_uchar,
    pub gpr_size: ::std::os::raw::c_uchar,
    pub cpr1_size: ::std::os::raw::c_uchar,
    pub cpr2_size: ::std::os::raw::c_uchar,
    pub fp_abi: ::std::os::raw::c_uchar,
    pub isa_ext: Elf32_Word,
    pub ases: Elf32_Word,
    pub flags1: Elf32_Word,
    pub flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_MIPS_ABIFlags_v0() {
    const UNINIT: ::std::mem::MaybeUninit<Elf_MIPS_ABIFlags_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Elf_MIPS_ABIFlags_v0>(),
        24usize,
        concat!("Size of: ", stringify!(Elf_MIPS_ABIFlags_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<Elf_MIPS_ABIFlags_v0>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf_MIPS_ABIFlags_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isa_level) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(isa_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isa_rev) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(isa_rev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpr_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(gpr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpr1_size) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(cpr1_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpr2_size) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(cpr2_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_abi) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(fp_abi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isa_ext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(isa_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ases) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(ases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(flags1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_MIPS_ABIFlags_v0),
            "::",
            stringify!(flags2)
        )
    );
}
pub const Val_GNU_MIPS_ABI_FP_ANY: _bindgen_ty_7 = 0;
pub const Val_GNU_MIPS_ABI_FP_DOUBLE: _bindgen_ty_7 = 1;
pub const Val_GNU_MIPS_ABI_FP_SINGLE: _bindgen_ty_7 = 2;
pub const Val_GNU_MIPS_ABI_FP_SOFT: _bindgen_ty_7 = 3;
pub const Val_GNU_MIPS_ABI_FP_OLD_64: _bindgen_ty_7 = 4;
pub const Val_GNU_MIPS_ABI_FP_XX: _bindgen_ty_7 = 5;
pub const Val_GNU_MIPS_ABI_FP_64: _bindgen_ty_7 = 6;
pub const Val_GNU_MIPS_ABI_FP_64A: _bindgen_ty_7 = 7;
pub const Val_GNU_MIPS_ABI_FP_MAX: _bindgen_ty_7 = 7;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut error_print_progname: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut error_message_count: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut error_one_per_line: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad1: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub __pad2: ::std::os::raw::c_int,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        128usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstab {
    pub fs_spec: *mut ::std::os::raw::c_char,
    pub fs_file: *mut ::std::os::raw::c_char,
    pub fs_vfstype: *mut ::std::os::raw::c_char,
    pub fs_mntops: *mut ::std::os::raw::c_char,
    pub fs_type: *const ::std::os::raw::c_char,
    pub fs_freq: ::std::os::raw::c_int,
    pub fs_passno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fstab() {
    const UNINIT: ::std::mem::MaybeUninit<fstab> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fstab>(),
        48usize,
        concat!("Size of: ", stringify!(fstab))
    );
    assert_eq!(
        ::std::mem::align_of::<fstab>(),
        8usize,
        concat!("Alignment of ", stringify!(fstab))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_spec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_spec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_vfstype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_vfstype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_mntops) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_mntops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_freq) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_passno) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fstab),
            "::",
            stringify!(fs_passno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTS {
    pub fts_cur: *mut _ftsent,
    pub fts_child: *mut _ftsent,
    pub fts_array: *mut *mut _ftsent,
    pub fts_dev: dev_t,
    pub fts_path: *mut ::std::os::raw::c_char,
    pub fts_rfd: ::std::os::raw::c_int,
    pub fts_pathlen: ::std::os::raw::c_int,
    pub fts_nitems: ::std::os::raw::c_int,
    pub fts_compar: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub fts_options: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FTS() {
    const UNINIT: ::std::mem::MaybeUninit<FTS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FTS>(),
        72usize,
        concat!("Size of: ", stringify!(FTS))
    );
    assert_eq!(
        ::std::mem::align_of::<FTS>(),
        8usize,
        concat!("Alignment of ", stringify!(FTS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_child) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_array) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_dev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_path) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_rfd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_rfd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_pathlen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_pathlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_nitems) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_nitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_compar) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_compar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_options) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FTS),
            "::",
            stringify!(fts_options)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ftsent {
    pub fts_cycle: *mut _ftsent,
    pub fts_parent: *mut _ftsent,
    pub fts_link: *mut _ftsent,
    pub fts_number: ::std::os::raw::c_long,
    pub fts_pointer: *mut ::std::os::raw::c_void,
    pub fts_accpath: *mut ::std::os::raw::c_char,
    pub fts_path: *mut ::std::os::raw::c_char,
    pub fts_errno: ::std::os::raw::c_int,
    pub fts_symfd: ::std::os::raw::c_int,
    pub fts_pathlen: ::std::os::raw::c_ushort,
    pub fts_namelen: ::std::os::raw::c_ushort,
    pub fts_ino: ino_t,
    pub fts_dev: dev_t,
    pub fts_nlink: nlink_t,
    pub fts_level: ::std::os::raw::c_short,
    pub fts_info: ::std::os::raw::c_ushort,
    pub fts_flags: ::std::os::raw::c_ushort,
    pub fts_instr: ::std::os::raw::c_ushort,
    pub fts_statp: *mut stat,
    pub fts_name: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__ftsent() {
    const UNINIT: ::std::mem::MaybeUninit<_ftsent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ftsent>(),
        120usize,
        concat!("Size of: ", stringify!(_ftsent))
    );
    assert_eq!(
        ::std::mem::align_of::<_ftsent>(),
        8usize,
        concat!("Alignment of ", stringify!(_ftsent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_cycle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_parent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_link) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_pointer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_accpath) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_accpath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_path) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_errno) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_symfd) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_symfd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_pathlen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_pathlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_namelen) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_ino) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_dev) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_nlink) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_level) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_info) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_instr) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_instr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_statp) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_statp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fts_name) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_ftsent),
            "::",
            stringify!(fts_name)
        )
    );
}
pub type FTSENT = _ftsent;
pub const FTW_F: _bindgen_ty_8 = 0;
pub const FTW_D: _bindgen_ty_8 = 1;
pub const FTW_DNR: _bindgen_ty_8 = 2;
pub const FTW_NS: _bindgen_ty_8 = 3;
pub const FTW_SL: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type __ftw_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        __filename: *const ::std::os::raw::c_char,
        __status: *const stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const awk_bool_awk_false: awk_bool = 0;
pub const awk_bool_awk_true: awk_bool = 1;
pub type awk_bool = ::std::os::raw::c_uint;
pub use self::awk_bool as awk_bool_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_fieldwidth_info_t {
    pub use_chars: awk_bool_t,
    pub nf: usize,
    pub fields: [awk_fieldwidth_info_t_awk_field_info; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_fieldwidth_info_t_awk_field_info {
    pub skip: usize,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_awk_fieldwidth_info_t_awk_field_info() {
    const UNINIT: ::std::mem::MaybeUninit<awk_fieldwidth_info_t_awk_field_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_fieldwidth_info_t_awk_field_info>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(awk_fieldwidth_info_t_awk_field_info)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<awk_fieldwidth_info_t_awk_field_info>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(awk_fieldwidth_info_t_awk_field_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_fieldwidth_info_t_awk_field_info),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_fieldwidth_info_t_awk_field_info),
            "::",
            stringify!(len)
        )
    );
}
#[test]
fn bindgen_test_layout_awk_fieldwidth_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<awk_fieldwidth_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_fieldwidth_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(awk_fieldwidth_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_fieldwidth_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_fieldwidth_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_chars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_fieldwidth_info_t),
            "::",
            stringify!(use_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_fieldwidth_info_t),
            "::",
            stringify!(nf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_fieldwidth_info_t),
            "::",
            stringify!(fields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_input {
    pub name: *const ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub opaque: *mut ::std::os::raw::c_void,
    pub get_record: ::std::option::Option<
        unsafe extern "C" fn(
            out: *mut *mut ::std::os::raw::c_char,
            iobuf: *mut awk_input,
            errcode: *mut ::std::os::raw::c_int,
            rt_start: *mut *mut ::std::os::raw::c_char,
            rt_len: *mut usize,
            field_width: *mut *const awk_fieldwidth_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_func: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
            arg3: usize,
        ) -> isize,
    >,
    pub close_func: ::std::option::Option<unsafe extern "C" fn(iobuf: *mut awk_input)>,
    pub sbuf: stat,
}
#[test]
fn bindgen_test_layout_awk_input() {
    const UNINIT: ::std::mem::MaybeUninit<awk_input> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_input>(),
        176usize,
        concat!("Size of: ", stringify!(awk_input))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_input>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_record) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(get_record)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(read_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close_func) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(close_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbuf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input),
            "::",
            stringify!(sbuf)
        )
    );
}
pub type awk_input_buf_t = awk_input;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_input_parser {
    pub name: *const ::std::os::raw::c_char,
    pub can_take_file:
        ::std::option::Option<unsafe extern "C" fn(iobuf: *const awk_input_buf_t) -> awk_bool_t>,
    pub take_control_of:
        ::std::option::Option<unsafe extern "C" fn(iobuf: *mut awk_input_buf_t) -> awk_bool_t>,
    pub next: *const awk_input_parser,
}
#[test]
fn bindgen_test_layout_awk_input_parser() {
    const UNINIT: ::std::mem::MaybeUninit<awk_input_parser> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_input_parser>(),
        32usize,
        concat!("Size of: ", stringify!(awk_input_parser))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_input_parser>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_input_parser))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input_parser),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_take_file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input_parser),
            "::",
            stringify!(can_take_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).take_control_of) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input_parser),
            "::",
            stringify!(take_control_of)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_input_parser),
            "::",
            stringify!(next)
        )
    );
}
pub type awk_input_parser_t = awk_input_parser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_output_buf {
    pub name: *const ::std::os::raw::c_char,
    pub mode: *const ::std::os::raw::c_char,
    pub fp: *mut FILE,
    pub redirected: awk_bool_t,
    pub opaque: *mut ::std::os::raw::c_void,
    pub gawk_fwrite: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_void,
            size: usize,
            count: usize,
            fp: *mut FILE,
            opaque: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub gawk_fflush: ::std::option::Option<
        unsafe extern "C" fn(
            fp: *mut FILE,
            opaque: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub gawk_ferror: ::std::option::Option<
        unsafe extern "C" fn(
            fp: *mut FILE,
            opaque: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub gawk_fclose: ::std::option::Option<
        unsafe extern "C" fn(
            fp: *mut FILE,
            opaque: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_awk_output_buf() {
    const UNINIT: ::std::mem::MaybeUninit<awk_output_buf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_output_buf>(),
        72usize,
        concat!("Size of: ", stringify!(awk_output_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_output_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_output_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redirected) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(redirected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gawk_fwrite) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(gawk_fwrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gawk_fflush) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(gawk_fflush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gawk_ferror) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(gawk_ferror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gawk_fclose) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_buf),
            "::",
            stringify!(gawk_fclose)
        )
    );
}
pub type awk_output_buf_t = awk_output_buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_output_wrapper {
    pub name: *const ::std::os::raw::c_char,
    pub can_take_file:
        ::std::option::Option<unsafe extern "C" fn(outbuf: *const awk_output_buf_t) -> awk_bool_t>,
    pub take_control_of:
        ::std::option::Option<unsafe extern "C" fn(outbuf: *mut awk_output_buf_t) -> awk_bool_t>,
    pub next: *const awk_output_wrapper,
}
#[test]
fn bindgen_test_layout_awk_output_wrapper() {
    const UNINIT: ::std::mem::MaybeUninit<awk_output_wrapper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_output_wrapper>(),
        32usize,
        concat!("Size of: ", stringify!(awk_output_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_output_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_output_wrapper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_wrapper),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_take_file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_wrapper),
            "::",
            stringify!(can_take_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).take_control_of) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_wrapper),
            "::",
            stringify!(take_control_of)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_output_wrapper),
            "::",
            stringify!(next)
        )
    );
}
pub type awk_output_wrapper_t = awk_output_wrapper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_two_way_processor {
    pub name: *const ::std::os::raw::c_char,
    pub can_take_two_way: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> awk_bool_t,
    >,
    pub take_control_of: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            inbuf: *mut awk_input_buf_t,
            outbuf: *mut awk_output_buf_t,
        ) -> awk_bool_t,
    >,
    pub next: *const awk_two_way_processor,
}
#[test]
fn bindgen_test_layout_awk_two_way_processor() {
    const UNINIT: ::std::mem::MaybeUninit<awk_two_way_processor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_two_way_processor>(),
        32usize,
        concat!("Size of: ", stringify!(awk_two_way_processor))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_two_way_processor>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_two_way_processor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_two_way_processor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_take_two_way) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_two_way_processor),
            "::",
            stringify!(can_take_two_way)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).take_control_of) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_two_way_processor),
            "::",
            stringify!(take_control_of)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_two_way_processor),
            "::",
            stringify!(next)
        )
    );
}
pub type awk_two_way_processor_t = awk_two_way_processor;
pub const GAWK_API_MAJOR_VERSION: _bindgen_ty_9 = 3;
pub const GAWK_API_MINOR_VERSION: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_string {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_awk_string() {
    const UNINIT: ::std::mem::MaybeUninit<awk_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_string>(),
        16usize,
        concat!("Size of: ", stringify!(awk_string))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_string>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_string))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_string),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_string),
            "::",
            stringify!(len)
        )
    );
}
pub type awk_string_t = awk_string;
pub const AWK_NUMBER_TYPE_AWK_NUMBER_TYPE_DOUBLE: AWK_NUMBER_TYPE = 0;
pub const AWK_NUMBER_TYPE_AWK_NUMBER_TYPE_MPFR: AWK_NUMBER_TYPE = 1;
pub const AWK_NUMBER_TYPE_AWK_NUMBER_TYPE_MPZ: AWK_NUMBER_TYPE = 2;
pub type AWK_NUMBER_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_number {
    pub d: f64,
    pub type_: AWK_NUMBER_TYPE,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_awk_number() {
    const UNINIT: ::std::mem::MaybeUninit<awk_number> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_number>(),
        24usize,
        concat!("Size of: ", stringify!(awk_number))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_number>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_number))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_number),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_number),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_number),
            "::",
            stringify!(ptr)
        )
    );
}
pub type awk_number_t = awk_number;
pub type awk_array_t = *mut ::std::os::raw::c_void;
pub type awk_scalar_t = *mut ::std::os::raw::c_void;
pub type awk_value_cookie_t = *mut ::std::os::raw::c_void;
pub const awk_valtype_t_AWK_UNDEFINED: awk_valtype_t = 0;
pub const awk_valtype_t_AWK_NUMBER: awk_valtype_t = 1;
pub const awk_valtype_t_AWK_STRING: awk_valtype_t = 2;
pub const awk_valtype_t_AWK_REGEX: awk_valtype_t = 3;
pub const awk_valtype_t_AWK_STRNUM: awk_valtype_t = 4;
pub const awk_valtype_t_AWK_ARRAY: awk_valtype_t = 5;
pub const awk_valtype_t_AWK_SCALAR: awk_valtype_t = 6;
pub const awk_valtype_t_AWK_VALUE_COOKIE: awk_valtype_t = 7;
pub const awk_valtype_t_AWK_BOOL: awk_valtype_t = 8;
pub type awk_valtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct awk_value {
    pub val_type: awk_valtype_t,
    pub u: awk_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union awk_value__bindgen_ty_1 {
    pub s: awk_string_t,
    pub n: awk_number_t,
    pub a: awk_array_t,
    pub scl: awk_scalar_t,
    pub vc: awk_value_cookie_t,
    pub b: awk_bool_t,
}
#[test]
fn bindgen_test_layout_awk_value__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<awk_value__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_value__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(awk_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(scl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(vc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
}
#[test]
fn bindgen_test_layout_awk_value() {
    const UNINIT: ::std::mem::MaybeUninit<awk_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_value>(),
        32usize,
        concat!("Size of: ", stringify!(awk_value))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_value>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value),
            "::",
            stringify!(val_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_value),
            "::",
            stringify!(u)
        )
    );
}
pub type awk_value_t = awk_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct awk_element {
    pub next: *mut awk_element,
    pub flags: awk_element__bindgen_ty_1,
    pub index: awk_value_t,
    pub value: awk_value_t,
}
pub const awk_element_AWK_ELEMENT_DEFAULT: awk_element__bindgen_ty_1 = 0;
pub const awk_element_AWK_ELEMENT_DELETE: awk_element__bindgen_ty_1 = 1;
pub type awk_element__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_awk_element() {
    const UNINIT: ::std::mem::MaybeUninit<awk_element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_element>(),
        80usize,
        concat!("Size of: ", stringify!(awk_element))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_element>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_element))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_element),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_element),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_element),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_element),
            "::",
            stringify!(value)
        )
    );
}
pub type awk_element_t = awk_element;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct awk_flat_array {
    pub opaque1: *const ::std::os::raw::c_void,
    pub opaque2: *const ::std::os::raw::c_void,
    pub count: usize,
    pub elements: [awk_element_t; 1usize],
}
#[test]
fn bindgen_test_layout_awk_flat_array() {
    const UNINIT: ::std::mem::MaybeUninit<awk_flat_array> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_flat_array>(),
        104usize,
        concat!("Size of: ", stringify!(awk_flat_array))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_flat_array>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_flat_array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_flat_array),
            "::",
            stringify!(opaque1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_flat_array),
            "::",
            stringify!(opaque2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_flat_array),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_flat_array),
            "::",
            stringify!(elements)
        )
    );
}
pub type awk_flat_array_t = awk_flat_array;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct awk_ext_func {
    pub name: *const ::std::os::raw::c_char,
    pub function: ::std::option::Option<
        unsafe extern "C" fn(
            num_actual_args: ::std::os::raw::c_int,
            result: *mut awk_value_t,
            finfo: *mut awk_ext_func,
        ) -> *mut awk_value_t,
    >,
    pub max_expected_args: usize,
    pub min_required_args: usize,
    pub suppress_lint: awk_bool_t,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_awk_ext_func() {
    const UNINIT: ::std::mem::MaybeUninit<awk_ext_func> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<awk_ext_func>(),
        48usize,
        concat!("Size of: ", stringify!(awk_ext_func))
    );
    assert_eq!(
        ::std::mem::align_of::<awk_ext_func>(),
        8usize,
        concat!("Alignment of ", stringify!(awk_ext_func))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_expected_args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(max_expected_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_required_args) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(min_required_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suppress_lint) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(suppress_lint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(awk_ext_func),
            "::",
            stringify!(data)
        )
    );
}
pub type awk_ext_func_t = awk_ext_func;
pub type awk_ext_id_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gawk_api {
    pub major_version: ::std::os::raw::c_int,
    pub minor_version: ::std::os::raw::c_int,
    pub gmp_major_version: ::std::os::raw::c_int,
    pub gmp_minor_version: ::std::os::raw::c_int,
    pub mpfr_major_version: ::std::os::raw::c_int,
    pub mpfr_minor_version: ::std::os::raw::c_int,
    pub do_flags: [::std::os::raw::c_int; 6usize],
    pub api_add_ext_func: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            name_space: *const ::std::os::raw::c_char,
            func: *mut awk_ext_func_t,
        ) -> awk_bool_t,
    >,
    pub api_register_input_parser: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, input_parser: *mut awk_input_parser_t),
    >,
    pub api_register_output_wrapper: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, output_wrapper: *mut awk_output_wrapper_t),
    >,
    pub api_register_two_way_processor: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, two_way_processor: *mut awk_two_way_processor_t),
    >,
    pub api_awk_atexit: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            funcp: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut ::std::os::raw::c_void,
                    exit_status: ::std::os::raw::c_int,
                ),
            >,
            arg0: *mut ::std::os::raw::c_void,
        ),
    >,
    pub api_register_ext_version: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, version: *const ::std::os::raw::c_char),
    >,
    pub api_fatal: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, format: *const ::std::os::raw::c_char, ...),
    >,
    pub api_warning: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, format: *const ::std::os::raw::c_char, ...),
    >,
    pub api_lintwarn: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, format: *const ::std::os::raw::c_char, ...),
    >,
    pub api_nonfatal: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, format: *const ::std::os::raw::c_char, ...),
    >,
    pub api_update_ERRNO_int: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, errno_val: ::std::os::raw::c_int),
    >,
    pub api_update_ERRNO_string: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, string: *const ::std::os::raw::c_char),
    >,
    pub api_unset_ERRNO: ::std::option::Option<unsafe extern "C" fn(id: awk_ext_id_t)>,
    pub api_get_argument: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            count: usize,
            wanted: awk_valtype_t,
            result: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_set_argument: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, count: usize, array: awk_array_t) -> awk_bool_t,
    >,
    pub api_sym_lookup: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            name_space: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            wanted: awk_valtype_t,
            result: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_sym_update: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            name_space: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            value: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_sym_lookup_scalar: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            cookie: awk_scalar_t,
            wanted: awk_valtype_t,
            result: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_sym_update_scalar: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            cookie: awk_scalar_t,
            value: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_create_value: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            value: *mut awk_value_t,
            result: *mut awk_value_cookie_t,
        ) -> awk_bool_t,
    >,
    pub api_release_value: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, vc: awk_value_cookie_t) -> awk_bool_t,
    >,
    pub api_get_element_count: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            count: *mut usize,
        ) -> awk_bool_t,
    >,
    pub api_get_array_element: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            index: *const awk_value_t,
            wanted: awk_valtype_t,
            result: *mut awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_set_array_element: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            index: *const awk_value_t,
            value: *const awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_del_array_element: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            index: *const awk_value_t,
        ) -> awk_bool_t,
    >,
    pub api_create_array:
        ::std::option::Option<unsafe extern "C" fn(id: awk_ext_id_t) -> awk_array_t>,
    pub api_clear_array: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, a_cookie: awk_array_t) -> awk_bool_t,
    >,
    pub api_flatten_array_typed: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            data: *mut *mut awk_flat_array_t,
            index_type: awk_valtype_t,
            value_type: awk_valtype_t,
        ) -> awk_bool_t,
    >,
    pub api_release_flattened_array: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            a_cookie: awk_array_t,
            data: *mut awk_flat_array_t,
        ) -> awk_bool_t,
    >,
    pub api_malloc:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub api_calloc: ::std::option::Option<
        unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub api_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub api_free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub api_get_mpfr: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t) -> *mut ::std::os::raw::c_void,
    >,
    pub api_get_mpz: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t) -> *mut ::std::os::raw::c_void,
    >,
    pub api_get_file: ::std::option::Option<
        unsafe extern "C" fn(
            id: awk_ext_id_t,
            name: *const ::std::os::raw::c_char,
            name_len: usize,
            filetype: *const ::std::os::raw::c_char,
            fd: ::std::os::raw::c_int,
            ibufp: *mut *const awk_input_buf_t,
            obufp: *mut *const awk_output_buf_t,
        ) -> awk_bool_t,
    >,
    pub api_destroy_array: ::std::option::Option<
        unsafe extern "C" fn(id: awk_ext_id_t, a_cookie: awk_array_t) -> awk_bool_t,
    >,
}
#[test]
fn bindgen_test_layout_gawk_api() {
    const UNINIT: ::std::mem::MaybeUninit<gawk_api> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gawk_api>(),
        344usize,
        concat!("Size of: ", stringify!(gawk_api))
    );
    assert_eq!(
        ::std::mem::align_of::<gawk_api>(),
        8usize,
        concat!("Alignment of ", stringify!(gawk_api))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmp_major_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(gmp_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmp_minor_version) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(gmp_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpfr_major_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(mpfr_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpfr_minor_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(mpfr_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(do_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_add_ext_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_add_ext_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_register_input_parser) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_register_input_parser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_register_output_wrapper) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_register_output_wrapper)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).api_register_two_way_processor) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_register_two_way_processor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_awk_atexit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_awk_atexit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_register_ext_version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_register_ext_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_fatal) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_fatal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_warning) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_lintwarn) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_lintwarn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_nonfatal) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_nonfatal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_update_ERRNO_int) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_update_ERRNO_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_update_ERRNO_string) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_update_ERRNO_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_unset_ERRNO) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_unset_ERRNO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_argument) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_argument)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_set_argument) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_set_argument)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_sym_lookup) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_sym_lookup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_sym_update) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_sym_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_sym_lookup_scalar) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_sym_lookup_scalar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_sym_update_scalar) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_sym_update_scalar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_create_value) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_create_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_release_value) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_release_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_element_count) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_element_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_array_element) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_array_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_set_array_element) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_set_array_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_del_array_element) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_del_array_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_create_array) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_create_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_clear_array) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_clear_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_flatten_array_typed) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_flatten_array_typed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_release_flattened_array) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_release_flattened_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_malloc) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_calloc) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_calloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_realloc) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_free) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_mpfr) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_mpfr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_mpz) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_mpz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_get_file) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_get_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_destroy_array) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(gawk_api),
            "::",
            stringify!(api_destroy_array)
        )
    );
}
pub type gawk_api_t = gawk_api;
pub type wint_t = ::std::os::raw::c_uint;
pub type wchar_t = ::std::os::raw::c_uint;
pub const __GCONV_OK: _bindgen_ty_10 = 0;
pub const __GCONV_NOCONV: _bindgen_ty_10 = 1;
pub const __GCONV_NODB: _bindgen_ty_10 = 2;
pub const __GCONV_NOMEM: _bindgen_ty_10 = 3;
pub const __GCONV_EMPTY_INPUT: _bindgen_ty_10 = 4;
pub const __GCONV_FULL_OUTPUT: _bindgen_ty_10 = 5;
pub const __GCONV_ILLEGAL_INPUT: _bindgen_ty_10 = 6;
pub const __GCONV_INCOMPLETE_INPUT: _bindgen_ty_10 = 7;
pub const __GCONV_ILLEGAL_DESCRIPTOR: _bindgen_ty_10 = 8;
pub const __GCONV_INTERNAL_ERROR: _bindgen_ty_10 = 9;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const __GCONV_IS_LAST: _bindgen_ty_11 = 1;
pub const __GCONV_IGNORE_ERRORS: _bindgen_ty_11 = 2;
pub const __GCONV_SWAP: _bindgen_ty_11 = 4;
pub const __GCONV_TRANSLIT: _bindgen_ty_11 = 8;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gconv_loaded_object {
    _unused: [u8; 0],
}
pub type __gconv_fct = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut __gconv_step,
        arg2: *mut __gconv_step_data,
        arg3: *mut *const ::std::os::raw::c_uchar,
        arg4: *const ::std::os::raw::c_uchar,
        arg5: *mut *mut ::std::os::raw::c_uchar,
        arg6: *mut usize,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __gconv_btowc_fct = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut __gconv_step, arg2: ::std::os::raw::c_uchar) -> wint_t,
>;
pub type __gconv_init_fct =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut __gconv_step) -> ::std::os::raw::c_int>;
pub type __gconv_end_fct = ::std::option::Option<unsafe extern "C" fn(arg1: *mut __gconv_step)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gconv_step {
    pub __shlib_handle: *mut __gconv_loaded_object,
    pub __modname: *const ::std::os::raw::c_char,
    pub __counter: ::std::os::raw::c_int,
    pub __from_name: *mut ::std::os::raw::c_char,
    pub __to_name: *mut ::std::os::raw::c_char,
    pub __fct: __gconv_fct,
    pub __btowc_fct: __gconv_btowc_fct,
    pub __init_fct: __gconv_init_fct,
    pub __end_fct: __gconv_end_fct,
    pub __min_needed_from: ::std::os::raw::c_int,
    pub __max_needed_from: ::std::os::raw::c_int,
    pub __min_needed_to: ::std::os::raw::c_int,
    pub __max_needed_to: ::std::os::raw::c_int,
    pub __stateful: ::std::os::raw::c_int,
    pub __data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___gconv_step() {
    const UNINIT: ::std::mem::MaybeUninit<__gconv_step> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__gconv_step>(),
        104usize,
        concat!("Size of: ", stringify!(__gconv_step))
    );
    assert_eq!(
        ::std::mem::align_of::<__gconv_step>(),
        8usize,
        concat!("Alignment of ", stringify!(__gconv_step))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shlib_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__shlib_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__modname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__modname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__counter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__from_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__from_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__to_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__to_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fct) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__fct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__btowc_fct) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__btowc_fct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init_fct) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__init_fct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__end_fct) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__end_fct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__min_needed_from) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__min_needed_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__max_needed_from) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__max_needed_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__min_needed_to) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__min_needed_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__max_needed_to) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__max_needed_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__stateful) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__stateful)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step),
            "::",
            stringify!(__data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gconv_step_data {
    pub __outbuf: *mut ::std::os::raw::c_uchar,
    pub __outbufend: *mut ::std::os::raw::c_uchar,
    pub __flags: ::std::os::raw::c_int,
    pub __invocation_counter: ::std::os::raw::c_int,
    pub __internal_use: ::std::os::raw::c_int,
    pub __statep: *mut __mbstate_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout___gconv_step_data() {
    const UNINIT: ::std::mem::MaybeUninit<__gconv_step_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__gconv_step_data>(),
        48usize,
        concat!("Size of: ", stringify!(__gconv_step_data))
    );
    assert_eq!(
        ::std::mem::align_of::<__gconv_step_data>(),
        8usize,
        concat!("Alignment of ", stringify!(__gconv_step_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__outbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__outbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__outbufend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__outbufend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__invocation_counter) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__invocation_counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__internal_use) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__internal_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__statep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__statep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_step_data),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
pub struct __gconv_info {
    pub __nsteps: usize,
    pub __steps: *mut __gconv_step,
    pub __data: __IncompleteArrayField<__gconv_step_data>,
}
#[test]
fn bindgen_test_layout___gconv_info() {
    const UNINIT: ::std::mem::MaybeUninit<__gconv_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__gconv_info>(),
        16usize,
        concat!("Size of: ", stringify!(__gconv_info))
    );
    assert_eq!(
        ::std::mem::align_of::<__gconv_info>(),
        8usize,
        concat!("Alignment of ", stringify!(__gconv_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nsteps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_info),
            "::",
            stringify!(__nsteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__steps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_info),
            "::",
            stringify!(__steps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gconv_info),
            "::",
            stringify!(__data)
        )
    );
}
pub type __gconv_t = *mut __gconv_info;
pub type __size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glob_t {
    pub gl_pathc: __size_t,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_offs: __size_t,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_glob_t() {
    const UNINIT: ::std::mem::MaybeUninit<glob_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<glob_t>(),
        72usize,
        concat!("Size of: ", stringify!(glob_t))
    );
    assert_eq!(
        ::std::mem::align_of::<glob_t>(),
        8usize,
        concat!("Alignment of ", stringify!(glob_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_pathc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_pathc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_pathv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_pathv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_offs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_closedir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_closedir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_readdir) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_readdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_opendir) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_opendir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_lstat) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_lstat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_stat) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_stat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmk_floc {
    pub filenm: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_gmk_floc() {
    const UNINIT: ::std::mem::MaybeUninit<gmk_floc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gmk_floc>(),
        16usize,
        concat!("Size of: ", stringify!(gmk_floc))
    );
    assert_eq!(
        ::std::mem::align_of::<gmk_floc>(),
        8usize,
        concat!("Alignment of ", stringify!(gmk_floc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filenm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gmk_floc),
            "::",
            stringify!(filenm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gmk_floc),
            "::",
            stringify!(lineno)
        )
    );
}
pub type gmk_func_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        nm: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_uint,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    const UNINIT: ::std::mem::MaybeUninit<group> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group>(),
        32usize,
        concat!("Size of: ", stringify!(group))
    );
    assert_eq!(
        ::std::mem::align_of::<group>(),
        8usize,
        concat!("Alignment of ", stringify!(group))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_gid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_mem) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_mem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgrp {
    pub sg_namp: *mut ::std::os::raw::c_char,
    pub sg_passwd: *mut ::std::os::raw::c_char,
    pub sg_adm: *mut *mut ::std::os::raw::c_char,
    pub sg_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sgrp() {
    const UNINIT: ::std::mem::MaybeUninit<sgrp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgrp>(),
        32usize,
        concat!("Size of: ", stringify!(sgrp))
    );
    assert_eq!(
        ::std::mem::align_of::<sgrp>(),
        8usize,
        concat!("Alignment of ", stringify!(sgrp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_namp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgrp),
            "::",
            stringify!(sg_namp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgrp),
            "::",
            stringify!(sg_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_adm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sgrp),
            "::",
            stringify!(sg_adm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_mem) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sgrp),
            "::",
            stringify!(sg_mem)
        )
    );
}
pub type iconv_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_12 = 1;
pub const MSG_PEEK: _bindgen_ty_12 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_12 = 4;
pub const MSG_CTRUNC: _bindgen_ty_12 = 8;
pub const MSG_PROXY: _bindgen_ty_12 = 16;
pub const MSG_TRUNC: _bindgen_ty_12 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_12 = 64;
pub const MSG_EOR: _bindgen_ty_12 = 128;
pub const MSG_WAITALL: _bindgen_ty_12 = 256;
pub const MSG_FIN: _bindgen_ty_12 = 512;
pub const MSG_SYN: _bindgen_ty_12 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_12 = 2048;
pub const MSG_RST: _bindgen_ty_12 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_12 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_12 = 16384;
pub const MSG_MORE: _bindgen_ty_12 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_12 = 65536;
pub const MSG_BATCH: _bindgen_ty_12 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_12 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_12 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_12 = 1073741824;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
pub const SCM_RIGHTS: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_14 = 0;
pub const SHUT_WR: _bindgen_ty_14 = 1;
pub const SHUT_RDWR: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_ifu: ifaddrs__bindgen_ty_1,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifaddrs__bindgen_ty_1 {
    pub ifu_broadaddr: *mut sockaddr,
    pub ifu_dstaddr: *mut sockaddr,
}
#[test]
fn bindgen_test_layout_ifaddrs__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ifaddrs__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifaddrs__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ifaddrs__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ifaddrs__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ifaddrs__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifu_broadaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs__bindgen_ty_1),
            "::",
            stringify!(ifu_broadaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifu_dstaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs__bindgen_ty_1),
            "::",
            stringify!(ifu_dstaddr)
        )
    );
}
#[test]
fn bindgen_test_layout_ifaddrs() {
    const UNINIT: ::std::mem::MaybeUninit<ifaddrs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifaddrs>(),
        56usize,
        concat!("Size of: ", stringify!(ifaddrs))
    );
    assert_eq!(
        ::std::mem::align_of::<ifaddrs>(),
        8usize,
        concat!("Alignment of ", stringify!(ifaddrs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_netmask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_netmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_ifu) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_ifu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ifa_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrs),
            "::",
            stringify!(ifa_data)
        )
    );
}
pub type __gwchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type nl_catd = *mut ::std::os::raw::c_void;
pub type nl_item = ::std::os::raw::c_int;
pub const ABDAY_1: _bindgen_ty_15 = 131072;
pub const ABDAY_2: _bindgen_ty_15 = 131073;
pub const ABDAY_3: _bindgen_ty_15 = 131074;
pub const ABDAY_4: _bindgen_ty_15 = 131075;
pub const ABDAY_5: _bindgen_ty_15 = 131076;
pub const ABDAY_6: _bindgen_ty_15 = 131077;
pub const ABDAY_7: _bindgen_ty_15 = 131078;
pub const DAY_1: _bindgen_ty_15 = 131079;
pub const DAY_2: _bindgen_ty_15 = 131080;
pub const DAY_3: _bindgen_ty_15 = 131081;
pub const DAY_4: _bindgen_ty_15 = 131082;
pub const DAY_5: _bindgen_ty_15 = 131083;
pub const DAY_6: _bindgen_ty_15 = 131084;
pub const DAY_7: _bindgen_ty_15 = 131085;
pub const ABMON_1: _bindgen_ty_15 = 131086;
pub const ABMON_2: _bindgen_ty_15 = 131087;
pub const ABMON_3: _bindgen_ty_15 = 131088;
pub const ABMON_4: _bindgen_ty_15 = 131089;
pub const ABMON_5: _bindgen_ty_15 = 131090;
pub const ABMON_6: _bindgen_ty_15 = 131091;
pub const ABMON_7: _bindgen_ty_15 = 131092;
pub const ABMON_8: _bindgen_ty_15 = 131093;
pub const ABMON_9: _bindgen_ty_15 = 131094;
pub const ABMON_10: _bindgen_ty_15 = 131095;
pub const ABMON_11: _bindgen_ty_15 = 131096;
pub const ABMON_12: _bindgen_ty_15 = 131097;
pub const MON_1: _bindgen_ty_15 = 131098;
pub const MON_2: _bindgen_ty_15 = 131099;
pub const MON_3: _bindgen_ty_15 = 131100;
pub const MON_4: _bindgen_ty_15 = 131101;
pub const MON_5: _bindgen_ty_15 = 131102;
pub const MON_6: _bindgen_ty_15 = 131103;
pub const MON_7: _bindgen_ty_15 = 131104;
pub const MON_8: _bindgen_ty_15 = 131105;
pub const MON_9: _bindgen_ty_15 = 131106;
pub const MON_10: _bindgen_ty_15 = 131107;
pub const MON_11: _bindgen_ty_15 = 131108;
pub const MON_12: _bindgen_ty_15 = 131109;
pub const AM_STR: _bindgen_ty_15 = 131110;
pub const PM_STR: _bindgen_ty_15 = 131111;
pub const D_T_FMT: _bindgen_ty_15 = 131112;
pub const D_FMT: _bindgen_ty_15 = 131113;
pub const T_FMT: _bindgen_ty_15 = 131114;
pub const T_FMT_AMPM: _bindgen_ty_15 = 131115;
pub const ERA: _bindgen_ty_15 = 131116;
pub const __ERA_YEAR: _bindgen_ty_15 = 131117;
pub const ERA_D_FMT: _bindgen_ty_15 = 131118;
pub const ALT_DIGITS: _bindgen_ty_15 = 131119;
pub const ERA_D_T_FMT: _bindgen_ty_15 = 131120;
pub const ERA_T_FMT: _bindgen_ty_15 = 131121;
pub const _NL_TIME_ERA_NUM_ENTRIES: _bindgen_ty_15 = 131122;
pub const _NL_TIME_ERA_ENTRIES: _bindgen_ty_15 = 131123;
pub const _NL_WABDAY_1: _bindgen_ty_15 = 131124;
pub const _NL_WABDAY_2: _bindgen_ty_15 = 131125;
pub const _NL_WABDAY_3: _bindgen_ty_15 = 131126;
pub const _NL_WABDAY_4: _bindgen_ty_15 = 131127;
pub const _NL_WABDAY_5: _bindgen_ty_15 = 131128;
pub const _NL_WABDAY_6: _bindgen_ty_15 = 131129;
pub const _NL_WABDAY_7: _bindgen_ty_15 = 131130;
pub const _NL_WDAY_1: _bindgen_ty_15 = 131131;
pub const _NL_WDAY_2: _bindgen_ty_15 = 131132;
pub const _NL_WDAY_3: _bindgen_ty_15 = 131133;
pub const _NL_WDAY_4: _bindgen_ty_15 = 131134;
pub const _NL_WDAY_5: _bindgen_ty_15 = 131135;
pub const _NL_WDAY_6: _bindgen_ty_15 = 131136;
pub const _NL_WDAY_7: _bindgen_ty_15 = 131137;
pub const _NL_WABMON_1: _bindgen_ty_15 = 131138;
pub const _NL_WABMON_2: _bindgen_ty_15 = 131139;
pub const _NL_WABMON_3: _bindgen_ty_15 = 131140;
pub const _NL_WABMON_4: _bindgen_ty_15 = 131141;
pub const _NL_WABMON_5: _bindgen_ty_15 = 131142;
pub const _NL_WABMON_6: _bindgen_ty_15 = 131143;
pub const _NL_WABMON_7: _bindgen_ty_15 = 131144;
pub const _NL_WABMON_8: _bindgen_ty_15 = 131145;
pub const _NL_WABMON_9: _bindgen_ty_15 = 131146;
pub const _NL_WABMON_10: _bindgen_ty_15 = 131147;
pub const _NL_WABMON_11: _bindgen_ty_15 = 131148;
pub const _NL_WABMON_12: _bindgen_ty_15 = 131149;
pub const _NL_WMON_1: _bindgen_ty_15 = 131150;
pub const _NL_WMON_2: _bindgen_ty_15 = 131151;
pub const _NL_WMON_3: _bindgen_ty_15 = 131152;
pub const _NL_WMON_4: _bindgen_ty_15 = 131153;
pub const _NL_WMON_5: _bindgen_ty_15 = 131154;
pub const _NL_WMON_6: _bindgen_ty_15 = 131155;
pub const _NL_WMON_7: _bindgen_ty_15 = 131156;
pub const _NL_WMON_8: _bindgen_ty_15 = 131157;
pub const _NL_WMON_9: _bindgen_ty_15 = 131158;
pub const _NL_WMON_10: _bindgen_ty_15 = 131159;
pub const _NL_WMON_11: _bindgen_ty_15 = 131160;
pub const _NL_WMON_12: _bindgen_ty_15 = 131161;
pub const _NL_WAM_STR: _bindgen_ty_15 = 131162;
pub const _NL_WPM_STR: _bindgen_ty_15 = 131163;
pub const _NL_WD_T_FMT: _bindgen_ty_15 = 131164;
pub const _NL_WD_FMT: _bindgen_ty_15 = 131165;
pub const _NL_WT_FMT: _bindgen_ty_15 = 131166;
pub const _NL_WT_FMT_AMPM: _bindgen_ty_15 = 131167;
pub const _NL_WERA_YEAR: _bindgen_ty_15 = 131168;
pub const _NL_WERA_D_FMT: _bindgen_ty_15 = 131169;
pub const _NL_WALT_DIGITS: _bindgen_ty_15 = 131170;
pub const _NL_WERA_D_T_FMT: _bindgen_ty_15 = 131171;
pub const _NL_WERA_T_FMT: _bindgen_ty_15 = 131172;
pub const _NL_TIME_WEEK_NDAYS: _bindgen_ty_15 = 131173;
pub const _NL_TIME_WEEK_1STDAY: _bindgen_ty_15 = 131174;
pub const _NL_TIME_WEEK_1STWEEK: _bindgen_ty_15 = 131175;
pub const _NL_TIME_FIRST_WEEKDAY: _bindgen_ty_15 = 131176;
pub const _NL_TIME_FIRST_WORKDAY: _bindgen_ty_15 = 131177;
pub const _NL_TIME_CAL_DIRECTION: _bindgen_ty_15 = 131178;
pub const _NL_TIME_TIMEZONE: _bindgen_ty_15 = 131179;
pub const _DATE_FMT: _bindgen_ty_15 = 131180;
pub const _NL_W_DATE_FMT: _bindgen_ty_15 = 131181;
pub const _NL_TIME_CODESET: _bindgen_ty_15 = 131182;
pub const __ALTMON_1: _bindgen_ty_15 = 131183;
pub const __ALTMON_2: _bindgen_ty_15 = 131184;
pub const __ALTMON_3: _bindgen_ty_15 = 131185;
pub const __ALTMON_4: _bindgen_ty_15 = 131186;
pub const __ALTMON_5: _bindgen_ty_15 = 131187;
pub const __ALTMON_6: _bindgen_ty_15 = 131188;
pub const __ALTMON_7: _bindgen_ty_15 = 131189;
pub const __ALTMON_8: _bindgen_ty_15 = 131190;
pub const __ALTMON_9: _bindgen_ty_15 = 131191;
pub const __ALTMON_10: _bindgen_ty_15 = 131192;
pub const __ALTMON_11: _bindgen_ty_15 = 131193;
pub const __ALTMON_12: _bindgen_ty_15 = 131194;
pub const _NL_WALTMON_1: _bindgen_ty_15 = 131195;
pub const _NL_WALTMON_2: _bindgen_ty_15 = 131196;
pub const _NL_WALTMON_3: _bindgen_ty_15 = 131197;
pub const _NL_WALTMON_4: _bindgen_ty_15 = 131198;
pub const _NL_WALTMON_5: _bindgen_ty_15 = 131199;
pub const _NL_WALTMON_6: _bindgen_ty_15 = 131200;
pub const _NL_WALTMON_7: _bindgen_ty_15 = 131201;
pub const _NL_WALTMON_8: _bindgen_ty_15 = 131202;
pub const _NL_WALTMON_9: _bindgen_ty_15 = 131203;
pub const _NL_WALTMON_10: _bindgen_ty_15 = 131204;
pub const _NL_WALTMON_11: _bindgen_ty_15 = 131205;
pub const _NL_WALTMON_12: _bindgen_ty_15 = 131206;
pub const _NL_ABALTMON_1: _bindgen_ty_15 = 131207;
pub const _NL_ABALTMON_2: _bindgen_ty_15 = 131208;
pub const _NL_ABALTMON_3: _bindgen_ty_15 = 131209;
pub const _NL_ABALTMON_4: _bindgen_ty_15 = 131210;
pub const _NL_ABALTMON_5: _bindgen_ty_15 = 131211;
pub const _NL_ABALTMON_6: _bindgen_ty_15 = 131212;
pub const _NL_ABALTMON_7: _bindgen_ty_15 = 131213;
pub const _NL_ABALTMON_8: _bindgen_ty_15 = 131214;
pub const _NL_ABALTMON_9: _bindgen_ty_15 = 131215;
pub const _NL_ABALTMON_10: _bindgen_ty_15 = 131216;
pub const _NL_ABALTMON_11: _bindgen_ty_15 = 131217;
pub const _NL_ABALTMON_12: _bindgen_ty_15 = 131218;
pub const _NL_WABALTMON_1: _bindgen_ty_15 = 131219;
pub const _NL_WABALTMON_2: _bindgen_ty_15 = 131220;
pub const _NL_WABALTMON_3: _bindgen_ty_15 = 131221;
pub const _NL_WABALTMON_4: _bindgen_ty_15 = 131222;
pub const _NL_WABALTMON_5: _bindgen_ty_15 = 131223;
pub const _NL_WABALTMON_6: _bindgen_ty_15 = 131224;
pub const _NL_WABALTMON_7: _bindgen_ty_15 = 131225;
pub const _NL_WABALTMON_8: _bindgen_ty_15 = 131226;
pub const _NL_WABALTMON_9: _bindgen_ty_15 = 131227;
pub const _NL_WABALTMON_10: _bindgen_ty_15 = 131228;
pub const _NL_WABALTMON_11: _bindgen_ty_15 = 131229;
pub const _NL_WABALTMON_12: _bindgen_ty_15 = 131230;
pub const _NL_NUM_LC_TIME: _bindgen_ty_15 = 131231;
pub const _NL_COLLATE_NRULES: _bindgen_ty_15 = 196608;
pub const _NL_COLLATE_RULESETS: _bindgen_ty_15 = 196609;
pub const _NL_COLLATE_TABLEMB: _bindgen_ty_15 = 196610;
pub const _NL_COLLATE_WEIGHTMB: _bindgen_ty_15 = 196611;
pub const _NL_COLLATE_EXTRAMB: _bindgen_ty_15 = 196612;
pub const _NL_COLLATE_INDIRECTMB: _bindgen_ty_15 = 196613;
pub const _NL_COLLATE_GAP1: _bindgen_ty_15 = 196614;
pub const _NL_COLLATE_GAP2: _bindgen_ty_15 = 196615;
pub const _NL_COLLATE_GAP3: _bindgen_ty_15 = 196616;
pub const _NL_COLLATE_TABLEWC: _bindgen_ty_15 = 196617;
pub const _NL_COLLATE_WEIGHTWC: _bindgen_ty_15 = 196618;
pub const _NL_COLLATE_EXTRAWC: _bindgen_ty_15 = 196619;
pub const _NL_COLLATE_INDIRECTWC: _bindgen_ty_15 = 196620;
pub const _NL_COLLATE_SYMB_HASH_SIZEMB: _bindgen_ty_15 = 196621;
pub const _NL_COLLATE_SYMB_TABLEMB: _bindgen_ty_15 = 196622;
pub const _NL_COLLATE_SYMB_EXTRAMB: _bindgen_ty_15 = 196623;
pub const _NL_COLLATE_COLLSEQMB: _bindgen_ty_15 = 196624;
pub const _NL_COLLATE_COLLSEQWC: _bindgen_ty_15 = 196625;
pub const _NL_COLLATE_CODESET: _bindgen_ty_15 = 196626;
pub const _NL_NUM_LC_COLLATE: _bindgen_ty_15 = 196627;
pub const _NL_CTYPE_CLASS: _bindgen_ty_15 = 0;
pub const _NL_CTYPE_TOUPPER: _bindgen_ty_15 = 1;
pub const _NL_CTYPE_GAP1: _bindgen_ty_15 = 2;
pub const _NL_CTYPE_TOLOWER: _bindgen_ty_15 = 3;
pub const _NL_CTYPE_GAP2: _bindgen_ty_15 = 4;
pub const _NL_CTYPE_CLASS32: _bindgen_ty_15 = 5;
pub const _NL_CTYPE_GAP3: _bindgen_ty_15 = 6;
pub const _NL_CTYPE_GAP4: _bindgen_ty_15 = 7;
pub const _NL_CTYPE_GAP5: _bindgen_ty_15 = 8;
pub const _NL_CTYPE_GAP6: _bindgen_ty_15 = 9;
pub const _NL_CTYPE_CLASS_NAMES: _bindgen_ty_15 = 10;
pub const _NL_CTYPE_MAP_NAMES: _bindgen_ty_15 = 11;
pub const _NL_CTYPE_WIDTH: _bindgen_ty_15 = 12;
pub const _NL_CTYPE_MB_CUR_MAX: _bindgen_ty_15 = 13;
pub const _NL_CTYPE_CODESET_NAME: _bindgen_ty_15 = 14;
pub const CODESET: _bindgen_ty_15 = 14;
pub const _NL_CTYPE_TOUPPER32: _bindgen_ty_15 = 15;
pub const _NL_CTYPE_TOLOWER32: _bindgen_ty_15 = 16;
pub const _NL_CTYPE_CLASS_OFFSET: _bindgen_ty_15 = 17;
pub const _NL_CTYPE_MAP_OFFSET: _bindgen_ty_15 = 18;
pub const _NL_CTYPE_INDIGITS_MB_LEN: _bindgen_ty_15 = 19;
pub const _NL_CTYPE_INDIGITS0_MB: _bindgen_ty_15 = 20;
pub const _NL_CTYPE_INDIGITS1_MB: _bindgen_ty_15 = 21;
pub const _NL_CTYPE_INDIGITS2_MB: _bindgen_ty_15 = 22;
pub const _NL_CTYPE_INDIGITS3_MB: _bindgen_ty_15 = 23;
pub const _NL_CTYPE_INDIGITS4_MB: _bindgen_ty_15 = 24;
pub const _NL_CTYPE_INDIGITS5_MB: _bindgen_ty_15 = 25;
pub const _NL_CTYPE_INDIGITS6_MB: _bindgen_ty_15 = 26;
pub const _NL_CTYPE_INDIGITS7_MB: _bindgen_ty_15 = 27;
pub const _NL_CTYPE_INDIGITS8_MB: _bindgen_ty_15 = 28;
pub const _NL_CTYPE_INDIGITS9_MB: _bindgen_ty_15 = 29;
pub const _NL_CTYPE_INDIGITS_WC_LEN: _bindgen_ty_15 = 30;
pub const _NL_CTYPE_INDIGITS0_WC: _bindgen_ty_15 = 31;
pub const _NL_CTYPE_INDIGITS1_WC: _bindgen_ty_15 = 32;
pub const _NL_CTYPE_INDIGITS2_WC: _bindgen_ty_15 = 33;
pub const _NL_CTYPE_INDIGITS3_WC: _bindgen_ty_15 = 34;
pub const _NL_CTYPE_INDIGITS4_WC: _bindgen_ty_15 = 35;
pub const _NL_CTYPE_INDIGITS5_WC: _bindgen_ty_15 = 36;
pub const _NL_CTYPE_INDIGITS6_WC: _bindgen_ty_15 = 37;
pub const _NL_CTYPE_INDIGITS7_WC: _bindgen_ty_15 = 38;
pub const _NL_CTYPE_INDIGITS8_WC: _bindgen_ty_15 = 39;
pub const _NL_CTYPE_INDIGITS9_WC: _bindgen_ty_15 = 40;
pub const _NL_CTYPE_OUTDIGIT0_MB: _bindgen_ty_15 = 41;
pub const _NL_CTYPE_OUTDIGIT1_MB: _bindgen_ty_15 = 42;
pub const _NL_CTYPE_OUTDIGIT2_MB: _bindgen_ty_15 = 43;
pub const _NL_CTYPE_OUTDIGIT3_MB: _bindgen_ty_15 = 44;
pub const _NL_CTYPE_OUTDIGIT4_MB: _bindgen_ty_15 = 45;
pub const _NL_CTYPE_OUTDIGIT5_MB: _bindgen_ty_15 = 46;
pub const _NL_CTYPE_OUTDIGIT6_MB: _bindgen_ty_15 = 47;
pub const _NL_CTYPE_OUTDIGIT7_MB: _bindgen_ty_15 = 48;
pub const _NL_CTYPE_OUTDIGIT8_MB: _bindgen_ty_15 = 49;
pub const _NL_CTYPE_OUTDIGIT9_MB: _bindgen_ty_15 = 50;
pub const _NL_CTYPE_OUTDIGIT0_WC: _bindgen_ty_15 = 51;
pub const _NL_CTYPE_OUTDIGIT1_WC: _bindgen_ty_15 = 52;
pub const _NL_CTYPE_OUTDIGIT2_WC: _bindgen_ty_15 = 53;
pub const _NL_CTYPE_OUTDIGIT3_WC: _bindgen_ty_15 = 54;
pub const _NL_CTYPE_OUTDIGIT4_WC: _bindgen_ty_15 = 55;
pub const _NL_CTYPE_OUTDIGIT5_WC: _bindgen_ty_15 = 56;
pub const _NL_CTYPE_OUTDIGIT6_WC: _bindgen_ty_15 = 57;
pub const _NL_CTYPE_OUTDIGIT7_WC: _bindgen_ty_15 = 58;
pub const _NL_CTYPE_OUTDIGIT8_WC: _bindgen_ty_15 = 59;
pub const _NL_CTYPE_OUTDIGIT9_WC: _bindgen_ty_15 = 60;
pub const _NL_CTYPE_TRANSLIT_TAB_SIZE: _bindgen_ty_15 = 61;
pub const _NL_CTYPE_TRANSLIT_FROM_IDX: _bindgen_ty_15 = 62;
pub const _NL_CTYPE_TRANSLIT_FROM_TBL: _bindgen_ty_15 = 63;
pub const _NL_CTYPE_TRANSLIT_TO_IDX: _bindgen_ty_15 = 64;
pub const _NL_CTYPE_TRANSLIT_TO_TBL: _bindgen_ty_15 = 65;
pub const _NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN: _bindgen_ty_15 = 66;
pub const _NL_CTYPE_TRANSLIT_DEFAULT_MISSING: _bindgen_ty_15 = 67;
pub const _NL_CTYPE_TRANSLIT_IGNORE_LEN: _bindgen_ty_15 = 68;
pub const _NL_CTYPE_TRANSLIT_IGNORE: _bindgen_ty_15 = 69;
pub const _NL_CTYPE_MAP_TO_NONASCII: _bindgen_ty_15 = 70;
pub const _NL_CTYPE_NONASCII_CASE: _bindgen_ty_15 = 71;
pub const _NL_CTYPE_EXTRA_MAP_1: _bindgen_ty_15 = 72;
pub const _NL_CTYPE_EXTRA_MAP_2: _bindgen_ty_15 = 73;
pub const _NL_CTYPE_EXTRA_MAP_3: _bindgen_ty_15 = 74;
pub const _NL_CTYPE_EXTRA_MAP_4: _bindgen_ty_15 = 75;
pub const _NL_CTYPE_EXTRA_MAP_5: _bindgen_ty_15 = 76;
pub const _NL_CTYPE_EXTRA_MAP_6: _bindgen_ty_15 = 77;
pub const _NL_CTYPE_EXTRA_MAP_7: _bindgen_ty_15 = 78;
pub const _NL_CTYPE_EXTRA_MAP_8: _bindgen_ty_15 = 79;
pub const _NL_CTYPE_EXTRA_MAP_9: _bindgen_ty_15 = 80;
pub const _NL_CTYPE_EXTRA_MAP_10: _bindgen_ty_15 = 81;
pub const _NL_CTYPE_EXTRA_MAP_11: _bindgen_ty_15 = 82;
pub const _NL_CTYPE_EXTRA_MAP_12: _bindgen_ty_15 = 83;
pub const _NL_CTYPE_EXTRA_MAP_13: _bindgen_ty_15 = 84;
pub const _NL_CTYPE_EXTRA_MAP_14: _bindgen_ty_15 = 85;
pub const _NL_NUM_LC_CTYPE: _bindgen_ty_15 = 86;
pub const __INT_CURR_SYMBOL: _bindgen_ty_15 = 262144;
pub const __CURRENCY_SYMBOL: _bindgen_ty_15 = 262145;
pub const __MON_DECIMAL_POINT: _bindgen_ty_15 = 262146;
pub const __MON_THOUSANDS_SEP: _bindgen_ty_15 = 262147;
pub const __MON_GROUPING: _bindgen_ty_15 = 262148;
pub const __POSITIVE_SIGN: _bindgen_ty_15 = 262149;
pub const __NEGATIVE_SIGN: _bindgen_ty_15 = 262150;
pub const __INT_FRAC_DIGITS: _bindgen_ty_15 = 262151;
pub const __FRAC_DIGITS: _bindgen_ty_15 = 262152;
pub const __P_CS_PRECEDES: _bindgen_ty_15 = 262153;
pub const __P_SEP_BY_SPACE: _bindgen_ty_15 = 262154;
pub const __N_CS_PRECEDES: _bindgen_ty_15 = 262155;
pub const __N_SEP_BY_SPACE: _bindgen_ty_15 = 262156;
pub const __P_SIGN_POSN: _bindgen_ty_15 = 262157;
pub const __N_SIGN_POSN: _bindgen_ty_15 = 262158;
pub const _NL_MONETARY_CRNCYSTR: _bindgen_ty_15 = 262159;
pub const __INT_P_CS_PRECEDES: _bindgen_ty_15 = 262160;
pub const __INT_P_SEP_BY_SPACE: _bindgen_ty_15 = 262161;
pub const __INT_N_CS_PRECEDES: _bindgen_ty_15 = 262162;
pub const __INT_N_SEP_BY_SPACE: _bindgen_ty_15 = 262163;
pub const __INT_P_SIGN_POSN: _bindgen_ty_15 = 262164;
pub const __INT_N_SIGN_POSN: _bindgen_ty_15 = 262165;
pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: _bindgen_ty_15 = 262166;
pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: _bindgen_ty_15 = 262167;
pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: _bindgen_ty_15 = 262168;
pub const _NL_MONETARY_DUO_FRAC_DIGITS: _bindgen_ty_15 = 262169;
pub const _NL_MONETARY_DUO_P_CS_PRECEDES: _bindgen_ty_15 = 262170;
pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: _bindgen_ty_15 = 262171;
pub const _NL_MONETARY_DUO_N_CS_PRECEDES: _bindgen_ty_15 = 262172;
pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: _bindgen_ty_15 = 262173;
pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: _bindgen_ty_15 = 262174;
pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: _bindgen_ty_15 = 262175;
pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: _bindgen_ty_15 = 262176;
pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: _bindgen_ty_15 = 262177;
pub const _NL_MONETARY_DUO_P_SIGN_POSN: _bindgen_ty_15 = 262178;
pub const _NL_MONETARY_DUO_N_SIGN_POSN: _bindgen_ty_15 = 262179;
pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: _bindgen_ty_15 = 262180;
pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: _bindgen_ty_15 = 262181;
pub const _NL_MONETARY_UNO_VALID_FROM: _bindgen_ty_15 = 262182;
pub const _NL_MONETARY_UNO_VALID_TO: _bindgen_ty_15 = 262183;
pub const _NL_MONETARY_DUO_VALID_FROM: _bindgen_ty_15 = 262184;
pub const _NL_MONETARY_DUO_VALID_TO: _bindgen_ty_15 = 262185;
pub const _NL_MONETARY_CONVERSION_RATE: _bindgen_ty_15 = 262186;
pub const _NL_MONETARY_DECIMAL_POINT_WC: _bindgen_ty_15 = 262187;
pub const _NL_MONETARY_THOUSANDS_SEP_WC: _bindgen_ty_15 = 262188;
pub const _NL_MONETARY_CODESET: _bindgen_ty_15 = 262189;
pub const _NL_NUM_LC_MONETARY: _bindgen_ty_15 = 262190;
pub const __DECIMAL_POINT: _bindgen_ty_15 = 65536;
pub const RADIXCHAR: _bindgen_ty_15 = 65536;
pub const __THOUSANDS_SEP: _bindgen_ty_15 = 65537;
pub const THOUSEP: _bindgen_ty_15 = 65537;
pub const __GROUPING: _bindgen_ty_15 = 65538;
pub const _NL_NUMERIC_DECIMAL_POINT_WC: _bindgen_ty_15 = 65539;
pub const _NL_NUMERIC_THOUSANDS_SEP_WC: _bindgen_ty_15 = 65540;
pub const _NL_NUMERIC_CODESET: _bindgen_ty_15 = 65541;
pub const _NL_NUM_LC_NUMERIC: _bindgen_ty_15 = 65542;
pub const __YESEXPR: _bindgen_ty_15 = 327680;
pub const __NOEXPR: _bindgen_ty_15 = 327681;
pub const __YESSTR: _bindgen_ty_15 = 327682;
pub const __NOSTR: _bindgen_ty_15 = 327683;
pub const _NL_MESSAGES_CODESET: _bindgen_ty_15 = 327684;
pub const _NL_NUM_LC_MESSAGES: _bindgen_ty_15 = 327685;
pub const _NL_PAPER_HEIGHT: _bindgen_ty_15 = 458752;
pub const _NL_PAPER_WIDTH: _bindgen_ty_15 = 458753;
pub const _NL_PAPER_CODESET: _bindgen_ty_15 = 458754;
pub const _NL_NUM_LC_PAPER: _bindgen_ty_15 = 458755;
pub const _NL_NAME_NAME_FMT: _bindgen_ty_15 = 524288;
pub const _NL_NAME_NAME_GEN: _bindgen_ty_15 = 524289;
pub const _NL_NAME_NAME_MR: _bindgen_ty_15 = 524290;
pub const _NL_NAME_NAME_MRS: _bindgen_ty_15 = 524291;
pub const _NL_NAME_NAME_MISS: _bindgen_ty_15 = 524292;
pub const _NL_NAME_NAME_MS: _bindgen_ty_15 = 524293;
pub const _NL_NAME_CODESET: _bindgen_ty_15 = 524294;
pub const _NL_NUM_LC_NAME: _bindgen_ty_15 = 524295;
pub const _NL_ADDRESS_POSTAL_FMT: _bindgen_ty_15 = 589824;
pub const _NL_ADDRESS_COUNTRY_NAME: _bindgen_ty_15 = 589825;
pub const _NL_ADDRESS_COUNTRY_POST: _bindgen_ty_15 = 589826;
pub const _NL_ADDRESS_COUNTRY_AB2: _bindgen_ty_15 = 589827;
pub const _NL_ADDRESS_COUNTRY_AB3: _bindgen_ty_15 = 589828;
pub const _NL_ADDRESS_COUNTRY_CAR: _bindgen_ty_15 = 589829;
pub const _NL_ADDRESS_COUNTRY_NUM: _bindgen_ty_15 = 589830;
pub const _NL_ADDRESS_COUNTRY_ISBN: _bindgen_ty_15 = 589831;
pub const _NL_ADDRESS_LANG_NAME: _bindgen_ty_15 = 589832;
pub const _NL_ADDRESS_LANG_AB: _bindgen_ty_15 = 589833;
pub const _NL_ADDRESS_LANG_TERM: _bindgen_ty_15 = 589834;
pub const _NL_ADDRESS_LANG_LIB: _bindgen_ty_15 = 589835;
pub const _NL_ADDRESS_CODESET: _bindgen_ty_15 = 589836;
pub const _NL_NUM_LC_ADDRESS: _bindgen_ty_15 = 589837;
pub const _NL_TELEPHONE_TEL_INT_FMT: _bindgen_ty_15 = 655360;
pub const _NL_TELEPHONE_TEL_DOM_FMT: _bindgen_ty_15 = 655361;
pub const _NL_TELEPHONE_INT_SELECT: _bindgen_ty_15 = 655362;
pub const _NL_TELEPHONE_INT_PREFIX: _bindgen_ty_15 = 655363;
pub const _NL_TELEPHONE_CODESET: _bindgen_ty_15 = 655364;
pub const _NL_NUM_LC_TELEPHONE: _bindgen_ty_15 = 655365;
pub const _NL_MEASUREMENT_MEASUREMENT: _bindgen_ty_15 = 720896;
pub const _NL_MEASUREMENT_CODESET: _bindgen_ty_15 = 720897;
pub const _NL_NUM_LC_MEASUREMENT: _bindgen_ty_15 = 720898;
pub const _NL_IDENTIFICATION_TITLE: _bindgen_ty_15 = 786432;
pub const _NL_IDENTIFICATION_SOURCE: _bindgen_ty_15 = 786433;
pub const _NL_IDENTIFICATION_ADDRESS: _bindgen_ty_15 = 786434;
pub const _NL_IDENTIFICATION_CONTACT: _bindgen_ty_15 = 786435;
pub const _NL_IDENTIFICATION_EMAIL: _bindgen_ty_15 = 786436;
pub const _NL_IDENTIFICATION_TEL: _bindgen_ty_15 = 786437;
pub const _NL_IDENTIFICATION_FAX: _bindgen_ty_15 = 786438;
pub const _NL_IDENTIFICATION_LANGUAGE: _bindgen_ty_15 = 786439;
pub const _NL_IDENTIFICATION_TERRITORY: _bindgen_ty_15 = 786440;
pub const _NL_IDENTIFICATION_AUDIENCE: _bindgen_ty_15 = 786441;
pub const _NL_IDENTIFICATION_APPLICATION: _bindgen_ty_15 = 786442;
pub const _NL_IDENTIFICATION_ABBREVIATION: _bindgen_ty_15 = 786443;
pub const _NL_IDENTIFICATION_REVISION: _bindgen_ty_15 = 786444;
pub const _NL_IDENTIFICATION_DATE: _bindgen_ty_15 = 786445;
pub const _NL_IDENTIFICATION_CATEGORY: _bindgen_ty_15 = 786446;
pub const _NL_IDENTIFICATION_CODESET: _bindgen_ty_15 = 786447;
pub const _NL_NUM_LC_IDENTIFICATION: _bindgen_ty_15 = 786448;
pub const _NL_NUM: _bindgen_ty_15 = 786449;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlog {
    pub ll_time: __time_t,
    pub ll_line: [::std::os::raw::c_char; 32usize],
    pub ll_host: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_lastlog() {
    const UNINIT: ::std::mem::MaybeUninit<lastlog> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lastlog>(),
        296usize,
        concat!("Size of: ", stringify!(lastlog))
    );
    assert_eq!(
        ::std::mem::align_of::<lastlog>(),
        8usize,
        concat!("Alignment of ", stringify!(lastlog))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lastlog),
            "::",
            stringify!(ll_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lastlog),
            "::",
            stringify!(ll_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ll_host) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lastlog),
            "::",
            stringify!(ll_host)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exit_status {
    pub e_termination: ::std::os::raw::c_short,
    pub e_exit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_exit_status() {
    const UNINIT: ::std::mem::MaybeUninit<exit_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exit_status>(),
        4usize,
        concat!("Size of: ", stringify!(exit_status))
    );
    assert_eq!(
        ::std::mem::align_of::<exit_status>(),
        2usize,
        concat!("Alignment of ", stringify!(exit_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_termination) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exit_status),
            "::",
            stringify!(e_termination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_exit) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(exit_status),
            "::",
            stringify!(e_exit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmp {
    pub ut_type: ::std::os::raw::c_short,
    pub ut_pid: pid_t,
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_user: [::std::os::raw::c_char; 32usize],
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_exit: exit_status,
    pub ut_session: ::std::os::raw::c_long,
    pub ut_tv: timeval,
    pub ut_addr_v6: [i32; 4usize],
    pub __glibc_reserved: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout_utmp() {
    const UNINIT: ::std::mem::MaybeUninit<utmp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<utmp>(),
        400usize,
        concat!("Size of: ", stringify!(utmp))
    );
    assert_eq!(
        ::std::mem::align_of::<utmp>(),
        8usize,
        concat!("Alignment of ", stringify!(utmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_user) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_host) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_exit) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_exit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_session) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_tv) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_addr_v6) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(ut_addr_v6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(utmp),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub type Elf_Symndx = u32;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union La_aarch64_vector {
    pub s: f32,
    pub d: f64,
    pub q: u128,
}
#[test]
fn bindgen_test_layout_La_aarch64_vector() {
    const UNINIT: ::std::mem::MaybeUninit<La_aarch64_vector> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<La_aarch64_vector>(),
        16usize,
        concat!("Size of: ", stringify!(La_aarch64_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<La_aarch64_vector>(),
        16usize,
        concat!("Alignment of ", stringify!(La_aarch64_vector))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_vector),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_vector),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_vector),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct La_aarch64_regs {
    pub lr_xreg: [u64; 9usize],
    pub __bindgen_padding_0: u64,
    pub lr_vreg: [La_aarch64_vector; 8usize],
    pub lr_sp: u64,
    pub lr_lr: u64,
    pub lr_vpcs: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_La_aarch64_regs() {
    const UNINIT: ::std::mem::MaybeUninit<La_aarch64_regs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<La_aarch64_regs>(),
        240usize,
        concat!("Size of: ", stringify!(La_aarch64_regs))
    );
    assert_eq!(
        ::std::mem::align_of::<La_aarch64_regs>(),
        16usize,
        concat!("Alignment of ", stringify!(La_aarch64_regs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_xreg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_regs),
            "::",
            stringify!(lr_xreg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_vreg) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_regs),
            "::",
            stringify!(lr_vreg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_sp) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_regs),
            "::",
            stringify!(lr_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_lr) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_regs),
            "::",
            stringify!(lr_lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_vpcs) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_regs),
            "::",
            stringify!(lr_vpcs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct La_aarch64_retval {
    pub lrv_xreg: [u64; 8usize],
    pub lrv_vreg: [La_aarch64_vector; 8usize],
    pub lrv_vpcs: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_La_aarch64_retval() {
    const UNINIT: ::std::mem::MaybeUninit<La_aarch64_retval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<La_aarch64_retval>(),
        208usize,
        concat!("Size of: ", stringify!(La_aarch64_retval))
    );
    assert_eq!(
        ::std::mem::align_of::<La_aarch64_retval>(),
        16usize,
        concat!("Alignment of ", stringify!(La_aarch64_retval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lrv_xreg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_retval),
            "::",
            stringify!(lrv_xreg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lrv_vreg) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_retval),
            "::",
            stringify!(lrv_vreg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lrv_vpcs) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(La_aarch64_retval),
            "::",
            stringify!(lrv_vpcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug {
    pub r_version: ::std::os::raw::c_int,
    pub r_map: *mut link_map,
    pub r_brk: Elf64_Addr,
    pub r_state: r_debug__bindgen_ty_1,
    pub r_ldbase: Elf64_Addr,
}
pub const r_debug_RT_CONSISTENT: r_debug__bindgen_ty_1 = 0;
pub const r_debug_RT_ADD: r_debug__bindgen_ty_1 = 1;
pub const r_debug_RT_DELETE: r_debug__bindgen_ty_1 = 2;
pub type r_debug__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_r_debug() {
    const UNINIT: ::std::mem::MaybeUninit<r_debug> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<r_debug>(),
        40usize,
        concat!("Size of: ", stringify!(r_debug))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug),
            "::",
            stringify!(r_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_map) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug),
            "::",
            stringify!(r_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_brk) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug),
            "::",
            stringify!(r_brk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug),
            "::",
            stringify!(r_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_ldbase) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug),
            "::",
            stringify!(r_ldbase)
        )
    );
}
extern "C" {
    pub static mut _r_debug: r_debug;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_extended {
    pub base: r_debug,
    pub r_next: *mut r_debug_extended,
}
#[test]
fn bindgen_test_layout_r_debug_extended() {
    const UNINIT: ::std::mem::MaybeUninit<r_debug_extended> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<r_debug_extended>(),
        48usize,
        concat!("Size of: ", stringify!(r_debug_extended))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_extended>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_extended))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_extended),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_extended),
            "::",
            stringify!(r_next)
        )
    );
}
extern "C" {
    pub static mut _DYNAMIC: [Elf64_Dyn; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct link_map {
    pub l_addr: Elf64_Addr,
    pub l_name: *mut ::std::os::raw::c_char,
    pub l_ld: *mut Elf64_Dyn,
    pub l_next: *mut link_map,
    pub l_prev: *mut link_map,
}
#[test]
fn bindgen_test_layout_link_map() {
    const UNINIT: ::std::mem::MaybeUninit<link_map> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<link_map>(),
        40usize,
        concat!("Size of: ", stringify!(link_map))
    );
    assert_eq!(
        ::std::mem::align_of::<link_map>(),
        8usize,
        concat!("Alignment of ", stringify!(link_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(link_map),
            "::",
            stringify!(l_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(link_map),
            "::",
            stringify!(l_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_ld) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(link_map),
            "::",
            stringify!(l_ld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(link_map),
            "::",
            stringify!(l_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_prev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(link_map),
            "::",
            stringify!(l_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    const UNINIT: ::std::mem::MaybeUninit<lconv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo {
    pub arena: ::std::os::raw::c_int,
    pub ordblks: ::std::os::raw::c_int,
    pub smblks: ::std::os::raw::c_int,
    pub hblks: ::std::os::raw::c_int,
    pub hblkhd: ::std::os::raw::c_int,
    pub usmblks: ::std::os::raw::c_int,
    pub fsmblks: ::std::os::raw::c_int,
    pub uordblks: ::std::os::raw::c_int,
    pub fordblks: ::std::os::raw::c_int,
    pub keepcost: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mallinfo() {
    const UNINIT: ::std::mem::MaybeUninit<mallinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mallinfo>(),
        40usize,
        concat!("Size of: ", stringify!(mallinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mallinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(mallinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordblks) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(ordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smblks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(smblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hblks) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hblkhd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblkhd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usmblks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(usmblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsmblks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fsmblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uordblks) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(uordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fordblks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepcost) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(keepcost)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo2 {
    pub arena: usize,
    pub ordblks: usize,
    pub smblks: usize,
    pub hblks: usize,
    pub hblkhd: usize,
    pub usmblks: usize,
    pub fsmblks: usize,
    pub uordblks: usize,
    pub fordblks: usize,
    pub keepcost: usize,
}
#[test]
fn bindgen_test_layout_mallinfo2() {
    const UNINIT: ::std::mem::MaybeUninit<mallinfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mallinfo2>(),
        80usize,
        concat!("Size of: ", stringify!(mallinfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<mallinfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(mallinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arena) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordblks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(ordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smblks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(smblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hblks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(hblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hblkhd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(hblkhd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usmblks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(usmblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsmblks) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(fsmblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uordblks) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(uordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fordblks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(fordblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepcost) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo2),
            "::",
            stringify!(keepcost)
        )
    );
}
pub const mcheck_status_MCHECK_DISABLED: mcheck_status = -1;
pub const mcheck_status_MCHECK_OK: mcheck_status = 0;
pub const mcheck_status_MCHECK_FREE: mcheck_status = 1;
pub const mcheck_status_MCHECK_HEAD: mcheck_status = 2;
pub const mcheck_status_MCHECK_TAIL: mcheck_status = 3;
pub type mcheck_status = ::std::os::raw::c_int;
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_uint;
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
pub type WINDOW = _win_st;
pub type attr_t = chtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    pub _cury: ::std::os::raw::c_short,
    pub _curx: ::std::os::raw::c_short,
    pub _maxy: ::std::os::raw::c_short,
    pub _maxx: ::std::os::raw::c_short,
    pub _begy: ::std::os::raw::c_short,
    pub _begx: ::std::os::raw::c_short,
    pub _flags: ::std::os::raw::c_short,
    pub _attrs: attr_t,
    pub _bkgd: chtype,
    pub _notimeout: bool,
    pub _clear: bool,
    pub _leaveok: bool,
    pub _scroll: bool,
    pub _idlok: bool,
    pub _idcok: bool,
    pub _immed: bool,
    pub _sync: bool,
    pub _use_keypad: bool,
    pub _delay: ::std::os::raw::c_int,
    pub _line: *mut ldat,
    pub _regtop: ::std::os::raw::c_short,
    pub _regbottom: ::std::os::raw::c_short,
    pub _parx: ::std::os::raw::c_int,
    pub _pary: ::std::os::raw::c_int,
    pub _parent: *mut WINDOW,
    pub _pad: _win_st_pdat,
    pub _yoffset: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st_pdat {
    pub _pad_y: ::std::os::raw::c_short,
    pub _pad_x: ::std::os::raw::c_short,
    pub _pad_top: ::std::os::raw::c_short,
    pub _pad_left: ::std::os::raw::c_short,
    pub _pad_bottom: ::std::os::raw::c_short,
    pub _pad_right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__win_st_pdat() {
    const UNINIT: ::std::mem::MaybeUninit<_win_st_pdat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_win_st_pdat>(),
        12usize,
        concat!("Size of: ", stringify!(_win_st_pdat))
    );
    assert_eq!(
        ::std::mem::align_of::<_win_st_pdat>(),
        2usize,
        concat!("Alignment of ", stringify!(_win_st_pdat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_y) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_x) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_top) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_left) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_bottom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad_right) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st_pdat),
            "::",
            stringify!(_pad_right)
        )
    );
}
#[test]
fn bindgen_test_layout__win_st() {
    const UNINIT: ::std::mem::MaybeUninit<_win_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_win_st>(),
        88usize,
        concat!("Size of: ", stringify!(_win_st))
    );
    assert_eq!(
        ::std::mem::align_of::<_win_st>(),
        8usize,
        concat!("Alignment of ", stringify!(_win_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cury) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_cury)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._curx) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_curx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._maxy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_maxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._maxx) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_maxx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._begy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_begy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._begx) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_begx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bkgd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_bkgd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._notimeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_notimeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._clear) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._leaveok) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_leaveok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._scroll) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._idlok) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_idlok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._idcok) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_idcok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._immed) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_immed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sync) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._use_keypad) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_use_keypad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._delay) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._line) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._regtop) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_regtop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._regbottom) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_regbottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._parx) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_parx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pary) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_pary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._parent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._yoffset) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_win_st),
            "::",
            stringify!(_yoffset)
        )
    );
}
pub type NCURSES_OUTC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_OUTC_sp = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut SCREEN, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
#[test]
fn bindgen_test_layout_MEVENT() {
    const UNINIT: ::std::mem::MaybeUninit<MEVENT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MEVENT>(),
        20usize,
        concat!("Size of: ", stringify!(MEVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<MEVENT>(),
        4usize,
        concat!("Alignment of ", stringify!(MEVENT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(MEVENT), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bstate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MEVENT),
            "::",
            stringify!(bstate)
        )
    );
}
pub type Menu_Options = ::std::os::raw::c_int;
pub type Item_Options = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TEXT {
    pub str_: *const ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_TEXT() {
    const UNINIT: ::std::mem::MaybeUninit<TEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TEXT>(),
        16usize,
        concat!("Size of: ", stringify!(TEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<TEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(TEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TEXT),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TEXT),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagITEM {
    pub name: TEXT,
    pub description: TEXT,
    pub imenu: *mut tagMENU,
    pub userptr: *mut ::std::os::raw::c_void,
    pub opt: Item_Options,
    pub index: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_short,
    pub value: bool,
    pub left: *mut tagITEM,
    pub right: *mut tagITEM,
    pub up: *mut tagITEM,
    pub down: *mut tagITEM,
}
#[test]
fn bindgen_test_layout_tagITEM() {
    const UNINIT: ::std::mem::MaybeUninit<tagITEM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagITEM>(),
        96usize,
        concat!("Size of: ", stringify!(tagITEM))
    );
    assert_eq!(
        ::std::mem::align_of::<tagITEM>(),
        8usize,
        concat!("Alignment of ", stringify!(tagITEM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imenu) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(imenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tagITEM),
            "::",
            stringify!(down)
        )
    );
}
pub type ITEM = tagITEM;
pub type Menu_Hook = ::std::option::Option<unsafe extern "C" fn(arg1: *mut tagMENU)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENU {
    pub height: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_short,
    pub rows: ::std::os::raw::c_short,
    pub cols: ::std::os::raw::c_short,
    pub frows: ::std::os::raw::c_short,
    pub fcols: ::std::os::raw::c_short,
    pub arows: ::std::os::raw::c_short,
    pub namelen: ::std::os::raw::c_short,
    pub desclen: ::std::os::raw::c_short,
    pub marklen: ::std::os::raw::c_short,
    pub itemlen: ::std::os::raw::c_short,
    pub spc_desc: ::std::os::raw::c_short,
    pub spc_cols: ::std::os::raw::c_short,
    pub spc_rows: ::std::os::raw::c_short,
    pub pattern: *mut ::std::os::raw::c_char,
    pub pindex: ::std::os::raw::c_short,
    pub win: *mut WINDOW,
    pub sub: *mut WINDOW,
    pub userwin: *mut WINDOW,
    pub usersub: *mut WINDOW,
    pub items: *mut *mut ITEM,
    pub nitems: ::std::os::raw::c_short,
    pub curitem: *mut ITEM,
    pub toprow: ::std::os::raw::c_short,
    pub fore: chtype,
    pub back: chtype,
    pub grey: chtype,
    pub pad: ::std::os::raw::c_uchar,
    pub menuinit: Menu_Hook,
    pub menuterm: Menu_Hook,
    pub iteminit: Menu_Hook,
    pub itemterm: Menu_Hook,
    pub userptr: *mut ::std::os::raw::c_void,
    pub mark: *mut ::std::os::raw::c_char,
    pub opt: Menu_Options,
    pub status: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagMENU() {
    const UNINIT: ::std::mem::MaybeUninit<tagMENU> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagMENU>(),
        184usize,
        concat!("Size of: ", stringify!(tagMENU))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMENU>(),
        8usize,
        concat!("Alignment of ", stringify!(tagMENU))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frows) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(frows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fcols) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(fcols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arows) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(arows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(desclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marklen) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(marklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemlen) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(itemlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spc_desc) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spc_cols) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spc_rows) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(spc_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pindex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userwin) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(userwin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usersub) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(usersub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nitems) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(nitems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curitem) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(curitem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toprow) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(toprow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fore) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(fore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grey) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(grey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menuinit) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(menuinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menuterm) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(menuterm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iteminit) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(iteminit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).itemterm) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(itemterm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userptr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMENU),
            "::",
            stringify!(status)
        )
    );
}
pub type MENU = tagMENU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mntent {
    pub mnt_fsname: *mut ::std::os::raw::c_char,
    pub mnt_dir: *mut ::std::os::raw::c_char,
    pub mnt_type: *mut ::std::os::raw::c_char,
    pub mnt_opts: *mut ::std::os::raw::c_char,
    pub mnt_freq: ::std::os::raw::c_int,
    pub mnt_passno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mntent() {
    const UNINIT: ::std::mem::MaybeUninit<mntent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mntent>(),
        40usize,
        concat!("Size of: ", stringify!(mntent))
    );
    assert_eq!(
        ::std::mem::align_of::<mntent>(),
        8usize,
        concat!("Alignment of ", stringify!(mntent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_fsname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_fsname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_dir) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_opts) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_freq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mnt_passno) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mntent),
            "::",
            stringify!(mnt_passno)
        )
    );
}
pub type mqd_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mq_attr {
    pub mq_flags: __syscall_slong_t,
    pub mq_maxmsg: __syscall_slong_t,
    pub mq_msgsize: __syscall_slong_t,
    pub mq_curmsgs: __syscall_slong_t,
    pub __pad: [__syscall_slong_t; 4usize],
}
#[test]
fn bindgen_test_layout_mq_attr() {
    const UNINIT: ::std::mem::MaybeUninit<mq_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mq_attr>(),
        64usize,
        concat!("Size of: ", stringify!(mq_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<mq_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(mq_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mq_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mq_attr),
            "::",
            stringify!(mq_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mq_maxmsg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mq_attr),
            "::",
            stringify!(mq_maxmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mq_msgsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mq_attr),
            "::",
            stringify!(mq_msgsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mq_curmsgs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mq_attr),
            "::",
            stringify!(mq_curmsgs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mq_attr),
            "::",
            stringify!(__pad)
        )
    );
}
pub const nss_status_NSS_STATUS_TRYAGAIN: nss_status = -2;
pub const nss_status_NSS_STATUS_UNAVAIL: nss_status = -1;
pub const nss_status_NSS_STATUS_NOTFOUND: nss_status = 0;
pub const nss_status_NSS_STATUS_SUCCESS: nss_status = 1;
pub const nss_status_NSS_STATUS_RETURN: nss_status = 2;
pub type nss_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gaih_addrtuple {
    pub next: *mut gaih_addrtuple,
    pub name: *mut ::std::os::raw::c_char,
    pub family: ::std::os::raw::c_int,
    pub addr: [u32; 4usize],
    pub scopeid: u32,
}
#[test]
fn bindgen_test_layout_gaih_addrtuple() {
    const UNINIT: ::std::mem::MaybeUninit<gaih_addrtuple> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gaih_addrtuple>(),
        40usize,
        concat!("Size of: ", stringify!(gaih_addrtuple))
    );
    assert_eq!(
        ::std::mem::align_of::<gaih_addrtuple>(),
        8usize,
        concat!("Alignment of ", stringify!(gaih_addrtuple))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gaih_addrtuple),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gaih_addrtuple),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gaih_addrtuple),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gaih_addrtuple),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scopeid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(gaih_addrtuple),
            "::",
            stringify!(scopeid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __netgrent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_addr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct etherent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct traced_file {
    _unused: [u8; 0],
}
pub type nss_endaliasent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endetherent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endgrent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endhostent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endnetent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endnetgrent =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut __netgrent) -> nss_status>;
pub type nss_endprotoent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endpwent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endrpcent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endservent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endsgent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_endspent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_getaliasbyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut aliasent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getaliasent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut aliasent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getcanonname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getetherent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut etherent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getgrent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut group,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getgrgid_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: __gid_t,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getgrnam_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_gethostbyaddr2_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: __socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut hostent,
        arg5: *mut ::std::os::raw::c_char,
        arg6: usize,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut i32,
    ) -> nss_status,
>;
pub type nss_gethostbyaddr_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: __socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut hostent,
        arg5: *mut ::std::os::raw::c_char,
        arg6: usize,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_gethostbyname2_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut hostent,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_gethostbyname3_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut hostent,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut i32,
        arg9: *mut *mut ::std::os::raw::c_char,
    ) -> nss_status,
>;
pub type nss_gethostbyname4_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut gaih_addrtuple,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut i32,
    ) -> nss_status,
>;
pub type nss_gethostbyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut hostent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_gethostent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut hostent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_gethostton_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut etherent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getnetbyaddr_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: u32,
        arg2: ::std::os::raw::c_int,
        arg3: *mut netent,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getnetbyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut netent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getnetent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut netent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getnetgrent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut __netgrent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getntohost_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ether_addr,
        arg2: *mut etherent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getprotobyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut protoent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getprotobynumber_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut protoent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getprotoent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut protoent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getpublickey = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getpwent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut passwd,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getpwnam_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getpwuid_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: __uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getrpcbyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut rpcent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getrpcbynumber_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut rpcent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getrpcent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut rpcent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getsecretkey = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getservbyname_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut servent,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getservbyport_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut servent,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getservent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut servent,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getsgent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut sgrp,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getsgnam_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut sgrp,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getspent_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut spwd,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_getspnam_r = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut spwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_init = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: usize, arg2: *mut traced_file)>,
    ),
>;
pub type nss_initgroups_dyn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: __gid_t,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut *mut __gid_t,
        arg6: ::std::os::raw::c_long,
        arg7: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_netname2user = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut __uid_t,
        arg3: *mut __gid_t,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut __gid_t,
        arg6: *mut ::std::os::raw::c_int,
    ) -> nss_status,
>;
pub type nss_setaliasent = ::std::option::Option<unsafe extern "C" fn() -> nss_status>;
pub type nss_setetherent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setgrent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_sethostent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setnetent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setnetgrent = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: *mut __netgrent) -> nss_status,
>;
pub type nss_setprotoent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setpwent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setrpcent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setservent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setsgent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
pub type nss_setspent =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> nss_status>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _obstack_chunk {
    pub limit: *mut ::std::os::raw::c_char,
    pub prev: *mut _obstack_chunk,
    pub contents: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__obstack_chunk() {
    const UNINIT: ::std::mem::MaybeUninit<_obstack_chunk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_obstack_chunk>(),
        24usize,
        concat!("Size of: ", stringify!(_obstack_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<_obstack_chunk>(),
        8usize,
        concat!("Alignment of ", stringify!(_obstack_chunk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_obstack_chunk),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_obstack_chunk),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_obstack_chunk),
            "::",
            stringify!(contents)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct obstack {
    pub chunk_size: ::std::os::raw::c_long,
    pub chunk: *mut _obstack_chunk,
    pub object_base: *mut ::std::os::raw::c_char,
    pub next_free: *mut ::std::os::raw::c_char,
    pub chunk_limit: *mut ::std::os::raw::c_char,
    pub temp: obstack__bindgen_ty_1,
    pub alignment_mask: ::std::os::raw::c_int,
    pub chunkfun: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_long,
        ) -> *mut _obstack_chunk,
    >,
    pub freefun: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut _obstack_chunk),
    >,
    pub extra_arg: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union obstack__bindgen_ty_1 {
    pub tempint: ::std::os::raw::c_long,
    pub tempptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_obstack__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<obstack__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<obstack__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(obstack__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<obstack__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(obstack__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tempint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack__bindgen_ty_1),
            "::",
            stringify!(tempint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tempptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack__bindgen_ty_1),
            "::",
            stringify!(tempptr)
        )
    );
}
#[test]
fn bindgen_test_layout_obstack() {
    const UNINIT: ::std::mem::MaybeUninit<obstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<obstack>(),
        88usize,
        concat!("Size of: ", stringify!(obstack))
    );
    assert_eq!(
        ::std::mem::align_of::<obstack>(),
        8usize,
        concat!("Alignment of ", stringify!(obstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(chunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(object_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(next_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_limit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(chunk_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(alignment_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunkfun) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(chunkfun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freefun) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(freefun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_arg) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(obstack),
            "::",
            stringify!(extra_arg)
        )
    );
}
impl obstack {
    #[inline]
    pub fn use_extra_arg(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_extra_arg(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maybe_empty_object(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_maybe_empty_object(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alloc_failed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alloc_failed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        use_extra_arg: ::std::os::raw::c_uint,
        maybe_empty_object: ::std::os::raw::c_uint,
        alloc_failed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let use_extra_arg: u32 = unsafe { ::std::mem::transmute(use_extra_arg) };
            use_extra_arg as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let maybe_empty_object: u32 = unsafe { ::std::mem::transmute(maybe_empty_object) };
            maybe_empty_object as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let alloc_failed: u32 = unsafe { ::std::mem::transmute(alloc_failed) };
            alloc_failed as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut obstack_alloc_failed_handler: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut obstack_exit_failure: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct panel {
    pub win: *mut WINDOW,
    pub below: *mut panel,
    pub above: *mut panel,
    pub user: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_panel() {
    const UNINIT: ::std::mem::MaybeUninit<panel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<panel>(),
        32usize,
        concat!("Size of: ", stringify!(panel))
    );
    assert_eq!(
        ::std::mem::align_of::<panel>(),
        8usize,
        concat!("Alignment of ", stringify!(panel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).below) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(below)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).above) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(above)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(panel),
            "::",
            stringify!(user)
        )
    );
}
pub type PANEL = panel;
pub type nfds_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pollfd() {
    const UNINIT: ::std::mem::MaybeUninit<pollfd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pollfd>(),
        8usize,
        concat!("Size of: ", stringify!(pollfd))
    );
    assert_eq!(
        ::std::mem::align_of::<pollfd>(),
        4usize,
        concat!("Alignment of ", stringify!(pollfd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revents) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(revents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct printf_info {
    pub prec: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub spec: wchar_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub user: ::std::os::raw::c_ushort,
    pub pad: wchar_t,
}
#[test]
fn bindgen_test_layout_printf_info() {
    const UNINIT: ::std::mem::MaybeUninit<printf_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<printf_info>(),
        20usize,
        concat!("Size of: ", stringify!(printf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<printf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(printf_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(printf_info),
            "::",
            stringify!(prec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(printf_info),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(printf_info),
            "::",
            stringify!(spec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(printf_info),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(printf_info),
            "::",
            stringify!(pad)
        )
    );
}
impl printf_info {
    #[inline]
    pub fn is_long_double(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_long_double(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_short(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_short(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_long(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_long(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn space(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_space(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn left(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_left(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn showsign(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_showsign(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn group(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_group(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extra(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extra(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_char(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_char(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wide(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wide(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn i18n(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_i18n(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_binary128(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_binary128(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set___pad(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_long_double: ::std::os::raw::c_uint,
        is_short: ::std::os::raw::c_uint,
        is_long: ::std::os::raw::c_uint,
        alt: ::std::os::raw::c_uint,
        space: ::std::os::raw::c_uint,
        left: ::std::os::raw::c_uint,
        showsign: ::std::os::raw::c_uint,
        group: ::std::os::raw::c_uint,
        extra: ::std::os::raw::c_uint,
        is_char: ::std::os::raw::c_uint,
        wide: ::std::os::raw::c_uint,
        i18n: ::std::os::raw::c_uint,
        is_binary128: ::std::os::raw::c_uint,
        __pad: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_long_double: u32 = unsafe { ::std::mem::transmute(is_long_double) };
            is_long_double as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_short: u32 = unsafe { ::std::mem::transmute(is_short) };
            is_short as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_long: u32 = unsafe { ::std::mem::transmute(is_long) };
            is_long as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let alt: u32 = unsafe { ::std::mem::transmute(alt) };
            alt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let space: u32 = unsafe { ::std::mem::transmute(space) };
            space as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let left: u32 = unsafe { ::std::mem::transmute(left) };
            left as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let showsign: u32 = unsafe { ::std::mem::transmute(showsign) };
            showsign as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let group: u32 = unsafe { ::std::mem::transmute(group) };
            group as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let extra: u32 = unsafe { ::std::mem::transmute(extra) };
            extra as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let is_char: u32 = unsafe { ::std::mem::transmute(is_char) };
            is_char as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let wide: u32 = unsafe { ::std::mem::transmute(wide) };
            wide as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let i18n: u32 = unsafe { ::std::mem::transmute(i18n) };
            i18n as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_binary128: u32 = unsafe { ::std::mem::transmute(is_binary128) };
            is_binary128 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let __pad: u32 = unsafe { ::std::mem::transmute(__pad) };
            __pad as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type printf_function = ::std::option::Option<
    unsafe extern "C" fn(
        __stream: *mut FILE,
        __info: *const printf_info,
        __args: *const *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type printf_arginfo_size_function = ::std::option::Option<
    unsafe extern "C" fn(
        __info: *const printf_info,
        __n: usize,
        __argtypes: *mut ::std::os::raw::c_int,
        __size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type printf_arginfo_function = ::std::option::Option<
    unsafe extern "C" fn(
        __info: *const printf_info,
        __n: usize,
        __argtypes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type printf_va_arg_function = ::std::option::Option<
    unsafe extern "C" fn(__mem: *mut ::std::os::raw::c_void, __ap: *mut va_list),
>;
pub const PA_INT: _bindgen_ty_16 = 0;
pub const PA_CHAR: _bindgen_ty_16 = 1;
pub const PA_WCHAR: _bindgen_ty_16 = 2;
pub const PA_STRING: _bindgen_ty_16 = 3;
pub const PA_WSTRING: _bindgen_ty_16 = 4;
pub const PA_POINTER: _bindgen_ty_16 = 5;
pub const PA_FLOAT: _bindgen_ty_16 = 6;
pub const PA_DOUBLE: _bindgen_ty_16 = 7;
pub const PA_LAST: _bindgen_ty_16 = 8;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_user_regs_struct() {
    const UNINIT: ::std::mem::MaybeUninit<user_regs_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<user_regs_struct>(),
        272usize,
        concat!("Size of: ", stringify!(user_regs_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<user_regs_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(user_regs_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(user_regs_struct),
            "::",
            stringify!(pstate)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct user_fpsimd_struct {
    pub vregs: [__uint128_t; 32usize],
    pub fpsr: ::std::os::raw::c_uint,
    pub fpcr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_user_fpsimd_struct() {
    const UNINIT: ::std::mem::MaybeUninit<user_fpsimd_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<user_fpsimd_struct>(),
        528usize,
        concat!("Size of: ", stringify!(user_fpsimd_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<user_fpsimd_struct>(),
        16usize,
        concat!("Alignment of ", stringify!(user_fpsimd_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(vregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpcr) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(user_fpsimd_struct),
            "::",
            stringify!(fpcr)
        )
    );
}
pub type elf_greg_t = __uint64_t;
pub type elf_gregset_t = [elf_greg_t; 34usize];
pub type elf_fpregset_t = user_fpsimd_struct;
pub type __pr_uid_t = ::std::os::raw::c_uint;
pub type __pr_gid_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_elf_siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<elf_siginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_siginfo>(),
        12usize,
        concat!("Size of: ", stringify!(elf_siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<elf_siginfo>(),
        4usize,
        concat!("Alignment of ", stringify!(elf_siginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_siginfo),
            "::",
            stringify!(si_errno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prstatus {
    pub pr_info: elf_siginfo,
    pub pr_cursig: ::std::os::raw::c_short,
    pub pr_sigpend: ::std::os::raw::c_ulong,
    pub pr_sighold: ::std::os::raw::c_ulong,
    pub pr_pid: __pid_t,
    pub pr_ppid: __pid_t,
    pub pr_pgrp: __pid_t,
    pub pr_sid: __pid_t,
    pub pr_utime: timeval,
    pub pr_stime: timeval,
    pub pr_cutime: timeval,
    pub pr_cstime: timeval,
    pub pr_reg: elf_gregset_t,
    pub pr_fpvalid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_elf_prstatus() {
    const UNINIT: ::std::mem::MaybeUninit<elf_prstatus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_prstatus>(),
        392usize,
        concat!("Size of: ", stringify!(elf_prstatus))
    );
    assert_eq!(
        ::std::mem::align_of::<elf_prstatus>(),
        8usize,
        concat!("Alignment of ", stringify!(elf_prstatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cursig) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cursig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sigpend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_sigpend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sighold) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_sighold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_ppid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_ppid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pgrp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_pgrp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sid) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_utime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_stime) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cutime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cutime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_cstime) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_cstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_reg) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_fpvalid) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prstatus),
            "::",
            stringify!(pr_fpvalid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prpsinfo {
    pub pr_state: ::std::os::raw::c_char,
    pub pr_sname: ::std::os::raw::c_char,
    pub pr_zomb: ::std::os::raw::c_char,
    pub pr_nice: ::std::os::raw::c_char,
    pub pr_flag: ::std::os::raw::c_ulong,
    pub pr_uid: __pr_uid_t,
    pub pr_gid: __pr_gid_t,
    pub pr_pid: ::std::os::raw::c_int,
    pub pr_ppid: ::std::os::raw::c_int,
    pub pr_pgrp: ::std::os::raw::c_int,
    pub pr_sid: ::std::os::raw::c_int,
    pub pr_fname: [::std::os::raw::c_char; 16usize],
    pub pr_psargs: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_elf_prpsinfo() {
    const UNINIT: ::std::mem::MaybeUninit<elf_prpsinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<elf_prpsinfo>(),
        136usize,
        concat!("Size of: ", stringify!(elf_prpsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<elf_prpsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(elf_prpsinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sname) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_sname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_zomb) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_zomb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_nice) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_nice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_ppid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_ppid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_pgrp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_pgrp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_sid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_fname) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pr_psargs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(elf_prpsinfo),
            "::",
            stringify!(pr_psargs)
        )
    );
}
pub type psaddr_t = *mut ::std::os::raw::c_void;
pub type __prgregset_t = elf_gregset_t;
pub type __prfpregset_t = elf_fpregset_t;
pub type prgregset_t = __prgregset_t;
pub type prfpregset_t = __prfpregset_t;
pub type lwpid_t = __pid_t;
pub type prstatus_t = elf_prstatus;
pub type prpsinfo_t = elf_prpsinfo;
pub const ps_err_e_PS_OK: ps_err_e = 0;
pub const ps_err_e_PS_ERR: ps_err_e = 1;
pub const ps_err_e_PS_BADPID: ps_err_e = 2;
pub const ps_err_e_PS_BADLID: ps_err_e = 3;
pub const ps_err_e_PS_BADADDR: ps_err_e = 4;
pub const ps_err_e_PS_NOSYM: ps_err_e = 5;
pub const ps_err_e_PS_NOFREGS: ps_err_e = 6;
pub type ps_err_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ps_prochandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
pub type __jmp_buf = [::std::os::raw::c_ulonglong; 22usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        312usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_17 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_17 = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_18 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_18 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_18 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_18 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_18 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_18 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_18 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_18 = 0;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_19 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_19 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_19 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_20 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_20 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_20 = 2;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_21 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_21 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_21 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_21 = 0;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_22 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_23 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_23 = 1;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_24 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_24 = 1;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_25 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_25 = 1;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_26 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_26 = 1;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___cancel_jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__cancel_jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__cancel_jmp_buf_tag>(),
        184usize,
        concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__cancel_jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        216usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    const UNINIT: ::std::mem::MaybeUninit<termios> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termios>(),
        60usize,
        concat!("Size of: ", stringify!(termios))
    );
    assert_eq!(
        ::std::mem::align_of::<termios>(),
        4usize,
        concat!("Alignment of ", stringify!(termios))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ispeed) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ispeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ospeed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ospeed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    const UNINIT: ::std::mem::MaybeUninit<winsize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_row) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_col) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_xpixel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_ypixel) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    const UNINIT: ::std::mem::MaybeUninit<termio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_passwd() {
    const UNINIT: ::std::mem::MaybeUninit<passwd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        48usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_gecos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_dir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pw_shell) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
}
pub type __re_size_t = ::std::os::raw::c_uint;
pub type __re_long_size_t = ::std::os::raw::c_ulong;
pub type s_reg_t = ::std::os::raw::c_long;
pub type active_reg_t = ::std::os::raw::c_ulong;
pub type reg_syntax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub static mut re_syntax_options: reg_syntax_t;
}
pub const reg_errcode_t__REG_ENOSYS: reg_errcode_t = -1;
pub const reg_errcode_t__REG_NOERROR: reg_errcode_t = 0;
pub const reg_errcode_t__REG_NOMATCH: reg_errcode_t = 1;
pub const reg_errcode_t__REG_BADPAT: reg_errcode_t = 2;
pub const reg_errcode_t__REG_ECOLLATE: reg_errcode_t = 3;
pub const reg_errcode_t__REG_ECTYPE: reg_errcode_t = 4;
pub const reg_errcode_t__REG_EESCAPE: reg_errcode_t = 5;
pub const reg_errcode_t__REG_ESUBREG: reg_errcode_t = 6;
pub const reg_errcode_t__REG_EBRACK: reg_errcode_t = 7;
pub const reg_errcode_t__REG_EPAREN: reg_errcode_t = 8;
pub const reg_errcode_t__REG_EBRACE: reg_errcode_t = 9;
pub const reg_errcode_t__REG_BADBR: reg_errcode_t = 10;
pub const reg_errcode_t__REG_ERANGE: reg_errcode_t = 11;
pub const reg_errcode_t__REG_ESPACE: reg_errcode_t = 12;
pub const reg_errcode_t__REG_BADRPT: reg_errcode_t = 13;
pub const reg_errcode_t__REG_EEND: reg_errcode_t = 14;
pub const reg_errcode_t__REG_ESIZE: reg_errcode_t = 15;
pub const reg_errcode_t__REG_ERPAREN: reg_errcode_t = 16;
pub type reg_errcode_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_pattern_buffer {
    pub __buffer: *mut re_dfa_t,
    pub __allocated: __re_long_size_t,
    pub __used: __re_long_size_t,
    pub __syntax: reg_syntax_t,
    pub __fastmap: *mut ::std::os::raw::c_char,
    pub __translate: *mut ::std::os::raw::c_uchar,
    pub re_nsub: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_re_pattern_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<re_pattern_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<re_pattern_buffer>(),
        64usize,
        concat!("Size of: ", stringify!(re_pattern_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<re_pattern_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(re_pattern_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__allocated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__used) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__syntax) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__syntax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fastmap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__fastmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__translate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(__translate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).re_nsub) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(re_pattern_buffer),
            "::",
            stringify!(re_nsub)
        )
    );
}
impl re_pattern_buffer {
    #[inline]
    pub fn __can_be_null(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___can_be_null(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __regs_allocated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set___regs_allocated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __fastmap_accurate(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___fastmap_accurate(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __no_sub(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___no_sub(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __not_bol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___not_bol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __not_eol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___not_eol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __newline_anchor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___newline_anchor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __can_be_null: ::std::os::raw::c_uint,
        __regs_allocated: ::std::os::raw::c_uint,
        __fastmap_accurate: ::std::os::raw::c_uint,
        __no_sub: ::std::os::raw::c_uint,
        __not_bol: ::std::os::raw::c_uint,
        __not_eol: ::std::os::raw::c_uint,
        __newline_anchor: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __can_be_null: u32 = unsafe { ::std::mem::transmute(__can_be_null) };
            __can_be_null as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let __regs_allocated: u32 = unsafe { ::std::mem::transmute(__regs_allocated) };
            __regs_allocated as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __fastmap_accurate: u32 = unsafe { ::std::mem::transmute(__fastmap_accurate) };
            __fastmap_accurate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __no_sub: u32 = unsafe { ::std::mem::transmute(__no_sub) };
            __no_sub as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __not_bol: u32 = unsafe { ::std::mem::transmute(__not_bol) };
            __not_bol as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __not_eol: u32 = unsafe { ::std::mem::transmute(__not_eol) };
            __not_eol as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __newline_anchor: u32 = unsafe { ::std::mem::transmute(__newline_anchor) };
            __newline_anchor as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type regex_t = re_pattern_buffer;
pub type regoff_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
#[test]
fn bindgen_test_layout_regmatch_t() {
    const UNINIT: ::std::mem::MaybeUninit<regmatch_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<regmatch_t>(),
        8usize,
        concat!("Size of: ", stringify!(regmatch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_t>(),
        4usize,
        concat!("Alignment of ", stringify!(regmatch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_so) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_t),
            "::",
            stringify!(rm_so)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rm_eo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_t),
            "::",
            stringify!(rm_eo)
        )
    );
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lower) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._upper) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_27 = -60;
pub const SI_DETHREAD: _bindgen_ty_27 = -7;
pub const SI_TKILL: _bindgen_ty_27 = -6;
pub const SI_SIGIO: _bindgen_ty_27 = -5;
pub const SI_ASYNCIO: _bindgen_ty_27 = -4;
pub const SI_MESGQ: _bindgen_ty_27 = -3;
pub const SI_TIMER: _bindgen_ty_27 = -2;
pub const SI_QUEUE: _bindgen_ty_27 = -1;
pub const SI_USER: _bindgen_ty_27 = 0;
pub const SI_KERNEL: _bindgen_ty_27 = 128;
pub type _bindgen_ty_27 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_28 = 1;
pub const ILL_ILLOPN: _bindgen_ty_28 = 2;
pub const ILL_ILLADR: _bindgen_ty_28 = 3;
pub const ILL_ILLTRP: _bindgen_ty_28 = 4;
pub const ILL_PRVOPC: _bindgen_ty_28 = 5;
pub const ILL_PRVREG: _bindgen_ty_28 = 6;
pub const ILL_COPROC: _bindgen_ty_28 = 7;
pub const ILL_BADSTK: _bindgen_ty_28 = 8;
pub const ILL_BADIADDR: _bindgen_ty_28 = 9;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_29 = 1;
pub const FPE_INTOVF: _bindgen_ty_29 = 2;
pub const FPE_FLTDIV: _bindgen_ty_29 = 3;
pub const FPE_FLTOVF: _bindgen_ty_29 = 4;
pub const FPE_FLTUND: _bindgen_ty_29 = 5;
pub const FPE_FLTRES: _bindgen_ty_29 = 6;
pub const FPE_FLTINV: _bindgen_ty_29 = 7;
pub const FPE_FLTSUB: _bindgen_ty_29 = 8;
pub const FPE_FLTUNK: _bindgen_ty_29 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_29 = 15;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_30 = 1;
pub const SEGV_ACCERR: _bindgen_ty_30 = 2;
pub const SEGV_BNDERR: _bindgen_ty_30 = 3;
pub const SEGV_PKUERR: _bindgen_ty_30 = 4;
pub const SEGV_ACCADI: _bindgen_ty_30 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_30 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_30 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_30 = 8;
pub const SEGV_MTESERR: _bindgen_ty_30 = 9;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_31 = 1;
pub const BUS_ADRERR: _bindgen_ty_31 = 2;
pub const BUS_OBJERR: _bindgen_ty_31 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_31 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_31 = 5;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_32 = 1;
pub const CLD_KILLED: _bindgen_ty_32 = 2;
pub const CLD_DUMPED: _bindgen_ty_32 = 3;
pub const CLD_TRAPPED: _bindgen_ty_32 = 4;
pub const CLD_STOPPED: _bindgen_ty_32 = 5;
pub const CLD_CONTINUED: _bindgen_ty_32 = 6;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_33 = 1;
pub const POLL_OUT: _bindgen_ty_33 = 2;
pub const POLL_MSG: _bindgen_ty_33 = 3;
pub const POLL_ERR: _bindgen_ty_33 = 4;
pub const POLL_PRI: _bindgen_ty_33 = 5;
pub const POLL_HUP: _bindgen_ty_33 = 6;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_restorer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub fault_address: __u64,
    pub regs: [__u64; 31usize],
    pub sp: __u64,
    pub pc: __u64,
    pub pstate: __u64,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [__u8; 4096usize],
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        4384usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        16usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fault_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fault_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aarch64_ctx {
    pub magic: __u32,
    pub size: __u32,
}
#[test]
fn bindgen_test_layout__aarch64_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<_aarch64_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_aarch64_ctx>(),
        8usize,
        concat!("Size of: ", stringify!(_aarch64_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<_aarch64_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(_aarch64_ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_aarch64_ctx),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_aarch64_ctx),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct fpsimd_context {
    pub head: _aarch64_ctx,
    pub fpsr: __u32,
    pub fpcr: __u32,
    pub vregs: [__uint128_t; 32usize],
}
#[test]
fn bindgen_test_layout_fpsimd_context() {
    const UNINIT: ::std::mem::MaybeUninit<fpsimd_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fpsimd_context>(),
        528usize,
        concat!("Size of: ", stringify!(fpsimd_context))
    );
    assert_eq!(
        ::std::mem::align_of::<fpsimd_context>(),
        16usize,
        concat!("Alignment of ", stringify!(fpsimd_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpsimd_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fpsimd_context),
            "::",
            stringify!(fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpcr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fpsimd_context),
            "::",
            stringify!(fpcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vregs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fpsimd_context),
            "::",
            stringify!(vregs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esr_context {
    pub head: _aarch64_ctx,
    pub esr: __u64,
}
#[test]
fn bindgen_test_layout_esr_context() {
    const UNINIT: ::std::mem::MaybeUninit<esr_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<esr_context>(),
        16usize,
        concat!("Size of: ", stringify!(esr_context))
    );
    assert_eq!(
        ::std::mem::align_of::<esr_context>(),
        8usize,
        concat!("Alignment of ", stringify!(esr_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(esr_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(esr_context),
            "::",
            stringify!(esr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extra_context {
    pub head: _aarch64_ctx,
    pub datap: __u64,
    pub size: __u32,
    pub __reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_extra_context() {
    const UNINIT: ::std::mem::MaybeUninit<extra_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extra_context>(),
        32usize,
        concat!("Size of: ", stringify!(extra_context))
    );
    assert_eq!(
        ::std::mem::align_of::<extra_context>(),
        8usize,
        concat!("Alignment of ", stringify!(extra_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extra_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(extra_context),
            "::",
            stringify!(datap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(extra_context),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(extra_context),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sve_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub flags: __u16,
    pub __reserved: [__u16; 2usize],
}
#[test]
fn bindgen_test_layout_sve_context() {
    const UNINIT: ::std::mem::MaybeUninit<sve_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sve_context>(),
        16usize,
        concat!("Size of: ", stringify!(sve_context))
    );
    assert_eq!(
        ::std::mem::align_of::<sve_context>(),
        4usize,
        concat!("Alignment of ", stringify!(sve_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sve_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sve_context),
            "::",
            stringify!(vl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sve_context),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sve_context),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tpidr2_context {
    pub head: _aarch64_ctx,
    pub tpidr2: __u64,
}
#[test]
fn bindgen_test_layout_tpidr2_context() {
    const UNINIT: ::std::mem::MaybeUninit<tpidr2_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tpidr2_context>(),
        16usize,
        concat!("Size of: ", stringify!(tpidr2_context))
    );
    assert_eq!(
        ::std::mem::align_of::<tpidr2_context>(),
        8usize,
        concat!("Alignment of ", stringify!(tpidr2_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tpidr2_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpidr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tpidr2_context),
            "::",
            stringify!(tpidr2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct za_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub __reserved: [__u16; 3usize],
}
#[test]
fn bindgen_test_layout_za_context() {
    const UNINIT: ::std::mem::MaybeUninit<za_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<za_context>(),
        16usize,
        concat!("Size of: ", stringify!(za_context))
    );
    assert_eq!(
        ::std::mem::align_of::<za_context>(),
        4usize,
        concat!("Alignment of ", stringify!(za_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(za_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(za_context),
            "::",
            stringify!(vl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(za_context),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zt_context {
    pub head: _aarch64_ctx,
    pub nregs: __u16,
    pub __reserved: [__u16; 3usize],
}
#[test]
fn bindgen_test_layout_zt_context() {
    const UNINIT: ::std::mem::MaybeUninit<zt_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zt_context>(),
        16usize,
        concat!("Size of: ", stringify!(zt_context))
    );
    assert_eq!(
        ::std::mem::align_of::<zt_context>(),
        4usize,
        concat!("Alignment of ", stringify!(zt_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zt_context),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nregs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zt_context),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(zt_context),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = elf_greg_t;
pub type gregset_t = elf_gregset_t;
pub type fpregset_t = elf_fpregset_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub fault_address: ::std::os::raw::c_ulonglong,
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [::std::os::raw::c_uchar; 4096usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<mcontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        4384usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fault_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fault_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_sigmask: sigset_t,
    pub __bindgen_padding_0: u64,
    pub uc_mcontext: mcontext_t,
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        4560usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub const SS_ONSTACK: _bindgen_ty_34 = 1;
pub const SS_DISABLE: _bindgen_ty_34 = 2;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::std::mem::MaybeUninit<ip_opts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_35 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_35 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_35 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_35 = 4;
pub const IPPROTO_TCP: _bindgen_ty_35 = 6;
pub const IPPROTO_EGP: _bindgen_ty_35 = 8;
pub const IPPROTO_PUP: _bindgen_ty_35 = 12;
pub const IPPROTO_UDP: _bindgen_ty_35 = 17;
pub const IPPROTO_IDP: _bindgen_ty_35 = 22;
pub const IPPROTO_TP: _bindgen_ty_35 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_35 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_35 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_35 = 46;
pub const IPPROTO_GRE: _bindgen_ty_35 = 47;
pub const IPPROTO_ESP: _bindgen_ty_35 = 50;
pub const IPPROTO_AH: _bindgen_ty_35 = 51;
pub const IPPROTO_MTP: _bindgen_ty_35 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_35 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_35 = 98;
pub const IPPROTO_PIM: _bindgen_ty_35 = 103;
pub const IPPROTO_COMP: _bindgen_ty_35 = 108;
pub const IPPROTO_L2TP: _bindgen_ty_35 = 115;
pub const IPPROTO_SCTP: _bindgen_ty_35 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_35 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_35 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_35 = 143;
pub const IPPROTO_RAW: _bindgen_ty_35 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_35 = 262;
pub const IPPROTO_MAX: _bindgen_ty_35 = 263;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_36 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_36 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_36 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_36 = 58;
pub const IPPROTO_NONE: _bindgen_ty_36 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_36 = 60;
pub const IPPROTO_MH: _bindgen_ty_36 = 135;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_37 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_37 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_37 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_37 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_37 = 15;
pub const IPPORT_FTP: _bindgen_ty_37 = 21;
pub const IPPORT_TELNET: _bindgen_ty_37 = 23;
pub const IPPORT_SMTP: _bindgen_ty_37 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_37 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_37 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_37 = 43;
pub const IPPORT_MTP: _bindgen_ty_37 = 57;
pub const IPPORT_TFTP: _bindgen_ty_37 = 69;
pub const IPPORT_RJE: _bindgen_ty_37 = 77;
pub const IPPORT_FINGER: _bindgen_ty_37 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_37 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_37 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_37 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_37 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_37 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_37 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_37 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_37 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_37 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_37 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_37 = 5000;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreqn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq_source> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ipv6_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_source_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    const UNINIT: ::std::mem::MaybeUninit<ip_msfilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    const UNINIT: ::std::mem::MaybeUninit<group_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
pub const __ns_sect_ns_s_qd: __ns_sect = 0;
pub const __ns_sect_ns_s_zn: __ns_sect = 0;
pub const __ns_sect_ns_s_an: __ns_sect = 1;
pub const __ns_sect_ns_s_pr: __ns_sect = 1;
pub const __ns_sect_ns_s_ns: __ns_sect = 2;
pub const __ns_sect_ns_s_ud: __ns_sect = 2;
pub const __ns_sect_ns_s_ar: __ns_sect = 3;
pub const __ns_sect_ns_s_max: __ns_sect = 4;
pub type __ns_sect = ::std::os::raw::c_uint;
pub use self::__ns_sect as ns_sect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns_msg {
    pub _msg: *const ::std::os::raw::c_uchar,
    pub _eom: *const ::std::os::raw::c_uchar,
    pub _id: u16,
    pub _flags: u16,
    pub _counts: [u16; 4usize],
    pub _sections: [*const ::std::os::raw::c_uchar; 4usize],
    pub _sect: ns_sect,
    pub _rrnum: ::std::os::raw::c_int,
    pub _msg_ptr: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout___ns_msg() {
    const UNINIT: ::std::mem::MaybeUninit<__ns_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ns_msg>(),
        80usize,
        concat!("Size of: ", stringify!(__ns_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._eom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_eom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._counts) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_counts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sections) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sect) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_sect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rrnum) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_rrnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._msg_ptr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_msg),
            "::",
            stringify!(_msg_ptr)
        )
    );
}
pub type ns_msg = __ns_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns_flagdata {
    pub mask: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__ns_flagdata() {
    const UNINIT: ::std::mem::MaybeUninit<_ns_flagdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ns_flagdata>(),
        8usize,
        concat!("Size of: ", stringify!(_ns_flagdata))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns_flagdata>(),
        4usize,
        concat!("Alignment of ", stringify!(_ns_flagdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns_flagdata),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns_flagdata),
            "::",
            stringify!(shift)
        )
    );
}
extern "C" {
    pub static _ns_flagdata: [_ns_flagdata; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns_rr {
    pub name: [::std::os::raw::c_char; 1025usize],
    pub type_: u16,
    pub rr_class: u16,
    pub ttl: u32,
    pub rdlength: u16,
    pub rdata: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout___ns_rr() {
    const UNINIT: ::std::mem::MaybeUninit<__ns_rr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ns_rr>(),
        1048usize,
        concat!("Size of: ", stringify!(__ns_rr))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns_rr>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns_rr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        1026usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr_class) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(rr_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttl) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdlength) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(rdlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdata) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns_rr),
            "::",
            stringify!(rdata)
        )
    );
}
pub type ns_rr = __ns_rr;
pub const __ns_flag_ns_f_qr: __ns_flag = 0;
pub const __ns_flag_ns_f_opcode: __ns_flag = 1;
pub const __ns_flag_ns_f_aa: __ns_flag = 2;
pub const __ns_flag_ns_f_tc: __ns_flag = 3;
pub const __ns_flag_ns_f_rd: __ns_flag = 4;
pub const __ns_flag_ns_f_ra: __ns_flag = 5;
pub const __ns_flag_ns_f_z: __ns_flag = 6;
pub const __ns_flag_ns_f_ad: __ns_flag = 7;
pub const __ns_flag_ns_f_cd: __ns_flag = 8;
pub const __ns_flag_ns_f_rcode: __ns_flag = 9;
pub const __ns_flag_ns_f_max: __ns_flag = 10;
pub type __ns_flag = ::std::os::raw::c_uint;
pub use self::__ns_flag as ns_flag;
pub const __ns_opcode_ns_o_query: __ns_opcode = 0;
pub const __ns_opcode_ns_o_iquery: __ns_opcode = 1;
pub const __ns_opcode_ns_o_status: __ns_opcode = 2;
pub const __ns_opcode_ns_o_notify: __ns_opcode = 4;
pub const __ns_opcode_ns_o_update: __ns_opcode = 5;
pub const __ns_opcode_ns_o_max: __ns_opcode = 6;
pub type __ns_opcode = ::std::os::raw::c_uint;
pub use self::__ns_opcode as ns_opcode;
pub const __ns_rcode_ns_r_noerror: __ns_rcode = 0;
pub const __ns_rcode_ns_r_formerr: __ns_rcode = 1;
pub const __ns_rcode_ns_r_servfail: __ns_rcode = 2;
pub const __ns_rcode_ns_r_nxdomain: __ns_rcode = 3;
pub const __ns_rcode_ns_r_notimpl: __ns_rcode = 4;
pub const __ns_rcode_ns_r_refused: __ns_rcode = 5;
pub const __ns_rcode_ns_r_yxdomain: __ns_rcode = 6;
pub const __ns_rcode_ns_r_yxrrset: __ns_rcode = 7;
pub const __ns_rcode_ns_r_nxrrset: __ns_rcode = 8;
pub const __ns_rcode_ns_r_notauth: __ns_rcode = 9;
pub const __ns_rcode_ns_r_notzone: __ns_rcode = 10;
pub const __ns_rcode_ns_r_max: __ns_rcode = 11;
pub const __ns_rcode_ns_r_badvers: __ns_rcode = 16;
pub const __ns_rcode_ns_r_badsig: __ns_rcode = 16;
pub const __ns_rcode_ns_r_badkey: __ns_rcode = 17;
pub const __ns_rcode_ns_r_badtime: __ns_rcode = 18;
pub type __ns_rcode = ::std::os::raw::c_uint;
pub use self::__ns_rcode as ns_rcode;
pub const __ns_update_operation_ns_uop_delete: __ns_update_operation = 0;
pub const __ns_update_operation_ns_uop_add: __ns_update_operation = 1;
pub const __ns_update_operation_ns_uop_max: __ns_update_operation = 2;
pub type __ns_update_operation = ::std::os::raw::c_uint;
pub use self::__ns_update_operation as ns_update_operation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns_tsig_key {
    pub name: [::std::os::raw::c_char; 1025usize],
    pub alg: [::std::os::raw::c_char; 1025usize],
    pub data: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ns_tsig_key() {
    const UNINIT: ::std::mem::MaybeUninit<ns_tsig_key> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ns_tsig_key>(),
        2072usize,
        concat!("Size of: ", stringify!(ns_tsig_key))
    );
    assert_eq!(
        ::std::mem::align_of::<ns_tsig_key>(),
        8usize,
        concat!("Alignment of ", stringify!(ns_tsig_key))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tsig_key),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alg) as usize - ptr as usize },
        1025usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tsig_key),
            "::",
            stringify!(alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tsig_key),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tsig_key),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns_tcp_tsig_state {
    pub counter: ::std::os::raw::c_int,
    pub key: *mut dst_key,
    pub ctx: *mut ::std::os::raw::c_void,
    pub sig: [::std::os::raw::c_uchar; 512usize],
    pub siglen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ns_tcp_tsig_state() {
    const UNINIT: ::std::mem::MaybeUninit<ns_tcp_tsig_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ns_tcp_tsig_state>(),
        544usize,
        concat!("Size of: ", stringify!(ns_tcp_tsig_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ns_tcp_tsig_state>(),
        8usize,
        concat!("Alignment of ", stringify!(ns_tcp_tsig_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tcp_tsig_state),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tcp_tsig_state),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tcp_tsig_state),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tcp_tsig_state),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).siglen) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ns_tcp_tsig_state),
            "::",
            stringify!(siglen)
        )
    );
}
pub const __ns_type_ns_t_invalid: __ns_type = 0;
pub const __ns_type_ns_t_a: __ns_type = 1;
pub const __ns_type_ns_t_ns: __ns_type = 2;
pub const __ns_type_ns_t_md: __ns_type = 3;
pub const __ns_type_ns_t_mf: __ns_type = 4;
pub const __ns_type_ns_t_cname: __ns_type = 5;
pub const __ns_type_ns_t_soa: __ns_type = 6;
pub const __ns_type_ns_t_mb: __ns_type = 7;
pub const __ns_type_ns_t_mg: __ns_type = 8;
pub const __ns_type_ns_t_mr: __ns_type = 9;
pub const __ns_type_ns_t_null: __ns_type = 10;
pub const __ns_type_ns_t_wks: __ns_type = 11;
pub const __ns_type_ns_t_ptr: __ns_type = 12;
pub const __ns_type_ns_t_hinfo: __ns_type = 13;
pub const __ns_type_ns_t_minfo: __ns_type = 14;
pub const __ns_type_ns_t_mx: __ns_type = 15;
pub const __ns_type_ns_t_txt: __ns_type = 16;
pub const __ns_type_ns_t_rp: __ns_type = 17;
pub const __ns_type_ns_t_afsdb: __ns_type = 18;
pub const __ns_type_ns_t_x25: __ns_type = 19;
pub const __ns_type_ns_t_isdn: __ns_type = 20;
pub const __ns_type_ns_t_rt: __ns_type = 21;
pub const __ns_type_ns_t_nsap: __ns_type = 22;
pub const __ns_type_ns_t_nsap_ptr: __ns_type = 23;
pub const __ns_type_ns_t_sig: __ns_type = 24;
pub const __ns_type_ns_t_key: __ns_type = 25;
pub const __ns_type_ns_t_px: __ns_type = 26;
pub const __ns_type_ns_t_gpos: __ns_type = 27;
pub const __ns_type_ns_t_aaaa: __ns_type = 28;
pub const __ns_type_ns_t_loc: __ns_type = 29;
pub const __ns_type_ns_t_nxt: __ns_type = 30;
pub const __ns_type_ns_t_eid: __ns_type = 31;
pub const __ns_type_ns_t_nimloc: __ns_type = 32;
pub const __ns_type_ns_t_srv: __ns_type = 33;
pub const __ns_type_ns_t_atma: __ns_type = 34;
pub const __ns_type_ns_t_naptr: __ns_type = 35;
pub const __ns_type_ns_t_kx: __ns_type = 36;
pub const __ns_type_ns_t_cert: __ns_type = 37;
pub const __ns_type_ns_t_a6: __ns_type = 38;
pub const __ns_type_ns_t_dname: __ns_type = 39;
pub const __ns_type_ns_t_sink: __ns_type = 40;
pub const __ns_type_ns_t_opt: __ns_type = 41;
pub const __ns_type_ns_t_apl: __ns_type = 42;
pub const __ns_type_ns_t_ds: __ns_type = 43;
pub const __ns_type_ns_t_sshfp: __ns_type = 44;
pub const __ns_type_ns_t_ipseckey: __ns_type = 45;
pub const __ns_type_ns_t_rrsig: __ns_type = 46;
pub const __ns_type_ns_t_nsec: __ns_type = 47;
pub const __ns_type_ns_t_dnskey: __ns_type = 48;
pub const __ns_type_ns_t_dhcid: __ns_type = 49;
pub const __ns_type_ns_t_nsec3: __ns_type = 50;
pub const __ns_type_ns_t_nsec3param: __ns_type = 51;
pub const __ns_type_ns_t_tlsa: __ns_type = 52;
pub const __ns_type_ns_t_smimea: __ns_type = 53;
pub const __ns_type_ns_t_hip: __ns_type = 55;
pub const __ns_type_ns_t_ninfo: __ns_type = 56;
pub const __ns_type_ns_t_rkey: __ns_type = 57;
pub const __ns_type_ns_t_talink: __ns_type = 58;
pub const __ns_type_ns_t_cds: __ns_type = 59;
pub const __ns_type_ns_t_cdnskey: __ns_type = 60;
pub const __ns_type_ns_t_openpgpkey: __ns_type = 61;
pub const __ns_type_ns_t_csync: __ns_type = 62;
pub const __ns_type_ns_t_spf: __ns_type = 99;
pub const __ns_type_ns_t_uinfo: __ns_type = 100;
pub const __ns_type_ns_t_uid: __ns_type = 101;
pub const __ns_type_ns_t_gid: __ns_type = 102;
pub const __ns_type_ns_t_unspec: __ns_type = 103;
pub const __ns_type_ns_t_nid: __ns_type = 104;
pub const __ns_type_ns_t_l32: __ns_type = 105;
pub const __ns_type_ns_t_l64: __ns_type = 106;
pub const __ns_type_ns_t_lp: __ns_type = 107;
pub const __ns_type_ns_t_eui48: __ns_type = 108;
pub const __ns_type_ns_t_eui64: __ns_type = 109;
pub const __ns_type_ns_t_tkey: __ns_type = 249;
pub const __ns_type_ns_t_tsig: __ns_type = 250;
pub const __ns_type_ns_t_ixfr: __ns_type = 251;
pub const __ns_type_ns_t_axfr: __ns_type = 252;
pub const __ns_type_ns_t_mailb: __ns_type = 253;
pub const __ns_type_ns_t_maila: __ns_type = 254;
pub const __ns_type_ns_t_any: __ns_type = 255;
pub const __ns_type_ns_t_uri: __ns_type = 256;
pub const __ns_type_ns_t_caa: __ns_type = 257;
pub const __ns_type_ns_t_avc: __ns_type = 258;
pub const __ns_type_ns_t_ta: __ns_type = 32768;
pub const __ns_type_ns_t_dlv: __ns_type = 32769;
pub const __ns_type_ns_t_max: __ns_type = 65536;
pub type __ns_type = ::std::os::raw::c_uint;
pub use self::__ns_type as ns_type;
pub const __ns_class_ns_c_invalid: __ns_class = 0;
pub const __ns_class_ns_c_in: __ns_class = 1;
pub const __ns_class_ns_c_2: __ns_class = 2;
pub const __ns_class_ns_c_chaos: __ns_class = 3;
pub const __ns_class_ns_c_hs: __ns_class = 4;
pub const __ns_class_ns_c_none: __ns_class = 254;
pub const __ns_class_ns_c_any: __ns_class = 255;
pub const __ns_class_ns_c_max: __ns_class = 65536;
pub type __ns_class = ::std::os::raw::c_uint;
pub use self::__ns_class as ns_class;
pub const __ns_cert_types_cert_t_pkix: __ns_cert_types = 1;
pub const __ns_cert_types_cert_t_spki: __ns_cert_types = 2;
pub const __ns_cert_types_cert_t_pgp: __ns_cert_types = 3;
pub const __ns_cert_types_cert_t_url: __ns_cert_types = 253;
pub const __ns_cert_types_cert_t_oid: __ns_cert_types = 254;
pub type __ns_cert_types = ::std::os::raw::c_uint;
pub use self::__ns_cert_types as ns_cert_types;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct HEADER {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[test]
fn bindgen_test_layout_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<HEADER>(),
        12usize,
        concat!("Size of: ", stringify!(HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(HEADER))
    );
}
impl HEADER {
    #[inline]
    pub fn id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn rd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aa(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aa(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn opcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_opcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn qr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn cd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ad(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ad(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ra(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ra(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qdcount(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_qdcount(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn ancount(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_ancount(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn nscount(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_nscount(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn arcount(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_arcount(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        id: ::std::os::raw::c_uint,
        rd: ::std::os::raw::c_uint,
        tc: ::std::os::raw::c_uint,
        aa: ::std::os::raw::c_uint,
        opcode: ::std::os::raw::c_uint,
        qr: ::std::os::raw::c_uint,
        rcode: ::std::os::raw::c_uint,
        cd: ::std::os::raw::c_uint,
        ad: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
        ra: ::std::os::raw::c_uint,
        qdcount: ::std::os::raw::c_uint,
        ancount: ::std::os::raw::c_uint,
        nscount: ::std::os::raw::c_uint,
        arcount: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let id: u32 = unsafe { ::std::mem::transmute(id) };
            id as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rd: u32 = unsafe { ::std::mem::transmute(rd) };
            rd as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let tc: u32 = unsafe { ::std::mem::transmute(tc) };
            tc as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let aa: u32 = unsafe { ::std::mem::transmute(aa) };
            aa as u64
        });
        __bindgen_bitfield_unit.set(19usize, 4u8, {
            let opcode: u32 = unsafe { ::std::mem::transmute(opcode) };
            opcode as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let qr: u32 = unsafe { ::std::mem::transmute(qr) };
            qr as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let rcode: u32 = unsafe { ::std::mem::transmute(rcode) };
            rcode as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let cd: u32 = unsafe { ::std::mem::transmute(cd) };
            cd as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let ad: u32 = unsafe { ::std::mem::transmute(ad) };
            ad as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let ra: u32 = unsafe { ::std::mem::transmute(ra) };
            ra as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let qdcount: u32 = unsafe { ::std::mem::transmute(qdcount) };
            qdcount as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let ancount: u32 = unsafe { ::std::mem::transmute(ancount) };
            ancount as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let nscount: u32 = unsafe { ::std::mem::transmute(nscount) };
            nscount as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let arcount: u32 = unsafe { ::std::mem::transmute(arcount) };
            arcount as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __res_state {
    pub retrans: ::std::os::raw::c_int,
    pub retry: ::std::os::raw::c_int,
    pub options: ::std::os::raw::c_ulong,
    pub nscount: ::std::os::raw::c_int,
    pub nsaddr_list: [sockaddr_in; 3usize],
    pub id: ::std::os::raw::c_ushort,
    pub dnsrch: [*mut ::std::os::raw::c_char; 7usize],
    pub defdname: [::std::os::raw::c_char; 256usize],
    pub pfcode: ::std::os::raw::c_ulong,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub sort_list: [__res_state__bindgen_ty_1; 10usize],
    pub __glibc_unused_qhook: *mut ::std::os::raw::c_void,
    pub __glibc_unused_rhook: *mut ::std::os::raw::c_void,
    pub res_h_errno: ::std::os::raw::c_int,
    pub _vcsock: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_uint,
    pub _u: __res_state__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __res_state__bindgen_ty_1 {
    pub addr: in_addr,
    pub mask: u32,
}
#[test]
fn bindgen_test_layout___res_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__res_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__res_state__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__res_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__res_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__res_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_1),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __res_state__bindgen_ty_2 {
    pub pad: [::std::os::raw::c_char; 52usize],
    pub _ext: __res_state__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __res_state__bindgen_ty_2__bindgen_ty_1 {
    pub nscount: u16,
    pub nsmap: [u16; 3usize],
    pub nssocks: [::std::os::raw::c_int; 3usize],
    pub nscount6: u16,
    pub nsinit: u16,
    pub nsaddrs: [*mut sockaddr_in6; 3usize],
    pub __glibc_reserved: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___res_state__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__res_state__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__res_state__bindgen_ty_2__bindgen_ty_1>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__res_state__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nscount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nscount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsmap) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nsmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nssocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nssocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nscount6) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nscount6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsinit) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nsinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsaddrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(nsaddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
#[test]
fn bindgen_test_layout___res_state__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__res_state__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__res_state__bindgen_ty_2>(),
        56usize,
        concat!("Size of: ", stringify!(__res_state__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__res_state__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__res_state__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state__bindgen_ty_2),
            "::",
            stringify!(_ext)
        )
    );
}
#[test]
fn bindgen_test_layout___res_state() {
    const UNINIT: ::std::mem::MaybeUninit<__res_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__res_state>(),
        568usize,
        concat!("Size of: ", stringify!(__res_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__res_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__res_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retrans) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(retrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nscount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(nscount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsaddr_list) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(nsaddr_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnsrch) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(dnsrch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defdname) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(defdname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfcode) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(pfcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_list) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(sort_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_unused_qhook) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(__glibc_unused_qhook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_unused_rhook) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(__glibc_unused_rhook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_h_errno) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(res_h_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vcsock) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(_vcsock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._u) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__res_state),
            "::",
            stringify!(_u)
        )
    );
}
impl __res_state {
    #[inline]
    pub fn ndots(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ndots(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nsort(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_nsort(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6_unavail(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6_unavail(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ndots: ::std::os::raw::c_uint,
        nsort: ::std::os::raw::c_uint,
        ipv6_unavail: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ndots: u32 = unsafe { ::std::mem::transmute(ndots) };
            ndots as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let nsort: u32 = unsafe { ::std::mem::transmute(nsort) };
            nsort as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ipv6_unavail: u32 = unsafe { ::std::mem::transmute(ipv6_unavail) };
            ipv6_unavail as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type res_state = *mut __res_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct res_sym {
    pub number: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub humanname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_res_sym() {
    const UNINIT: ::std::mem::MaybeUninit<res_sym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<res_sym>(),
        24usize,
        concat!("Size of: ", stringify!(res_sym))
    );
    assert_eq!(
        ::std::mem::align_of::<res_sym>(),
        8usize,
        concat!("Alignment of ", stringify!(res_sym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(res_sym),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(res_sym),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).humanname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(res_sym),
            "::",
            stringify!(humanname)
        )
    );
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_entry() {
    const UNINIT: ::std::mem::MaybeUninit<entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<entry>(),
        16usize,
        concat!("Size of: ", stringify!(entry))
    );
    assert_eq!(
        ::std::mem::align_of::<entry>(),
        8usize,
        concat!("Alignment of ", stringify!(entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(entry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(entry),
            "::",
            stringify!(data)
        )
    );
}
pub type ENTRY = entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENTRY {
    _unused: [u8; 0],
}
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
pub type __action_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        __nodep: *const ::std::os::raw::c_void,
        __value: VISIT,
        __level: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sem_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_sem_t() {
    const UNINIT: ::std::mem::MaybeUninit<sem_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sem_t>(),
        32usize,
        concat!("Size of: ", stringify!(sem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sem_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgttyb {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spwd {
    pub sp_namp: *mut ::std::os::raw::c_char,
    pub sp_pwdp: *mut ::std::os::raw::c_char,
    pub sp_lstchg: ::std::os::raw::c_long,
    pub sp_min: ::std::os::raw::c_long,
    pub sp_max: ::std::os::raw::c_long,
    pub sp_warn: ::std::os::raw::c_long,
    pub sp_inact: ::std::os::raw::c_long,
    pub sp_expire: ::std::os::raw::c_long,
    pub sp_flag: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_spwd() {
    const UNINIT: ::std::mem::MaybeUninit<spwd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<spwd>(),
        72usize,
        concat!("Size of: ", stringify!(spwd))
    );
    assert_eq!(
        ::std::mem::align_of::<spwd>(),
        8usize,
        concat!("Alignment of ", stringify!(spwd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_namp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_namp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_pwdp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_pwdp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_lstchg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_lstchg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_warn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_warn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_inact) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_inact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_expire) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_flag) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(spwd),
            "::",
            stringify!(sp_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_spawnattr_t {
    pub __flags: ::std::os::raw::c_short,
    pub __pgrp: pid_t,
    pub __sd: sigset_t,
    pub __ss: sigset_t,
    pub __sp: sched_param,
    pub __policy: ::std::os::raw::c_int,
    pub __pad: [::std::os::raw::c_int; 16usize],
}
#[test]
fn bindgen_test_layout_posix_spawnattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<posix_spawnattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posix_spawnattr_t>(),
        336usize,
        concat!("Size of: ", stringify!(posix_spawnattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<posix_spawnattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(posix_spawnattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pgrp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__pgrp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__policy) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawnattr_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_spawn_file_actions_t {
    pub __allocated: ::std::os::raw::c_int,
    pub __used: ::std::os::raw::c_int,
    pub __actions: *mut __spawn_action,
    pub __pad: [::std::os::raw::c_int; 16usize],
}
#[test]
fn bindgen_test_layout_posix_spawn_file_actions_t() {
    const UNINIT: ::std::mem::MaybeUninit<posix_spawn_file_actions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<posix_spawn_file_actions_t>(),
        80usize,
        concat!("Size of: ", stringify!(posix_spawn_file_actions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<posix_spawn_file_actions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(posix_spawn_file_actions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__allocated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawn_file_actions_t),
            "::",
            stringify!(__allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__used) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawn_file_actions_t),
            "::",
            stringify!(__used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__actions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawn_file_actions_t),
            "::",
            stringify!(__actions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(posix_spawn_file_actions_t),
            "::",
            stringify!(__pad)
        )
    );
}
pub const __stab_debug_code_N_GSYM: __stab_debug_code = 32;
pub const __stab_debug_code_N_FNAME: __stab_debug_code = 34;
pub const __stab_debug_code_N_FUN: __stab_debug_code = 36;
pub const __stab_debug_code_N_STSYM: __stab_debug_code = 38;
pub const __stab_debug_code_N_LCSYM: __stab_debug_code = 40;
pub const __stab_debug_code_N_MAIN: __stab_debug_code = 42;
pub const __stab_debug_code_N_PC: __stab_debug_code = 48;
pub const __stab_debug_code_N_NSYMS: __stab_debug_code = 50;
pub const __stab_debug_code_N_NOMAP: __stab_debug_code = 52;
pub const __stab_debug_code_N_OBJ: __stab_debug_code = 56;
pub const __stab_debug_code_N_OPT: __stab_debug_code = 60;
pub const __stab_debug_code_N_RSYM: __stab_debug_code = 64;
pub const __stab_debug_code_N_M2C: __stab_debug_code = 66;
pub const __stab_debug_code_N_SLINE: __stab_debug_code = 68;
pub const __stab_debug_code_N_DSLINE: __stab_debug_code = 70;
pub const __stab_debug_code_N_BSLINE: __stab_debug_code = 72;
pub const __stab_debug_code_N_BROWS: __stab_debug_code = 72;
pub const __stab_debug_code_N_DEFD: __stab_debug_code = 74;
pub const __stab_debug_code_N_EHDECL: __stab_debug_code = 80;
pub const __stab_debug_code_N_MOD2: __stab_debug_code = 80;
pub const __stab_debug_code_N_CATCH: __stab_debug_code = 84;
pub const __stab_debug_code_N_SSYM: __stab_debug_code = 96;
pub const __stab_debug_code_N_SO: __stab_debug_code = 100;
pub const __stab_debug_code_N_LSYM: __stab_debug_code = 128;
pub const __stab_debug_code_N_BINCL: __stab_debug_code = 130;
pub const __stab_debug_code_N_SOL: __stab_debug_code = 132;
pub const __stab_debug_code_N_PSYM: __stab_debug_code = 160;
pub const __stab_debug_code_N_EINCL: __stab_debug_code = 162;
pub const __stab_debug_code_N_ENTRY: __stab_debug_code = 164;
pub const __stab_debug_code_N_LBRAC: __stab_debug_code = 192;
pub const __stab_debug_code_N_EXCL: __stab_debug_code = 194;
pub const __stab_debug_code_N_SCOPE: __stab_debug_code = 196;
pub const __stab_debug_code_N_RBRAC: __stab_debug_code = 224;
pub const __stab_debug_code_N_BCOMM: __stab_debug_code = 226;
pub const __stab_debug_code_N_ECOMM: __stab_debug_code = 228;
pub const __stab_debug_code_N_ECOML: __stab_debug_code = 232;
pub const __stab_debug_code_N_NBTEXT: __stab_debug_code = 240;
pub const __stab_debug_code_N_NBDATA: __stab_debug_code = 242;
pub const __stab_debug_code_N_NBBSS: __stab_debug_code = 244;
pub const __stab_debug_code_N_NBSTS: __stab_debug_code = 246;
pub const __stab_debug_code_N_NBLCS: __stab_debug_code = 248;
pub const __stab_debug_code_N_LENG: __stab_debug_code = 254;
pub const __stab_debug_code_LAST_UNUSED_STAB_CODE: __stab_debug_code = 255;
pub type __stab_debug_code = ::std::os::raw::c_uint;
pub const FSETLOCKING_QUERY: _bindgen_ty_38 = 0;
pub const FSETLOCKING_INTERNAL: _bindgen_ty_38 = 1;
pub const FSETLOCKING_BYCALLER: _bindgen_ty_38 = 2;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudo_conv_message {
    pub msg_type: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub msg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sudo_conv_message() {
    const UNINIT: ::std::mem::MaybeUninit<sudo_conv_message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudo_conv_message>(),
        16usize,
        concat!("Size of: ", stringify!(sudo_conv_message))
    );
    assert_eq!(
        ::std::mem::align_of::<sudo_conv_message>(),
        8usize,
        concat!("Alignment of ", stringify!(sudo_conv_message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_message),
            "::",
            stringify!(msg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_message),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_message),
            "::",
            stringify!(msg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudo_conv_reply {
    pub reply: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sudo_conv_reply() {
    const UNINIT: ::std::mem::MaybeUninit<sudo_conv_reply> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudo_conv_reply>(),
        8usize,
        concat!("Size of: ", stringify!(sudo_conv_reply))
    );
    assert_eq!(
        ::std::mem::align_of::<sudo_conv_reply>(),
        8usize,
        concat!("Alignment of ", stringify!(sudo_conv_reply))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reply) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_reply),
            "::",
            stringify!(reply)
        )
    );
}
pub type sudo_conv_callback_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        signo: ::std::os::raw::c_int,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudo_conv_callback {
    pub version: ::std::os::raw::c_uint,
    pub closure: *mut ::std::os::raw::c_void,
    pub on_suspend: sudo_conv_callback_fn_t,
    pub on_resume: sudo_conv_callback_fn_t,
}
#[test]
fn bindgen_test_layout_sudo_conv_callback() {
    const UNINIT: ::std::mem::MaybeUninit<sudo_conv_callback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudo_conv_callback>(),
        32usize,
        concat!("Size of: ", stringify!(sudo_conv_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<sudo_conv_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(sudo_conv_callback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_callback),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closure) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_callback),
            "::",
            stringify!(closure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_suspend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_callback),
            "::",
            stringify!(on_suspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_resume) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_conv_callback),
            "::",
            stringify!(on_resume)
        )
    );
}
pub type sudo_conv_t = ::std::option::Option<
    unsafe extern "C" fn(
        num_msgs: ::std::os::raw::c_int,
        msgs: *const sudo_conv_message,
        replies: *mut sudo_conv_reply,
        callback: *mut sudo_conv_callback,
    ) -> ::std::os::raw::c_int,
>;
pub type sudo_printf_t = ::std::option::Option<
    unsafe extern "C" fn(
        msg_type: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int,
>;
pub type sudo_hook_fn_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type sudo_hook_fn_setenv_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        overwrite: ::std::os::raw::c_int,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sudo_hook_fn_putenv_t = ::std::option::Option<
    unsafe extern "C" fn(
        string: *mut ::std::os::raw::c_char,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sudo_hook_fn_getenv_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type sudo_hook_fn_unsetenv_t = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        closure: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudo_hook {
    pub hook_version: ::std::os::raw::c_uint,
    pub hook_type: ::std::os::raw::c_uint,
    pub hook_fn: sudo_hook_fn_t,
    pub closure: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sudo_hook() {
    const UNINIT: ::std::mem::MaybeUninit<sudo_hook> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudo_hook>(),
        24usize,
        concat!("Size of: ", stringify!(sudo_hook))
    );
    assert_eq!(
        ::std::mem::align_of::<sudo_hook>(),
        8usize,
        concat!("Alignment of ", stringify!(sudo_hook))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_hook),
            "::",
            stringify!(hook_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_hook),
            "::",
            stringify!(hook_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook_fn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_hook),
            "::",
            stringify!(hook_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_hook),
            "::",
            stringify!(closure)
        )
    );
}
pub type sudo_plugin_ev_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        closure: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudo_plugin_event {
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            pev: *mut sudo_plugin_event,
            fd: ::std::os::raw::c_int,
            events: ::std::os::raw::c_int,
            callback: sudo_plugin_ev_callback_t,
            closure: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            pev: *mut sudo_plugin_event,
            timeout: *mut timespec,
        ) -> ::std::os::raw::c_int,
    >,
    pub del: ::std::option::Option<
        unsafe extern "C" fn(pev: *mut sudo_plugin_event) -> ::std::os::raw::c_int,
    >,
    pub pending: ::std::option::Option<
        unsafe extern "C" fn(
            pev: *mut sudo_plugin_event,
            events: ::std::os::raw::c_int,
            ts: *mut timespec,
        ) -> ::std::os::raw::c_int,
    >,
    pub fd: ::std::option::Option<
        unsafe extern "C" fn(pev: *mut sudo_plugin_event) -> ::std::os::raw::c_int,
    >,
    pub setbase: ::std::option::Option<
        unsafe extern "C" fn(pev: *mut sudo_plugin_event, base: *mut ::std::os::raw::c_void),
    >,
    pub loopbreak: ::std::option::Option<unsafe extern "C" fn(pev: *mut sudo_plugin_event)>,
    pub free: ::std::option::Option<unsafe extern "C" fn(pev: *mut sudo_plugin_event)>,
}
#[test]
fn bindgen_test_layout_sudo_plugin_event() {
    const UNINIT: ::std::mem::MaybeUninit<sudo_plugin_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudo_plugin_event>(),
        64usize,
        concat!("Size of: ", stringify!(sudo_plugin_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sudo_plugin_event>(),
        8usize,
        concat!("Alignment of ", stringify!(sudo_plugin_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setbase) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(setbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loopbreak) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(loopbreak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sudo_plugin_event),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_plugin {
    pub type_: ::std::os::raw::c_uint,
    pub version: ::std::os::raw::c_uint,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_uint,
            conversation: sudo_conv_t,
            sudo_plugin_printf: sudo_printf_t,
            settings: *const *mut ::std::os::raw::c_char,
            user_info: *const *mut ::std::os::raw::c_char,
            user_env: *const *mut ::std::os::raw::c_char,
            plugin_options: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(exit_status: ::std::os::raw::c_int, error: ::std::os::raw::c_int),
    >,
    pub show_version: ::std::option::Option<
        unsafe extern "C" fn(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub check_policy: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            env_add: *mut *mut ::std::os::raw::c_char,
            command_info: *mut *mut *mut ::std::os::raw::c_char,
            argv_out: *mut *mut *mut ::std::os::raw::c_char,
            user_env_out: *mut *mut *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub list: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            verbose: ::std::os::raw::c_int,
            user: *const ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub validate: ::std::option::Option<
        unsafe extern "C" fn(errstr: *mut *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub invalidate: ::std::option::Option<unsafe extern "C" fn(rmcred: ::std::os::raw::c_int)>,
    pub init_session: ::std::option::Option<
        unsafe extern "C" fn(
            pwd: *mut passwd,
            user_env_out: *mut *mut *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub register_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            register_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub deregister_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            deregister_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub event_alloc: ::std::option::Option<unsafe extern "C" fn() -> *mut sudo_plugin_event>,
}
#[test]
fn bindgen_test_layout_policy_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<policy_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_plugin>(),
        96usize,
        concat!("Size of: ", stringify!(policy_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(policy_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(show_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_policy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(check_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(validate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_session) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(init_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_hooks) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(register_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deregister_hooks) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(deregister_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_alloc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_plugin),
            "::",
            stringify!(event_alloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_plugin {
    pub type_: ::std::os::raw::c_uint,
    pub version: ::std::os::raw::c_uint,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_uint,
            conversation: sudo_conv_t,
            sudo_plugin_printf: sudo_printf_t,
            settings: *const *mut ::std::os::raw::c_char,
            user_info: *const *mut ::std::os::raw::c_char,
            command_info: *const *mut ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            user_env: *const *mut ::std::os::raw::c_char,
            plugin_options: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(exit_status: ::std::os::raw::c_int, error: ::std::os::raw::c_int),
    >,
    pub show_version: ::std::option::Option<
        unsafe extern "C" fn(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub log_ttyin: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub log_ttyout: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub log_stdin: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub log_stdout: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub log_stderr: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub register_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            register_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub deregister_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            deregister_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub change_winsize: ::std::option::Option<
        unsafe extern "C" fn(
            line: ::std::os::raw::c_uint,
            cols: ::std::os::raw::c_uint,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub log_suspend: ::std::option::Option<
        unsafe extern "C" fn(
            signo: ::std::os::raw::c_int,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub event_alloc: ::std::option::Option<unsafe extern "C" fn() -> *mut sudo_plugin_event>,
}
#[test]
fn bindgen_test_layout_io_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<io_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_plugin>(),
        112usize,
        concat!("Size of: ", stringify!(io_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<io_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(io_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(show_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_ttyin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_ttyin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_ttyout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_ttyout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_stdin) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_stdin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_stdout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_stdout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_stderr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_stderr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_hooks) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(register_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deregister_hooks) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(deregister_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).change_winsize) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(change_winsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_suspend) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(log_suspend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_alloc) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(io_plugin),
            "::",
            stringify!(event_alloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_plugin {
    pub type_: ::std::os::raw::c_uint,
    pub version: ::std::os::raw::c_uint,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_uint,
            conversation: sudo_conv_t,
            sudo_plugin_printf: sudo_printf_t,
            settings: *const *mut ::std::os::raw::c_char,
            user_info: *const *mut ::std::os::raw::c_char,
            submit_optind: ::std::os::raw::c_int,
            submit_argv: *const *mut ::std::os::raw::c_char,
            submit_envp: *const *mut ::std::os::raw::c_char,
            plugin_options: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(status_type: ::std::os::raw::c_int, status: ::std::os::raw::c_int),
    >,
    pub accept: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_name: *const ::std::os::raw::c_char,
            plugin_type: ::std::os::raw::c_uint,
            command_info: *const *mut ::std::os::raw::c_char,
            run_argv: *const *mut ::std::os::raw::c_char,
            run_envp: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub reject: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_name: *const ::std::os::raw::c_char,
            plugin_type: ::std::os::raw::c_uint,
            audit_msg: *const ::std::os::raw::c_char,
            command_info: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub error: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_name: *const ::std::os::raw::c_char,
            plugin_type: ::std::os::raw::c_uint,
            audit_msg: *const ::std::os::raw::c_char,
            command_info: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub show_version: ::std::option::Option<
        unsafe extern "C" fn(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub register_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            register_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub deregister_hooks: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            deregister_hook: ::std::option::Option<
                unsafe extern "C" fn(hook: *mut sudo_hook) -> ::std::os::raw::c_int,
            >,
        ),
    >,
    pub event_alloc: ::std::option::Option<unsafe extern "C" fn() -> *mut sudo_plugin_event>,
}
#[test]
fn bindgen_test_layout_audit_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<audit_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_plugin>(),
        80usize,
        concat!("Size of: ", stringify!(audit_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(accept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reject) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(reject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_version) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(show_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).register_hooks) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(register_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deregister_hooks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(deregister_hooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_alloc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_plugin),
            "::",
            stringify!(event_alloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct approval_plugin {
    pub type_: ::std::os::raw::c_uint,
    pub version: ::std::os::raw::c_uint,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_uint,
            conversation: sudo_conv_t,
            sudo_plugin_printf: sudo_printf_t,
            settings: *const *mut ::std::os::raw::c_char,
            user_info: *const *mut ::std::os::raw::c_char,
            submit_optind: ::std::os::raw::c_int,
            submit_argv: *const *mut ::std::os::raw::c_char,
            submit_envp: *const *mut ::std::os::raw::c_char,
            plugin_options: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn()>,
    pub check: ::std::option::Option<
        unsafe extern "C" fn(
            command_info: *const *mut ::std::os::raw::c_char,
            run_argv: *const *mut ::std::os::raw::c_char,
            run_envp: *const *mut ::std::os::raw::c_char,
            errstr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub show_version: ::std::option::Option<
        unsafe extern "C" fn(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_approval_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<approval_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<approval_plugin>(),
        40usize,
        concat!("Size of: ", stringify!(approval_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<approval_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(approval_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(approval_plugin),
            "::",
            stringify!(show_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sudoers_group_plugin {
    pub version: ::std::os::raw::c_uint,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            version: ::std::os::raw::c_int,
            sudo_plugin_printf: sudo_printf_t,
            argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn()>,
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            user: *const ::std::os::raw::c_char,
            group: *const ::std::os::raw::c_char,
            pwd: *const passwd,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sudoers_group_plugin() {
    const UNINIT: ::std::mem::MaybeUninit<sudoers_group_plugin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sudoers_group_plugin>(),
        32usize,
        concat!("Size of: ", stringify!(sudoers_group_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<sudoers_group_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(sudoers_group_plugin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sudoers_group_plugin),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sudoers_group_plugin),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sudoers_group_plugin),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sudoers_group_plugin),
            "::",
            stringify!(query)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termtype {
    pub term_names: *mut ::std::os::raw::c_char,
    pub str_table: *mut ::std::os::raw::c_char,
    pub Booleans: *mut ::std::os::raw::c_char,
    pub Numbers: *mut ::std::os::raw::c_short,
    pub Strings: *mut *mut ::std::os::raw::c_char,
    pub ext_str_table: *mut ::std::os::raw::c_char,
    pub ext_Names: *mut *mut ::std::os::raw::c_char,
    pub num_Booleans: ::std::os::raw::c_ushort,
    pub num_Numbers: ::std::os::raw::c_ushort,
    pub num_Strings: ::std::os::raw::c_ushort,
    pub ext_Booleans: ::std::os::raw::c_ushort,
    pub ext_Numbers: ::std::os::raw::c_ushort,
    pub ext_Strings: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_termtype() {
    const UNINIT: ::std::mem::MaybeUninit<termtype> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termtype>(),
        72usize,
        concat!("Size of: ", stringify!(termtype))
    );
    assert_eq!(
        ::std::mem::align_of::<termtype>(),
        8usize,
        concat!("Alignment of ", stringify!(termtype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(term_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(str_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Booleans) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(Booleans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Numbers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(Numbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Strings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(Strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_str_table) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(ext_str_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_Names) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(ext_Names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_Booleans) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(num_Booleans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_Numbers) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(num_Numbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_Strings) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(num_Strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_Booleans) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(ext_Booleans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_Numbers) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(ext_Numbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_Strings) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(termtype),
            "::",
            stringify!(ext_Strings)
        )
    );
}
pub type TERMTYPE = termtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct term {
    pub type_: TERMTYPE,
}
#[test]
fn bindgen_test_layout_term() {
    const UNINIT: ::std::mem::MaybeUninit<term> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<term>(),
        72usize,
        concat!("Size of: ", stringify!(term))
    );
    assert_eq!(
        ::std::mem::align_of::<term>(),
        8usize,
        concat!("Alignment of ", stringify!(term))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(term),
            "::",
            stringify!(type_)
        )
    );
}
pub type TERMINAL = term;
extern "C" {
    pub static mut cur_term: *mut TERMINAL;
}
extern "C" {
    pub static boolnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static boolcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static boolfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static numnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static numcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static numfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static strnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static strcodes: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static strfnames: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut PC: ::std::os::raw::c_char;
}
extern "C" {
    pub static mut UP: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut BC: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ospeed: ::std::os::raw::c_short;
}
pub const td_err_e_TD_OK: td_err_e = 0;
pub const td_err_e_TD_ERR: td_err_e = 1;
pub const td_err_e_TD_NOTHR: td_err_e = 2;
pub const td_err_e_TD_NOSV: td_err_e = 3;
pub const td_err_e_TD_NOLWP: td_err_e = 4;
pub const td_err_e_TD_BADPH: td_err_e = 5;
pub const td_err_e_TD_BADTH: td_err_e = 6;
pub const td_err_e_TD_BADSH: td_err_e = 7;
pub const td_err_e_TD_BADTA: td_err_e = 8;
pub const td_err_e_TD_BADKEY: td_err_e = 9;
pub const td_err_e_TD_NOMSG: td_err_e = 10;
pub const td_err_e_TD_NOFPREGS: td_err_e = 11;
pub const td_err_e_TD_NOLIBTHREAD: td_err_e = 12;
pub const td_err_e_TD_NOEVENT: td_err_e = 13;
pub const td_err_e_TD_NOCAPAB: td_err_e = 14;
pub const td_err_e_TD_DBERR: td_err_e = 15;
pub const td_err_e_TD_NOAPLIC: td_err_e = 16;
pub const td_err_e_TD_NOTSD: td_err_e = 17;
pub const td_err_e_TD_MALLOC: td_err_e = 18;
pub const td_err_e_TD_PARTIALREG: td_err_e = 19;
pub const td_err_e_TD_NOXREGS: td_err_e = 20;
pub const td_err_e_TD_TLSDEFER: td_err_e = 21;
pub const td_err_e_TD_NOTALLOC: td_err_e = 21;
pub const td_err_e_TD_VERSION: td_err_e = 22;
pub const td_err_e_TD_NOTLS: td_err_e = 23;
pub type td_err_e = ::std::os::raw::c_uint;
pub const td_thr_state_e_TD_THR_ANY_STATE: td_thr_state_e = 0;
pub const td_thr_state_e_TD_THR_UNKNOWN: td_thr_state_e = 1;
pub const td_thr_state_e_TD_THR_STOPPED: td_thr_state_e = 2;
pub const td_thr_state_e_TD_THR_RUN: td_thr_state_e = 3;
pub const td_thr_state_e_TD_THR_ACTIVE: td_thr_state_e = 4;
pub const td_thr_state_e_TD_THR_ZOMBIE: td_thr_state_e = 5;
pub const td_thr_state_e_TD_THR_SLEEP: td_thr_state_e = 6;
pub const td_thr_state_e_TD_THR_STOPPED_ASLEEP: td_thr_state_e = 7;
pub type td_thr_state_e = ::std::os::raw::c_uint;
pub const td_thr_type_e_TD_THR_ANY_TYPE: td_thr_type_e = 0;
pub const td_thr_type_e_TD_THR_USER: td_thr_type_e = 1;
pub const td_thr_type_e_TD_THR_SYSTEM: td_thr_type_e = 2;
pub type td_thr_type_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_thragent {
    _unused: [u8; 0],
}
pub type td_thragent_t = td_thragent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_thrhandle {
    pub th_ta_p: *mut td_thragent_t,
    pub th_unique: psaddr_t,
}
#[test]
fn bindgen_test_layout_td_thrhandle() {
    const UNINIT: ::std::mem::MaybeUninit<td_thrhandle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_thrhandle>(),
        16usize,
        concat!("Size of: ", stringify!(td_thrhandle))
    );
    assert_eq!(
        ::std::mem::align_of::<td_thrhandle>(),
        8usize,
        concat!("Alignment of ", stringify!(td_thrhandle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_ta_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrhandle),
            "::",
            stringify!(th_ta_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_unique) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrhandle),
            "::",
            stringify!(th_unique)
        )
    );
}
pub type td_thrhandle_t = td_thrhandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_thr_events {
    pub event_bits: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_td_thr_events() {
    const UNINIT: ::std::mem::MaybeUninit<td_thr_events> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_thr_events>(),
        8usize,
        concat!("Size of: ", stringify!(td_thr_events))
    );
    assert_eq!(
        ::std::mem::align_of::<td_thr_events>(),
        4usize,
        concat!("Alignment of ", stringify!(td_thr_events))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thr_events),
            "::",
            stringify!(event_bits)
        )
    );
}
pub type td_thr_events_t = td_thr_events;
pub const td_event_e_TD_ALL_EVENTS: td_event_e = 0;
pub const td_event_e_TD_EVENT_NONE: td_event_e = 0;
pub const td_event_e_TD_READY: td_event_e = 1;
pub const td_event_e_TD_SLEEP: td_event_e = 2;
pub const td_event_e_TD_SWITCHTO: td_event_e = 3;
pub const td_event_e_TD_SWITCHFROM: td_event_e = 4;
pub const td_event_e_TD_LOCK_TRY: td_event_e = 5;
pub const td_event_e_TD_CATCHSIG: td_event_e = 6;
pub const td_event_e_TD_IDLE: td_event_e = 7;
pub const td_event_e_TD_CREATE: td_event_e = 8;
pub const td_event_e_TD_DEATH: td_event_e = 9;
pub const td_event_e_TD_PREEMPT: td_event_e = 10;
pub const td_event_e_TD_PRI_INHERIT: td_event_e = 11;
pub const td_event_e_TD_REAP: td_event_e = 12;
pub const td_event_e_TD_CONCURRENCY: td_event_e = 13;
pub const td_event_e_TD_TIMEOUT: td_event_e = 14;
pub const td_event_e_TD_MIN_EVENT_NUM: td_event_e = 1;
pub const td_event_e_TD_MAX_EVENT_NUM: td_event_e = 14;
pub const td_event_e_TD_EVENTS_ENABLE: td_event_e = 31;
pub type td_event_e = ::std::os::raw::c_uint;
pub const td_notify_e_NOTIFY_BPT: td_notify_e = 0;
pub const td_notify_e_NOTIFY_AUTOBPT: td_notify_e = 1;
pub const td_notify_e_NOTIFY_SYSCALL: td_notify_e = 2;
pub type td_notify_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct td_notify {
    pub type_: td_notify_e,
    pub u: td_notify__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union td_notify__bindgen_ty_1 {
    pub bptaddr: psaddr_t,
    pub syscallno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_td_notify__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<td_notify__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_notify__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(td_notify__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<td_notify__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(td_notify__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bptaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_notify__bindgen_ty_1),
            "::",
            stringify!(bptaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syscallno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_notify__bindgen_ty_1),
            "::",
            stringify!(syscallno)
        )
    );
}
#[test]
fn bindgen_test_layout_td_notify() {
    const UNINIT: ::std::mem::MaybeUninit<td_notify> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_notify>(),
        16usize,
        concat!("Size of: ", stringify!(td_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<td_notify>(),
        8usize,
        concat!("Alignment of ", stringify!(td_notify))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_notify),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_notify),
            "::",
            stringify!(u)
        )
    );
}
pub type td_notify_t = td_notify;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct td_event_msg {
    pub event: td_event_e,
    pub th_p: *const td_thrhandle_t,
    pub msg: td_event_msg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union td_event_msg__bindgen_ty_1 {
    pub data: usize,
}
#[test]
fn bindgen_test_layout_td_event_msg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<td_event_msg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_event_msg__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(td_event_msg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<td_event_msg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(td_event_msg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_event_msg__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_td_event_msg() {
    const UNINIT: ::std::mem::MaybeUninit<td_event_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_event_msg>(),
        24usize,
        concat!("Size of: ", stringify!(td_event_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<td_event_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(td_event_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_event_msg),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_event_msg),
            "::",
            stringify!(th_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(td_event_msg),
            "::",
            stringify!(msg)
        )
    );
}
pub type td_event_msg_t = td_event_msg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_eventbuf_t {
    pub eventmask: td_thr_events_t,
    pub eventnum: td_event_e,
    pub eventdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_td_eventbuf_t() {
    const UNINIT: ::std::mem::MaybeUninit<td_eventbuf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_eventbuf_t>(),
        24usize,
        concat!("Size of: ", stringify!(td_eventbuf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<td_eventbuf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(td_eventbuf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventmask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_eventbuf_t),
            "::",
            stringify!(eventmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_eventbuf_t),
            "::",
            stringify!(eventnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventdata) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(td_eventbuf_t),
            "::",
            stringify!(eventdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_ta_stats {
    pub nthreads: ::std::os::raw::c_int,
    pub r_concurrency: ::std::os::raw::c_int,
    pub nrunnable_num: ::std::os::raw::c_int,
    pub nrunnable_den: ::std::os::raw::c_int,
    pub a_concurrency_num: ::std::os::raw::c_int,
    pub a_concurrency_den: ::std::os::raw::c_int,
    pub nlwps_num: ::std::os::raw::c_int,
    pub nlwps_den: ::std::os::raw::c_int,
    pub nidle_num: ::std::os::raw::c_int,
    pub nidle_den: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_td_ta_stats() {
    const UNINIT: ::std::mem::MaybeUninit<td_ta_stats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_ta_stats>(),
        40usize,
        concat!("Size of: ", stringify!(td_ta_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<td_ta_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(td_ta_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nthreads) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nthreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_concurrency) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(r_concurrency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrunnable_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nrunnable_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrunnable_den) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nrunnable_den)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_concurrency_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(a_concurrency_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a_concurrency_den) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(a_concurrency_den)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlwps_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nlwps_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlwps_den) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nlwps_den)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nidle_num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nidle_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nidle_den) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(td_ta_stats),
            "::",
            stringify!(nidle_den)
        )
    );
}
pub type td_ta_stats_t = td_ta_stats;
pub type thread_t = pthread_t;
pub type thread_key_t = pthread_key_t;
pub type td_thr_iter_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const td_thrhandle_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type td_key_iter_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_thrinfo {
    pub ti_ta_p: *mut td_thragent_t,
    pub ti_user_flags: ::std::os::raw::c_uint,
    pub ti_tid: thread_t,
    pub ti_tls: *mut ::std::os::raw::c_char,
    pub ti_startfunc: psaddr_t,
    pub ti_stkbase: psaddr_t,
    pub ti_stksize: ::std::os::raw::c_long,
    pub ti_ro_area: psaddr_t,
    pub ti_ro_size: ::std::os::raw::c_int,
    pub ti_state: td_thr_state_e,
    pub ti_db_suspended: ::std::os::raw::c_uchar,
    pub ti_type: td_thr_type_e,
    pub ti_pc: isize,
    pub ti_sp: isize,
    pub ti_flags: ::std::os::raw::c_short,
    pub ti_pri: ::std::os::raw::c_int,
    pub ti_lid: lwpid_t,
    pub ti_sigmask: sigset_t,
    pub ti_traceme: ::std::os::raw::c_uchar,
    pub ti_preemptflag: ::std::os::raw::c_uchar,
    pub ti_pirecflag: ::std::os::raw::c_uchar,
    pub ti_pending: sigset_t,
    pub ti_events: td_thr_events_t,
}
#[test]
fn bindgen_test_layout_td_thrinfo() {
    const UNINIT: ::std::mem::MaybeUninit<td_thrinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<td_thrinfo>(),
        384usize,
        concat!("Size of: ", stringify!(td_thrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<td_thrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(td_thrinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_ta_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_ta_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_user_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_user_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_tid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_tls) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_startfunc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_startfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_stkbase) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_stkbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_stksize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_stksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_ro_area) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_ro_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_ro_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_ro_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_state) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_db_suspended) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_db_suspended)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_type) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_pc) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_sp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_pri) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_pri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_lid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_sigmask) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_traceme) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_traceme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_preemptflag) as usize - ptr as usize },
        241usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_preemptflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_pirecflag) as usize - ptr as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_pirecflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_pending) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti_events) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(td_thrinfo),
            "::",
            stringify!(ti_events)
        )
    );
}
pub type td_thrinfo_t = td_thrinfo;
pub type tss_t = __tss_t;
pub type tss_dtor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type thrd_t = __thrd_t;
pub type thrd_start_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub const thrd_success: _bindgen_ty_39 = 0;
pub const thrd_busy: _bindgen_ty_39 = 1;
pub const thrd_error: _bindgen_ty_39 = 2;
pub const thrd_nomem: _bindgen_ty_39 = 3;
pub const thrd_timedout: _bindgen_ty_39 = 4;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const mtx_plain: _bindgen_ty_40 = 0;
pub const mtx_recursive: _bindgen_ty_40 = 1;
pub const mtx_timed: _bindgen_ty_40 = 2;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub type once_flag = __once_flag;
#[repr(C)]
#[derive(Copy, Clone)]
pub union mtx_t {
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_mtx_t() {
    const UNINIT: ::std::mem::MaybeUninit<mtx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mtx_t>(),
        48usize,
        concat!("Size of: ", stringify!(mtx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mtx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mtx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mtx_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mtx_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cnd_t {
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_cnd_t() {
    const UNINIT: ::std::mem::MaybeUninit<cnd_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cnd_t>(),
        48usize,
        concat!("Size of: ", stringify!(cnd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cnd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cnd_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cnd_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cnd_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttyent {
    pub ty_name: *mut ::std::os::raw::c_char,
    pub ty_getty: *mut ::std::os::raw::c_char,
    pub ty_type: *mut ::std::os::raw::c_char,
    pub ty_status: ::std::os::raw::c_int,
    pub ty_window: *mut ::std::os::raw::c_char,
    pub ty_comment: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ttyent() {
    const UNINIT: ::std::mem::MaybeUninit<ttyent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ttyent>(),
        48usize,
        concat!("Size of: ", stringify!(ttyent))
    );
    assert_eq!(
        ::std::mem::align_of::<ttyent>(),
        8usize,
        concat!("Alignment of ", stringify!(ttyent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_getty) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_getty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_window) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty_comment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ttyent),
            "::",
            stringify!(ty_comment)
        )
    );
}
pub type mbstate_t = __mbstate_t;
pub type char16_t = __uint_least16_t;
pub type char32_t = __uint_least32_t;
pub const UL_GETFSIZE: _bindgen_ty_41 = 1;
pub const UL_SETFSIZE: _bindgen_ty_41 = 2;
pub const __UL_GETMAXBRK: _bindgen_ty_41 = 3;
pub const __UL_GETOPENMAX: _bindgen_ty_41 = 4;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub type useconds_t = __useconds_t;
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
pub const _PC_LINK_MAX: _bindgen_ty_42 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_42 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_42 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_42 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_42 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_42 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_42 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_42 = 7;
pub const _PC_VDISABLE: _bindgen_ty_42 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_42 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_42 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_42 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_42 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_42 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_42 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_42 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_42 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_42 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_42 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_42 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_42 = 20;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_43 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_43 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_43 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_43 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_43 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_43 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_43 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_43 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_43 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_43 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_43 = 10;
pub const _SC_TIMERS: _bindgen_ty_43 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_43 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_43 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_43 = 14;
pub const _SC_FSYNC: _bindgen_ty_43 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_43 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_43 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_43 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_43 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_43 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_43 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_43 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_43 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_43 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_43 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_43 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_43 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_43 = 28;
pub const _SC_VERSION: _bindgen_ty_43 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_43 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_43 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_43 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_43 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_43 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_43 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_43 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_43 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_43 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_43 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_43 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_43 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_43 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_43 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_43 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_43 = 45;
pub const _SC_2_VERSION: _bindgen_ty_43 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_43 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_43 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_43 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_43 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_43 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_43 = 52;
pub const _SC_PII: _bindgen_ty_43 = 53;
pub const _SC_PII_XTI: _bindgen_ty_43 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_43 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_43 = 56;
pub const _SC_PII_OSI: _bindgen_ty_43 = 57;
pub const _SC_POLL: _bindgen_ty_43 = 58;
pub const _SC_SELECT: _bindgen_ty_43 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_43 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_43 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_43 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_43 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_43 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_43 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_43 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_43 = 66;
pub const _SC_THREADS: _bindgen_ty_43 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_43 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_43 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_43 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_43 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_43 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_43 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_43 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_43 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_43 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_43 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_43 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_43 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_43 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_43 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_43 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_43 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_43 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_43 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_43 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_43 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_43 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_43 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_43 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_43 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_43 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_43 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_43 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_43 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_43 = 96;
pub const _SC_2_UPE: _bindgen_ty_43 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_43 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_43 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_43 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_43 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_43 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_43 = 103;
pub const _SC_INT_MAX: _bindgen_ty_43 = 104;
pub const _SC_INT_MIN: _bindgen_ty_43 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_43 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_43 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_43 = 108;
pub const _SC_NZERO: _bindgen_ty_43 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_43 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_43 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_43 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_43 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_43 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_43 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_43 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_43 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_43 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_43 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_43 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_43 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_43 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_43 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_43 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_43 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_43 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_43 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_43 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_43 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_43 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_43 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_43 = 132;
pub const _SC_BARRIERS: _bindgen_ty_43 = 133;
pub const _SC_BASE: _bindgen_ty_43 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_43 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_43 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_43 = 137;
pub const _SC_CPUTIME: _bindgen_ty_43 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_43 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_43 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_43 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_43 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_43 = 143;
pub const _SC_FIFO: _bindgen_ty_43 = 144;
pub const _SC_PIPE: _bindgen_ty_43 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_43 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_43 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_43 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_43 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_43 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_43 = 151;
pub const _SC_NETWORKING: _bindgen_ty_43 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_43 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_43 = 154;
pub const _SC_REGEXP: _bindgen_ty_43 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_43 = 156;
pub const _SC_SHELL: _bindgen_ty_43 = 157;
pub const _SC_SIGNALS: _bindgen_ty_43 = 158;
pub const _SC_SPAWN: _bindgen_ty_43 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_43 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_43 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_43 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_43 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_43 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_43 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_43 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_43 = 167;
pub const _SC_2_PBS: _bindgen_ty_43 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_43 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_43 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_43 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_43 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_43 = 173;
pub const _SC_STREAMS: _bindgen_ty_43 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_43 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_43 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_43 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_43 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_43 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_43 = 180;
pub const _SC_TRACE: _bindgen_ty_43 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_43 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_43 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_43 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_43 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_43 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_43 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_43 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_43 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_43 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_43 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_43 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_43 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_43 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_43 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_43 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_43 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_43 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_43 = 199;
pub const _SC_IPV6: _bindgen_ty_43 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_43 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_43 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_43 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_43 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_43 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_43 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_43 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_43 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_43 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_43 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_43 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_43 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_43 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_43 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_43 = 250;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_44 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_44 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_44 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_44 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_44 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_44 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_44 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_44 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_44 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_44 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_44 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_44 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_44 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_44 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_44 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_44 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_44 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_44 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_44 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_44 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_44 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_44 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_44 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_44 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_44 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_44 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_44 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_44 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_44 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_44 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_44 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_44 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_44 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_44 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_44 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_44 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_44 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_44 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_44 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_44 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_44 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_44 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_44 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_44 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_44 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_44 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_44 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_44 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_44 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_44 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_44 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_44 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_44 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_44 = 1149;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: __time_t,
    pub modtime: __time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    const UNINIT: ::std::mem::MaybeUninit<utimbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(actime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modtime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(modtime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __exit_status {
    pub __e_termination: ::std::os::raw::c_short,
    pub __e_exit: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout___exit_status() {
    const UNINIT: ::std::mem::MaybeUninit<__exit_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__exit_status>(),
        4usize,
        concat!("Size of: ", stringify!(__exit_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__exit_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__exit_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__e_termination) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__exit_status),
            "::",
            stringify!(__e_termination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__e_exit) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__exit_status),
            "::",
            stringify!(__e_exit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmpx {
    pub ut_type: ::std::os::raw::c_short,
    pub ut_pid: __pid_t,
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_user: [::std::os::raw::c_char; 32usize],
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_exit: __exit_status,
    pub ut_session: ::std::os::raw::c_long,
    pub ut_tv: timeval,
    pub ut_addr_v6: [__int32_t; 4usize],
    pub __glibc_reserved: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout_utmpx() {
    const UNINIT: ::std::mem::MaybeUninit<utmpx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<utmpx>(),
        400usize,
        concat!("Size of: ", stringify!(utmpx))
    );
    assert_eq!(
        ::std::mem::align_of::<utmpx>(),
        8usize,
        concat!("Alignment of ", stringify!(utmpx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_user) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_host) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_exit) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_exit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_session) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_tv) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_tv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ut_addr_v6) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(ut_addr_v6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(utmpx),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub const idtype_t_P_PIDFD: idtype_t = 3;
pub type idtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    _unused: [u8; 0],
}
pub const WRDE_DOOFFS: _bindgen_ty_45 = 1;
pub const WRDE_APPEND: _bindgen_ty_45 = 2;
pub const WRDE_NOCMD: _bindgen_ty_45 = 4;
pub const WRDE_REUSE: _bindgen_ty_45 = 8;
pub const WRDE_SHOWERR: _bindgen_ty_45 = 16;
pub const WRDE_UNDEF: _bindgen_ty_45 = 32;
pub const __WRDE_FLAGS: _bindgen_ty_45 = 63;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wordexp_t {
    pub we_wordc: usize,
    pub we_wordv: *mut *mut ::std::os::raw::c_char,
    pub we_offs: usize,
}
#[test]
fn bindgen_test_layout_wordexp_t() {
    const UNINIT: ::std::mem::MaybeUninit<wordexp_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wordexp_t>(),
        24usize,
        concat!("Size of: ", stringify!(wordexp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wordexp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wordexp_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).we_wordc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wordexp_t),
            "::",
            stringify!(we_wordc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).we_wordv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wordexp_t),
            "::",
            stringify!(we_wordv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).we_offs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wordexp_t),
            "::",
            stringify!(we_offs)
        )
    );
}
pub const WRDE_NOSPACE: _bindgen_ty_46 = 1;
pub const WRDE_BADCHAR: _bindgen_ty_46 = 2;
pub const WRDE_BADVAL: _bindgen_ty_46 = 3;
pub const WRDE_CMDSUB: _bindgen_ty_46 = 4;
pub const WRDE_SYNTAX: _bindgen_ty_46 = 5;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_dfa_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dst_key {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __spawn_action {
    pub _address: u8,
}
